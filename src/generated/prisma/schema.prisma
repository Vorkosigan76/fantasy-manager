// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////////////////////////////////////////////////
// BETTER-AUTH SCHEMA

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  teams         Team[]

  role       String    @default("user")
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

//////////////////////////////////////////////////////////////////
// GEOGRAPHY

model Region {
  id        String       @id @unique
  updatedAt DateTime     @updatedAt
  createdAt DateTime     @default(now())
  i18n      RegionI18n[]
  locations Location[]

  @@map("region")
}

model RegionI18n {
  id        String   @id @default(cuid())
  regionId  String
  language  String
  name      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  region    Region   @relation(fields: [regionId], references: [id], onDelete: Cascade)

  @@unique([regionId, language])
  @@map("region_i18n")
}

enum LocationType {
  town
}

model Location {
  id        String         @id @unique
  type      LocationType
  regionId  String
  latitude  Float
  longitude Float
  updatedAt DateTime       @updatedAt
  createdAt DateTime       @default(now())
  i18n      LocationI18n[]

  region     Region     @relation(fields: [regionId], references: [id], onDelete: Cascade)
  routesFrom Route[]    @relation("RouteFrom")
  routesTo   Route[]    @relation("RouteTo")
  buildings  Building[]

  townInfo TownInformation?

  @@map("location")
}

model LocationI18n {
  id         String   @id @default(cuid())
  locationId String
  language   String
  name       String
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([locationId, language])
  @@map("location_i18n")
}

model TownInformation {
  id         String   @id @default(cuid())
  locationId String   @unique
  population Int
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@map("town_information")
}

enum RouteType {
  road_paved
  road_unpaved
  river_upstream
  river_downstream
}

model Route {
  id        String    @id @default(cuid())
  type      RouteType
  fromId    String
  toId      String
  distance  Float
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())

  locationFrom Location @relation("RouteFrom", fields: [fromId], references: [id], onDelete: Cascade)
  locationTo   Location @relation("RouteTo", fields: [toId], references: [id], onDelete: Cascade)

  @@map("route")
}

//////////////////////////////////////////////////////////////////
// BUILDINGS

model BuildingType {
  id        String             @id @unique
  updatedAt DateTime           @updatedAt
  createdAt DateTime           @default(now())
  i18n      BuildingTypeI18n[]

  buildings Building[]

  @@map("building_type")
}

model BuildingTypeI18n {
  id             String   @id @default(cuid())
  buildingTypeId String
  language       String
  name           String
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  buildingType BuildingType @relation(fields: [buildingTypeId], references: [id], onDelete: Cascade)

  @@unique([buildingTypeId, language])
  @@map("building_type_i18n")
}

model Building {
  id             String   @id @default(cuid())
  buildingTypeId String
  locationId     String
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  buildingType BuildingType   @relation(fields: [buildingTypeId], references: [id], onDelete: Cascade)
  location     Location       @relation(fields: [locationId], references: [id], onDelete: Cascade)
  i18n         BuildingI18n[]
  stadiumInfo  StadiumInfo?

  @@map("building")
}

model BuildingI18n {
  id          String   @id @default(cuid())
  buildingId  String
  language    String
  name        String
  description String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@unique([buildingId, language])
  @@map("building_i18n")
}

model StadiumInfo {
  id         String   @id @default(cuid())
  buildingId String   @unique
  capacity   Int
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("stadium_info")
}

//////////////////////////////////////////////////////////////////
// TEAMS

model Race {
  id String @id @unique

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  i18n    RaceI18n[]
  persons Person[]
}

model RaceI18n {
  id        String   @id @default(cuid())
  raceId    String
  language  String
  name      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  race Race @relation(fields: [raceId], references: [id], onDelete: Cascade)

  @@unique([raceId, language])
  @@map("raceId_i18n")
}

model Person {
  id        String @id @default(cuid())
  name      String
  shortName String
  raceId    String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  race                  Race                   @relation(fields: [raceId], references: [id], onDelete: Cascade)
  playercharacteristics PlayerCharacteristics?

  @@map("person")
}

model PlayerCharacteristics {
  id        String   @id @default(cuid())
  playerId  String   @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  player Person @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("player_characteristics")
}

//////////////////////////////////////////////////////////////////
// TEAMS

model Team {
  id        String  @id @default(cuid())
  name      String
  shortName String
  isActive  Boolean
  ownerId   String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  owner User? @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("team")
}


/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Verification
 * 
 */
export type Verification = $Result.DefaultSelection<Prisma.$VerificationPayload>
/**
 * Model Region
 * 
 */
export type Region = $Result.DefaultSelection<Prisma.$RegionPayload>
/**
 * Model RegionI18n
 * 
 */
export type RegionI18n = $Result.DefaultSelection<Prisma.$RegionI18nPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model LocationI18n
 * 
 */
export type LocationI18n = $Result.DefaultSelection<Prisma.$LocationI18nPayload>
/**
 * Model TownInformation
 * 
 */
export type TownInformation = $Result.DefaultSelection<Prisma.$TownInformationPayload>
/**
 * Model Route
 * 
 */
export type Route = $Result.DefaultSelection<Prisma.$RoutePayload>
/**
 * Model BuildingType
 * 
 */
export type BuildingType = $Result.DefaultSelection<Prisma.$BuildingTypePayload>
/**
 * Model BuildingTypeI18n
 * 
 */
export type BuildingTypeI18n = $Result.DefaultSelection<Prisma.$BuildingTypeI18nPayload>
/**
 * Model Building
 * 
 */
export type Building = $Result.DefaultSelection<Prisma.$BuildingPayload>
/**
 * Model BuildingI18n
 * 
 */
export type BuildingI18n = $Result.DefaultSelection<Prisma.$BuildingI18nPayload>
/**
 * Model StadiumInfo
 * 
 */
export type StadiumInfo = $Result.DefaultSelection<Prisma.$StadiumInfoPayload>
/**
 * Model Race
 * 
 */
export type Race = $Result.DefaultSelection<Prisma.$RacePayload>
/**
 * Model RaceI18n
 * 
 */
export type RaceI18n = $Result.DefaultSelection<Prisma.$RaceI18nPayload>
/**
 * Model Culture
 * 
 */
export type Culture = $Result.DefaultSelection<Prisma.$CulturePayload>
/**
 * Model CultureI18n
 * 
 */
export type CultureI18n = $Result.DefaultSelection<Prisma.$CultureI18nPayload>
/**
 * Model RegionPopulation
 * 
 */
export type RegionPopulation = $Result.DefaultSelection<Prisma.$RegionPopulationPayload>
/**
 * Model NameModel
 * 
 */
export type NameModel = $Result.DefaultSelection<Prisma.$NameModelPayload>
/**
 * Model NameComponentKey
 * 
 */
export type NameComponentKey = $Result.DefaultSelection<Prisma.$NameComponentKeyPayload>
/**
 * Model NameComponentValue
 * 
 */
export type NameComponentValue = $Result.DefaultSelection<Prisma.$NameComponentValuePayload>
/**
 * Model Person
 * 
 */
export type Person = $Result.DefaultSelection<Prisma.$PersonPayload>
/**
 * Model PlayerCharacteristics
 * 
 */
export type PlayerCharacteristics = $Result.DefaultSelection<Prisma.$PlayerCharacteristicsPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model TeamLocation
 * 
 */
export type TeamLocation = $Result.DefaultSelection<Prisma.$TeamLocationPayload>
/**
 * Model PersonContract
 * 
 */
export type PersonContract = $Result.DefaultSelection<Prisma.$PersonContractPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const LocationType: {
  town: 'town'
};

export type LocationType = (typeof LocationType)[keyof typeof LocationType]


export const RouteType: {
  road_paved: 'road_paved',
  road_unpaved: 'road_unpaved',
  river_upstream: 'river_upstream',
  river_downstream: 'river_downstream'
};

export type RouteType = (typeof RouteType)[keyof typeof RouteType]


export const SexType: {
  male: 'male',
  female: 'female'
};

export type SexType = (typeof SexType)[keyof typeof SexType]


export const ContractType: {
  player: 'player'
};

export type ContractType = (typeof ContractType)[keyof typeof ContractType]

}

export type LocationType = $Enums.LocationType

export const LocationType: typeof $Enums.LocationType

export type RouteType = $Enums.RouteType

export const RouteType: typeof $Enums.RouteType

export type SexType = $Enums.SexType

export const SexType: typeof $Enums.SexType

export type ContractType = $Enums.ContractType

export const ContractType: typeof $Enums.ContractType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.region`: Exposes CRUD operations for the **Region** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Regions
    * const regions = await prisma.region.findMany()
    * ```
    */
  get region(): Prisma.RegionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.regionI18n`: Exposes CRUD operations for the **RegionI18n** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RegionI18ns
    * const regionI18ns = await prisma.regionI18n.findMany()
    * ```
    */
  get regionI18n(): Prisma.RegionI18nDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.locationI18n`: Exposes CRUD operations for the **LocationI18n** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LocationI18ns
    * const locationI18ns = await prisma.locationI18n.findMany()
    * ```
    */
  get locationI18n(): Prisma.LocationI18nDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.townInformation`: Exposes CRUD operations for the **TownInformation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TownInformations
    * const townInformations = await prisma.townInformation.findMany()
    * ```
    */
  get townInformation(): Prisma.TownInformationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.route`: Exposes CRUD operations for the **Route** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Routes
    * const routes = await prisma.route.findMany()
    * ```
    */
  get route(): Prisma.RouteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.buildingType`: Exposes CRUD operations for the **BuildingType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BuildingTypes
    * const buildingTypes = await prisma.buildingType.findMany()
    * ```
    */
  get buildingType(): Prisma.BuildingTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.buildingTypeI18n`: Exposes CRUD operations for the **BuildingTypeI18n** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BuildingTypeI18ns
    * const buildingTypeI18ns = await prisma.buildingTypeI18n.findMany()
    * ```
    */
  get buildingTypeI18n(): Prisma.BuildingTypeI18nDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.building`: Exposes CRUD operations for the **Building** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buildings
    * const buildings = await prisma.building.findMany()
    * ```
    */
  get building(): Prisma.BuildingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.buildingI18n`: Exposes CRUD operations for the **BuildingI18n** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BuildingI18ns
    * const buildingI18ns = await prisma.buildingI18n.findMany()
    * ```
    */
  get buildingI18n(): Prisma.BuildingI18nDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stadiumInfo`: Exposes CRUD operations for the **StadiumInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StadiumInfos
    * const stadiumInfos = await prisma.stadiumInfo.findMany()
    * ```
    */
  get stadiumInfo(): Prisma.StadiumInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.race`: Exposes CRUD operations for the **Race** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Races
    * const races = await prisma.race.findMany()
    * ```
    */
  get race(): Prisma.RaceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.raceI18n`: Exposes CRUD operations for the **RaceI18n** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RaceI18ns
    * const raceI18ns = await prisma.raceI18n.findMany()
    * ```
    */
  get raceI18n(): Prisma.RaceI18nDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.culture`: Exposes CRUD operations for the **Culture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cultures
    * const cultures = await prisma.culture.findMany()
    * ```
    */
  get culture(): Prisma.CultureDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cultureI18n`: Exposes CRUD operations for the **CultureI18n** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CultureI18ns
    * const cultureI18ns = await prisma.cultureI18n.findMany()
    * ```
    */
  get cultureI18n(): Prisma.CultureI18nDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.regionPopulation`: Exposes CRUD operations for the **RegionPopulation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RegionPopulations
    * const regionPopulations = await prisma.regionPopulation.findMany()
    * ```
    */
  get regionPopulation(): Prisma.RegionPopulationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.nameModel`: Exposes CRUD operations for the **NameModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NameModels
    * const nameModels = await prisma.nameModel.findMany()
    * ```
    */
  get nameModel(): Prisma.NameModelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.nameComponentKey`: Exposes CRUD operations for the **NameComponentKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NameComponentKeys
    * const nameComponentKeys = await prisma.nameComponentKey.findMany()
    * ```
    */
  get nameComponentKey(): Prisma.NameComponentKeyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.nameComponentValue`: Exposes CRUD operations for the **NameComponentValue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NameComponentValues
    * const nameComponentValues = await prisma.nameComponentValue.findMany()
    * ```
    */
  get nameComponentValue(): Prisma.NameComponentValueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.person`: Exposes CRUD operations for the **Person** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more People
    * const people = await prisma.person.findMany()
    * ```
    */
  get person(): Prisma.PersonDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.playerCharacteristics`: Exposes CRUD operations for the **PlayerCharacteristics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerCharacteristics
    * const playerCharacteristics = await prisma.playerCharacteristics.findMany()
    * ```
    */
  get playerCharacteristics(): Prisma.PlayerCharacteristicsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamLocation`: Exposes CRUD operations for the **TeamLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamLocations
    * const teamLocations = await prisma.teamLocation.findMany()
    * ```
    */
  get teamLocation(): Prisma.TeamLocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.personContract`: Exposes CRUD operations for the **PersonContract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PersonContracts
    * const personContracts = await prisma.personContract.findMany()
    * ```
    */
  get personContract(): Prisma.PersonContractDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Account: 'Account',
    Verification: 'Verification',
    Region: 'Region',
    RegionI18n: 'RegionI18n',
    Location: 'Location',
    LocationI18n: 'LocationI18n',
    TownInformation: 'TownInformation',
    Route: 'Route',
    BuildingType: 'BuildingType',
    BuildingTypeI18n: 'BuildingTypeI18n',
    Building: 'Building',
    BuildingI18n: 'BuildingI18n',
    StadiumInfo: 'StadiumInfo',
    Race: 'Race',
    RaceI18n: 'RaceI18n',
    Culture: 'Culture',
    CultureI18n: 'CultureI18n',
    RegionPopulation: 'RegionPopulation',
    NameModel: 'NameModel',
    NameComponentKey: 'NameComponentKey',
    NameComponentValue: 'NameComponentValue',
    Person: 'Person',
    PlayerCharacteristics: 'PlayerCharacteristics',
    Team: 'Team',
    TeamLocation: 'TeamLocation',
    PersonContract: 'PersonContract'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "session" | "account" | "verification" | "region" | "regionI18n" | "location" | "locationI18n" | "townInformation" | "route" | "buildingType" | "buildingTypeI18n" | "building" | "buildingI18n" | "stadiumInfo" | "race" | "raceI18n" | "culture" | "cultureI18n" | "regionPopulation" | "nameModel" | "nameComponentKey" | "nameComponentValue" | "person" | "playerCharacteristics" | "team" | "teamLocation" | "personContract"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Verification: {
        payload: Prisma.$VerificationPayload<ExtArgs>
        fields: Prisma.VerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findFirst: {
            args: Prisma.VerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findMany: {
            args: Prisma.VerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          create: {
            args: Prisma.VerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          createMany: {
            args: Prisma.VerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          delete: {
            args: Prisma.VerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          update: {
            args: Prisma.VerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          deleteMany: {
            args: Prisma.VerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          upsert: {
            args: Prisma.VerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.VerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
      Region: {
        payload: Prisma.$RegionPayload<ExtArgs>
        fields: Prisma.RegionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findFirst: {
            args: Prisma.RegionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findMany: {
            args: Prisma.RegionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          create: {
            args: Prisma.RegionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          createMany: {
            args: Prisma.RegionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          delete: {
            args: Prisma.RegionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          update: {
            args: Prisma.RegionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          deleteMany: {
            args: Prisma.RegionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          upsert: {
            args: Prisma.RegionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          aggregate: {
            args: Prisma.RegionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegion>
          }
          groupBy: {
            args: Prisma.RegionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionCountArgs<ExtArgs>
            result: $Utils.Optional<RegionCountAggregateOutputType> | number
          }
        }
      }
      RegionI18n: {
        payload: Prisma.$RegionI18nPayload<ExtArgs>
        fields: Prisma.RegionI18nFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionI18nFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionI18nPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionI18nFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionI18nPayload>
          }
          findFirst: {
            args: Prisma.RegionI18nFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionI18nPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionI18nFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionI18nPayload>
          }
          findMany: {
            args: Prisma.RegionI18nFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionI18nPayload>[]
          }
          create: {
            args: Prisma.RegionI18nCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionI18nPayload>
          }
          createMany: {
            args: Prisma.RegionI18nCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegionI18nCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionI18nPayload>[]
          }
          delete: {
            args: Prisma.RegionI18nDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionI18nPayload>
          }
          update: {
            args: Prisma.RegionI18nUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionI18nPayload>
          }
          deleteMany: {
            args: Prisma.RegionI18nDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionI18nUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegionI18nUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionI18nPayload>[]
          }
          upsert: {
            args: Prisma.RegionI18nUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionI18nPayload>
          }
          aggregate: {
            args: Prisma.RegionI18nAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegionI18n>
          }
          groupBy: {
            args: Prisma.RegionI18nGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionI18nGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionI18nCountArgs<ExtArgs>
            result: $Utils.Optional<RegionI18nCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      LocationI18n: {
        payload: Prisma.$LocationI18nPayload<ExtArgs>
        fields: Prisma.LocationI18nFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationI18nFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationI18nPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationI18nFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationI18nPayload>
          }
          findFirst: {
            args: Prisma.LocationI18nFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationI18nPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationI18nFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationI18nPayload>
          }
          findMany: {
            args: Prisma.LocationI18nFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationI18nPayload>[]
          }
          create: {
            args: Prisma.LocationI18nCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationI18nPayload>
          }
          createMany: {
            args: Prisma.LocationI18nCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationI18nCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationI18nPayload>[]
          }
          delete: {
            args: Prisma.LocationI18nDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationI18nPayload>
          }
          update: {
            args: Prisma.LocationI18nUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationI18nPayload>
          }
          deleteMany: {
            args: Prisma.LocationI18nDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationI18nUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LocationI18nUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationI18nPayload>[]
          }
          upsert: {
            args: Prisma.LocationI18nUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationI18nPayload>
          }
          aggregate: {
            args: Prisma.LocationI18nAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocationI18n>
          }
          groupBy: {
            args: Prisma.LocationI18nGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationI18nGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationI18nCountArgs<ExtArgs>
            result: $Utils.Optional<LocationI18nCountAggregateOutputType> | number
          }
        }
      }
      TownInformation: {
        payload: Prisma.$TownInformationPayload<ExtArgs>
        fields: Prisma.TownInformationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TownInformationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TownInformationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TownInformationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TownInformationPayload>
          }
          findFirst: {
            args: Prisma.TownInformationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TownInformationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TownInformationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TownInformationPayload>
          }
          findMany: {
            args: Prisma.TownInformationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TownInformationPayload>[]
          }
          create: {
            args: Prisma.TownInformationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TownInformationPayload>
          }
          createMany: {
            args: Prisma.TownInformationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TownInformationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TownInformationPayload>[]
          }
          delete: {
            args: Prisma.TownInformationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TownInformationPayload>
          }
          update: {
            args: Prisma.TownInformationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TownInformationPayload>
          }
          deleteMany: {
            args: Prisma.TownInformationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TownInformationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TownInformationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TownInformationPayload>[]
          }
          upsert: {
            args: Prisma.TownInformationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TownInformationPayload>
          }
          aggregate: {
            args: Prisma.TownInformationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTownInformation>
          }
          groupBy: {
            args: Prisma.TownInformationGroupByArgs<ExtArgs>
            result: $Utils.Optional<TownInformationGroupByOutputType>[]
          }
          count: {
            args: Prisma.TownInformationCountArgs<ExtArgs>
            result: $Utils.Optional<TownInformationCountAggregateOutputType> | number
          }
        }
      }
      Route: {
        payload: Prisma.$RoutePayload<ExtArgs>
        fields: Prisma.RouteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RouteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RouteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          findFirst: {
            args: Prisma.RouteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RouteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          findMany: {
            args: Prisma.RouteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>[]
          }
          create: {
            args: Prisma.RouteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          createMany: {
            args: Prisma.RouteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RouteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>[]
          }
          delete: {
            args: Prisma.RouteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          update: {
            args: Prisma.RouteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          deleteMany: {
            args: Prisma.RouteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RouteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RouteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>[]
          }
          upsert: {
            args: Prisma.RouteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          aggregate: {
            args: Prisma.RouteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoute>
          }
          groupBy: {
            args: Prisma.RouteGroupByArgs<ExtArgs>
            result: $Utils.Optional<RouteGroupByOutputType>[]
          }
          count: {
            args: Prisma.RouteCountArgs<ExtArgs>
            result: $Utils.Optional<RouteCountAggregateOutputType> | number
          }
        }
      }
      BuildingType: {
        payload: Prisma.$BuildingTypePayload<ExtArgs>
        fields: Prisma.BuildingTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuildingTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuildingTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypePayload>
          }
          findFirst: {
            args: Prisma.BuildingTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuildingTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypePayload>
          }
          findMany: {
            args: Prisma.BuildingTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypePayload>[]
          }
          create: {
            args: Prisma.BuildingTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypePayload>
          }
          createMany: {
            args: Prisma.BuildingTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BuildingTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypePayload>[]
          }
          delete: {
            args: Prisma.BuildingTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypePayload>
          }
          update: {
            args: Prisma.BuildingTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypePayload>
          }
          deleteMany: {
            args: Prisma.BuildingTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuildingTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BuildingTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypePayload>[]
          }
          upsert: {
            args: Prisma.BuildingTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypePayload>
          }
          aggregate: {
            args: Prisma.BuildingTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuildingType>
          }
          groupBy: {
            args: Prisma.BuildingTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuildingTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuildingTypeCountArgs<ExtArgs>
            result: $Utils.Optional<BuildingTypeCountAggregateOutputType> | number
          }
        }
      }
      BuildingTypeI18n: {
        payload: Prisma.$BuildingTypeI18nPayload<ExtArgs>
        fields: Prisma.BuildingTypeI18nFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuildingTypeI18nFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypeI18nPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuildingTypeI18nFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypeI18nPayload>
          }
          findFirst: {
            args: Prisma.BuildingTypeI18nFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypeI18nPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuildingTypeI18nFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypeI18nPayload>
          }
          findMany: {
            args: Prisma.BuildingTypeI18nFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypeI18nPayload>[]
          }
          create: {
            args: Prisma.BuildingTypeI18nCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypeI18nPayload>
          }
          createMany: {
            args: Prisma.BuildingTypeI18nCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BuildingTypeI18nCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypeI18nPayload>[]
          }
          delete: {
            args: Prisma.BuildingTypeI18nDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypeI18nPayload>
          }
          update: {
            args: Prisma.BuildingTypeI18nUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypeI18nPayload>
          }
          deleteMany: {
            args: Prisma.BuildingTypeI18nDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuildingTypeI18nUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BuildingTypeI18nUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypeI18nPayload>[]
          }
          upsert: {
            args: Prisma.BuildingTypeI18nUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingTypeI18nPayload>
          }
          aggregate: {
            args: Prisma.BuildingTypeI18nAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuildingTypeI18n>
          }
          groupBy: {
            args: Prisma.BuildingTypeI18nGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuildingTypeI18nGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuildingTypeI18nCountArgs<ExtArgs>
            result: $Utils.Optional<BuildingTypeI18nCountAggregateOutputType> | number
          }
        }
      }
      Building: {
        payload: Prisma.$BuildingPayload<ExtArgs>
        fields: Prisma.BuildingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuildingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuildingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          findFirst: {
            args: Prisma.BuildingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuildingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          findMany: {
            args: Prisma.BuildingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>[]
          }
          create: {
            args: Prisma.BuildingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          createMany: {
            args: Prisma.BuildingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BuildingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>[]
          }
          delete: {
            args: Prisma.BuildingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          update: {
            args: Prisma.BuildingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          deleteMany: {
            args: Prisma.BuildingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuildingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BuildingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>[]
          }
          upsert: {
            args: Prisma.BuildingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          aggregate: {
            args: Prisma.BuildingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuilding>
          }
          groupBy: {
            args: Prisma.BuildingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuildingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuildingCountArgs<ExtArgs>
            result: $Utils.Optional<BuildingCountAggregateOutputType> | number
          }
        }
      }
      BuildingI18n: {
        payload: Prisma.$BuildingI18nPayload<ExtArgs>
        fields: Prisma.BuildingI18nFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuildingI18nFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingI18nPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuildingI18nFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingI18nPayload>
          }
          findFirst: {
            args: Prisma.BuildingI18nFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingI18nPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuildingI18nFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingI18nPayload>
          }
          findMany: {
            args: Prisma.BuildingI18nFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingI18nPayload>[]
          }
          create: {
            args: Prisma.BuildingI18nCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingI18nPayload>
          }
          createMany: {
            args: Prisma.BuildingI18nCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BuildingI18nCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingI18nPayload>[]
          }
          delete: {
            args: Prisma.BuildingI18nDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingI18nPayload>
          }
          update: {
            args: Prisma.BuildingI18nUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingI18nPayload>
          }
          deleteMany: {
            args: Prisma.BuildingI18nDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuildingI18nUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BuildingI18nUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingI18nPayload>[]
          }
          upsert: {
            args: Prisma.BuildingI18nUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingI18nPayload>
          }
          aggregate: {
            args: Prisma.BuildingI18nAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuildingI18n>
          }
          groupBy: {
            args: Prisma.BuildingI18nGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuildingI18nGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuildingI18nCountArgs<ExtArgs>
            result: $Utils.Optional<BuildingI18nCountAggregateOutputType> | number
          }
        }
      }
      StadiumInfo: {
        payload: Prisma.$StadiumInfoPayload<ExtArgs>
        fields: Prisma.StadiumInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StadiumInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StadiumInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StadiumInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StadiumInfoPayload>
          }
          findFirst: {
            args: Prisma.StadiumInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StadiumInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StadiumInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StadiumInfoPayload>
          }
          findMany: {
            args: Prisma.StadiumInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StadiumInfoPayload>[]
          }
          create: {
            args: Prisma.StadiumInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StadiumInfoPayload>
          }
          createMany: {
            args: Prisma.StadiumInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StadiumInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StadiumInfoPayload>[]
          }
          delete: {
            args: Prisma.StadiumInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StadiumInfoPayload>
          }
          update: {
            args: Prisma.StadiumInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StadiumInfoPayload>
          }
          deleteMany: {
            args: Prisma.StadiumInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StadiumInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StadiumInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StadiumInfoPayload>[]
          }
          upsert: {
            args: Prisma.StadiumInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StadiumInfoPayload>
          }
          aggregate: {
            args: Prisma.StadiumInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStadiumInfo>
          }
          groupBy: {
            args: Prisma.StadiumInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<StadiumInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.StadiumInfoCountArgs<ExtArgs>
            result: $Utils.Optional<StadiumInfoCountAggregateOutputType> | number
          }
        }
      }
      Race: {
        payload: Prisma.$RacePayload<ExtArgs>
        fields: Prisma.RaceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RaceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RaceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>
          }
          findFirst: {
            args: Prisma.RaceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RaceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>
          }
          findMany: {
            args: Prisma.RaceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>[]
          }
          create: {
            args: Prisma.RaceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>
          }
          createMany: {
            args: Prisma.RaceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RaceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>[]
          }
          delete: {
            args: Prisma.RaceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>
          }
          update: {
            args: Prisma.RaceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>
          }
          deleteMany: {
            args: Prisma.RaceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RaceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RaceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>[]
          }
          upsert: {
            args: Prisma.RaceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>
          }
          aggregate: {
            args: Prisma.RaceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRace>
          }
          groupBy: {
            args: Prisma.RaceGroupByArgs<ExtArgs>
            result: $Utils.Optional<RaceGroupByOutputType>[]
          }
          count: {
            args: Prisma.RaceCountArgs<ExtArgs>
            result: $Utils.Optional<RaceCountAggregateOutputType> | number
          }
        }
      }
      RaceI18n: {
        payload: Prisma.$RaceI18nPayload<ExtArgs>
        fields: Prisma.RaceI18nFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RaceI18nFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RaceI18nPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RaceI18nFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RaceI18nPayload>
          }
          findFirst: {
            args: Prisma.RaceI18nFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RaceI18nPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RaceI18nFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RaceI18nPayload>
          }
          findMany: {
            args: Prisma.RaceI18nFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RaceI18nPayload>[]
          }
          create: {
            args: Prisma.RaceI18nCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RaceI18nPayload>
          }
          createMany: {
            args: Prisma.RaceI18nCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RaceI18nCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RaceI18nPayload>[]
          }
          delete: {
            args: Prisma.RaceI18nDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RaceI18nPayload>
          }
          update: {
            args: Prisma.RaceI18nUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RaceI18nPayload>
          }
          deleteMany: {
            args: Prisma.RaceI18nDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RaceI18nUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RaceI18nUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RaceI18nPayload>[]
          }
          upsert: {
            args: Prisma.RaceI18nUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RaceI18nPayload>
          }
          aggregate: {
            args: Prisma.RaceI18nAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRaceI18n>
          }
          groupBy: {
            args: Prisma.RaceI18nGroupByArgs<ExtArgs>
            result: $Utils.Optional<RaceI18nGroupByOutputType>[]
          }
          count: {
            args: Prisma.RaceI18nCountArgs<ExtArgs>
            result: $Utils.Optional<RaceI18nCountAggregateOutputType> | number
          }
        }
      }
      Culture: {
        payload: Prisma.$CulturePayload<ExtArgs>
        fields: Prisma.CultureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CultureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CultureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturePayload>
          }
          findFirst: {
            args: Prisma.CultureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CultureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturePayload>
          }
          findMany: {
            args: Prisma.CultureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturePayload>[]
          }
          create: {
            args: Prisma.CultureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturePayload>
          }
          createMany: {
            args: Prisma.CultureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CultureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturePayload>[]
          }
          delete: {
            args: Prisma.CultureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturePayload>
          }
          update: {
            args: Prisma.CultureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturePayload>
          }
          deleteMany: {
            args: Prisma.CultureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CultureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CultureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturePayload>[]
          }
          upsert: {
            args: Prisma.CultureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturePayload>
          }
          aggregate: {
            args: Prisma.CultureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCulture>
          }
          groupBy: {
            args: Prisma.CultureGroupByArgs<ExtArgs>
            result: $Utils.Optional<CultureGroupByOutputType>[]
          }
          count: {
            args: Prisma.CultureCountArgs<ExtArgs>
            result: $Utils.Optional<CultureCountAggregateOutputType> | number
          }
        }
      }
      CultureI18n: {
        payload: Prisma.$CultureI18nPayload<ExtArgs>
        fields: Prisma.CultureI18nFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CultureI18nFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CultureI18nPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CultureI18nFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CultureI18nPayload>
          }
          findFirst: {
            args: Prisma.CultureI18nFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CultureI18nPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CultureI18nFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CultureI18nPayload>
          }
          findMany: {
            args: Prisma.CultureI18nFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CultureI18nPayload>[]
          }
          create: {
            args: Prisma.CultureI18nCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CultureI18nPayload>
          }
          createMany: {
            args: Prisma.CultureI18nCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CultureI18nCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CultureI18nPayload>[]
          }
          delete: {
            args: Prisma.CultureI18nDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CultureI18nPayload>
          }
          update: {
            args: Prisma.CultureI18nUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CultureI18nPayload>
          }
          deleteMany: {
            args: Prisma.CultureI18nDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CultureI18nUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CultureI18nUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CultureI18nPayload>[]
          }
          upsert: {
            args: Prisma.CultureI18nUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CultureI18nPayload>
          }
          aggregate: {
            args: Prisma.CultureI18nAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCultureI18n>
          }
          groupBy: {
            args: Prisma.CultureI18nGroupByArgs<ExtArgs>
            result: $Utils.Optional<CultureI18nGroupByOutputType>[]
          }
          count: {
            args: Prisma.CultureI18nCountArgs<ExtArgs>
            result: $Utils.Optional<CultureI18nCountAggregateOutputType> | number
          }
        }
      }
      RegionPopulation: {
        payload: Prisma.$RegionPopulationPayload<ExtArgs>
        fields: Prisma.RegionPopulationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionPopulationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPopulationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionPopulationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPopulationPayload>
          }
          findFirst: {
            args: Prisma.RegionPopulationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPopulationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionPopulationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPopulationPayload>
          }
          findMany: {
            args: Prisma.RegionPopulationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPopulationPayload>[]
          }
          create: {
            args: Prisma.RegionPopulationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPopulationPayload>
          }
          createMany: {
            args: Prisma.RegionPopulationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegionPopulationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPopulationPayload>[]
          }
          delete: {
            args: Prisma.RegionPopulationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPopulationPayload>
          }
          update: {
            args: Prisma.RegionPopulationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPopulationPayload>
          }
          deleteMany: {
            args: Prisma.RegionPopulationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionPopulationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegionPopulationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPopulationPayload>[]
          }
          upsert: {
            args: Prisma.RegionPopulationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPopulationPayload>
          }
          aggregate: {
            args: Prisma.RegionPopulationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegionPopulation>
          }
          groupBy: {
            args: Prisma.RegionPopulationGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionPopulationGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionPopulationCountArgs<ExtArgs>
            result: $Utils.Optional<RegionPopulationCountAggregateOutputType> | number
          }
        }
      }
      NameModel: {
        payload: Prisma.$NameModelPayload<ExtArgs>
        fields: Prisma.NameModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NameModelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NameModelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameModelPayload>
          }
          findFirst: {
            args: Prisma.NameModelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NameModelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameModelPayload>
          }
          findMany: {
            args: Prisma.NameModelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameModelPayload>[]
          }
          create: {
            args: Prisma.NameModelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameModelPayload>
          }
          createMany: {
            args: Prisma.NameModelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NameModelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameModelPayload>[]
          }
          delete: {
            args: Prisma.NameModelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameModelPayload>
          }
          update: {
            args: Prisma.NameModelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameModelPayload>
          }
          deleteMany: {
            args: Prisma.NameModelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NameModelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NameModelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameModelPayload>[]
          }
          upsert: {
            args: Prisma.NameModelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameModelPayload>
          }
          aggregate: {
            args: Prisma.NameModelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNameModel>
          }
          groupBy: {
            args: Prisma.NameModelGroupByArgs<ExtArgs>
            result: $Utils.Optional<NameModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.NameModelCountArgs<ExtArgs>
            result: $Utils.Optional<NameModelCountAggregateOutputType> | number
          }
        }
      }
      NameComponentKey: {
        payload: Prisma.$NameComponentKeyPayload<ExtArgs>
        fields: Prisma.NameComponentKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NameComponentKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NameComponentKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentKeyPayload>
          }
          findFirst: {
            args: Prisma.NameComponentKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NameComponentKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentKeyPayload>
          }
          findMany: {
            args: Prisma.NameComponentKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentKeyPayload>[]
          }
          create: {
            args: Prisma.NameComponentKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentKeyPayload>
          }
          createMany: {
            args: Prisma.NameComponentKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NameComponentKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentKeyPayload>[]
          }
          delete: {
            args: Prisma.NameComponentKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentKeyPayload>
          }
          update: {
            args: Prisma.NameComponentKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentKeyPayload>
          }
          deleteMany: {
            args: Prisma.NameComponentKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NameComponentKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NameComponentKeyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentKeyPayload>[]
          }
          upsert: {
            args: Prisma.NameComponentKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentKeyPayload>
          }
          aggregate: {
            args: Prisma.NameComponentKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNameComponentKey>
          }
          groupBy: {
            args: Prisma.NameComponentKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<NameComponentKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.NameComponentKeyCountArgs<ExtArgs>
            result: $Utils.Optional<NameComponentKeyCountAggregateOutputType> | number
          }
        }
      }
      NameComponentValue: {
        payload: Prisma.$NameComponentValuePayload<ExtArgs>
        fields: Prisma.NameComponentValueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NameComponentValueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentValuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NameComponentValueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentValuePayload>
          }
          findFirst: {
            args: Prisma.NameComponentValueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentValuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NameComponentValueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentValuePayload>
          }
          findMany: {
            args: Prisma.NameComponentValueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentValuePayload>[]
          }
          create: {
            args: Prisma.NameComponentValueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentValuePayload>
          }
          createMany: {
            args: Prisma.NameComponentValueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NameComponentValueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentValuePayload>[]
          }
          delete: {
            args: Prisma.NameComponentValueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentValuePayload>
          }
          update: {
            args: Prisma.NameComponentValueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentValuePayload>
          }
          deleteMany: {
            args: Prisma.NameComponentValueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NameComponentValueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NameComponentValueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentValuePayload>[]
          }
          upsert: {
            args: Prisma.NameComponentValueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameComponentValuePayload>
          }
          aggregate: {
            args: Prisma.NameComponentValueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNameComponentValue>
          }
          groupBy: {
            args: Prisma.NameComponentValueGroupByArgs<ExtArgs>
            result: $Utils.Optional<NameComponentValueGroupByOutputType>[]
          }
          count: {
            args: Prisma.NameComponentValueCountArgs<ExtArgs>
            result: $Utils.Optional<NameComponentValueCountAggregateOutputType> | number
          }
        }
      }
      Person: {
        payload: Prisma.$PersonPayload<ExtArgs>
        fields: Prisma.PersonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findFirst: {
            args: Prisma.PersonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findMany: {
            args: Prisma.PersonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>[]
          }
          create: {
            args: Prisma.PersonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          createMany: {
            args: Prisma.PersonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>[]
          }
          delete: {
            args: Prisma.PersonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          update: {
            args: Prisma.PersonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          deleteMany: {
            args: Prisma.PersonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PersonUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>[]
          }
          upsert: {
            args: Prisma.PersonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          aggregate: {
            args: Prisma.PersonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerson>
          }
          groupBy: {
            args: Prisma.PersonGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonCountArgs<ExtArgs>
            result: $Utils.Optional<PersonCountAggregateOutputType> | number
          }
        }
      }
      PlayerCharacteristics: {
        payload: Prisma.$PlayerCharacteristicsPayload<ExtArgs>
        fields: Prisma.PlayerCharacteristicsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerCharacteristicsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerCharacteristicsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerCharacteristicsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerCharacteristicsPayload>
          }
          findFirst: {
            args: Prisma.PlayerCharacteristicsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerCharacteristicsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerCharacteristicsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerCharacteristicsPayload>
          }
          findMany: {
            args: Prisma.PlayerCharacteristicsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerCharacteristicsPayload>[]
          }
          create: {
            args: Prisma.PlayerCharacteristicsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerCharacteristicsPayload>
          }
          createMany: {
            args: Prisma.PlayerCharacteristicsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerCharacteristicsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerCharacteristicsPayload>[]
          }
          delete: {
            args: Prisma.PlayerCharacteristicsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerCharacteristicsPayload>
          }
          update: {
            args: Prisma.PlayerCharacteristicsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerCharacteristicsPayload>
          }
          deleteMany: {
            args: Prisma.PlayerCharacteristicsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerCharacteristicsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlayerCharacteristicsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerCharacteristicsPayload>[]
          }
          upsert: {
            args: Prisma.PlayerCharacteristicsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerCharacteristicsPayload>
          }
          aggregate: {
            args: Prisma.PlayerCharacteristicsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerCharacteristics>
          }
          groupBy: {
            args: Prisma.PlayerCharacteristicsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerCharacteristicsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCharacteristicsCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerCharacteristicsCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      TeamLocation: {
        payload: Prisma.$TeamLocationPayload<ExtArgs>
        fields: Prisma.TeamLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamLocationPayload>
          }
          findFirst: {
            args: Prisma.TeamLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamLocationPayload>
          }
          findMany: {
            args: Prisma.TeamLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamLocationPayload>[]
          }
          create: {
            args: Prisma.TeamLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamLocationPayload>
          }
          createMany: {
            args: Prisma.TeamLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamLocationPayload>[]
          }
          delete: {
            args: Prisma.TeamLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamLocationPayload>
          }
          update: {
            args: Prisma.TeamLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamLocationPayload>
          }
          deleteMany: {
            args: Prisma.TeamLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamLocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamLocationPayload>[]
          }
          upsert: {
            args: Prisma.TeamLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamLocationPayload>
          }
          aggregate: {
            args: Prisma.TeamLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamLocation>
          }
          groupBy: {
            args: Prisma.TeamLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamLocationCountArgs<ExtArgs>
            result: $Utils.Optional<TeamLocationCountAggregateOutputType> | number
          }
        }
      }
      PersonContract: {
        payload: Prisma.$PersonContractPayload<ExtArgs>
        fields: Prisma.PersonContractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonContractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonContractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonContractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonContractPayload>
          }
          findFirst: {
            args: Prisma.PersonContractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonContractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonContractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonContractPayload>
          }
          findMany: {
            args: Prisma.PersonContractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonContractPayload>[]
          }
          create: {
            args: Prisma.PersonContractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonContractPayload>
          }
          createMany: {
            args: Prisma.PersonContractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonContractCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonContractPayload>[]
          }
          delete: {
            args: Prisma.PersonContractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonContractPayload>
          }
          update: {
            args: Prisma.PersonContractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonContractPayload>
          }
          deleteMany: {
            args: Prisma.PersonContractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonContractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PersonContractUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonContractPayload>[]
          }
          upsert: {
            args: Prisma.PersonContractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonContractPayload>
          }
          aggregate: {
            args: Prisma.PersonContractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePersonContract>
          }
          groupBy: {
            args: Prisma.PersonContractGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonContractGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonContractCountArgs<ExtArgs>
            result: $Utils.Optional<PersonContractCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    session?: SessionOmit
    account?: AccountOmit
    verification?: VerificationOmit
    region?: RegionOmit
    regionI18n?: RegionI18nOmit
    location?: LocationOmit
    locationI18n?: LocationI18nOmit
    townInformation?: TownInformationOmit
    route?: RouteOmit
    buildingType?: BuildingTypeOmit
    buildingTypeI18n?: BuildingTypeI18nOmit
    building?: BuildingOmit
    buildingI18n?: BuildingI18nOmit
    stadiumInfo?: StadiumInfoOmit
    race?: RaceOmit
    raceI18n?: RaceI18nOmit
    culture?: CultureOmit
    cultureI18n?: CultureI18nOmit
    regionPopulation?: RegionPopulationOmit
    nameModel?: NameModelOmit
    nameComponentKey?: NameComponentKeyOmit
    nameComponentValue?: NameComponentValueOmit
    person?: PersonOmit
    playerCharacteristics?: PlayerCharacteristicsOmit
    team?: TeamOmit
    teamLocation?: TeamLocationOmit
    personContract?: PersonContractOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    accounts: number
    teams: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    teams?: boolean | UserCountOutputTypeCountTeamsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }


  /**
   * Count Type RegionCountOutputType
   */

  export type RegionCountOutputType = {
    i18n: number
    locations: number
    regionPopulations: number
  }

  export type RegionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    i18n?: boolean | RegionCountOutputTypeCountI18nArgs
    locations?: boolean | RegionCountOutputTypeCountLocationsArgs
    regionPopulations?: boolean | RegionCountOutputTypeCountRegionPopulationsArgs
  }

  // Custom InputTypes
  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionCountOutputType
     */
    select?: RegionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountI18nArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionI18nWhereInput
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountRegionPopulationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionPopulationWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    i18n: number
    buildings: number
    routesFrom: number
    routesTo: number
    teams: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    i18n?: boolean | LocationCountOutputTypeCountI18nArgs
    buildings?: boolean | LocationCountOutputTypeCountBuildingsArgs
    routesFrom?: boolean | LocationCountOutputTypeCountRoutesFromArgs
    routesTo?: boolean | LocationCountOutputTypeCountRoutesToArgs
    teams?: boolean | LocationCountOutputTypeCountTeamsArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountI18nArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationI18nWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountBuildingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildingWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountRoutesFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RouteWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountRoutesToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RouteWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamLocationWhereInput
  }


  /**
   * Count Type BuildingTypeCountOutputType
   */

  export type BuildingTypeCountOutputType = {
    i18n: number
    buildings: number
  }

  export type BuildingTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    i18n?: boolean | BuildingTypeCountOutputTypeCountI18nArgs
    buildings?: boolean | BuildingTypeCountOutputTypeCountBuildingsArgs
  }

  // Custom InputTypes
  /**
   * BuildingTypeCountOutputType without action
   */
  export type BuildingTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeCountOutputType
     */
    select?: BuildingTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BuildingTypeCountOutputType without action
   */
  export type BuildingTypeCountOutputTypeCountI18nArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildingTypeI18nWhereInput
  }

  /**
   * BuildingTypeCountOutputType without action
   */
  export type BuildingTypeCountOutputTypeCountBuildingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildingWhereInput
  }


  /**
   * Count Type BuildingCountOutputType
   */

  export type BuildingCountOutputType = {
    i18n: number
  }

  export type BuildingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    i18n?: boolean | BuildingCountOutputTypeCountI18nArgs
  }

  // Custom InputTypes
  /**
   * BuildingCountOutputType without action
   */
  export type BuildingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingCountOutputType
     */
    select?: BuildingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BuildingCountOutputType without action
   */
  export type BuildingCountOutputTypeCountI18nArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildingI18nWhereInput
  }


  /**
   * Count Type RaceCountOutputType
   */

  export type RaceCountOutputType = {
    i18n: number
    cultures: number
    persons: number
  }

  export type RaceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    i18n?: boolean | RaceCountOutputTypeCountI18nArgs
    cultures?: boolean | RaceCountOutputTypeCountCulturesArgs
    persons?: boolean | RaceCountOutputTypeCountPersonsArgs
  }

  // Custom InputTypes
  /**
   * RaceCountOutputType without action
   */
  export type RaceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceCountOutputType
     */
    select?: RaceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RaceCountOutputType without action
   */
  export type RaceCountOutputTypeCountI18nArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RaceI18nWhereInput
  }

  /**
   * RaceCountOutputType without action
   */
  export type RaceCountOutputTypeCountCulturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CultureWhereInput
  }

  /**
   * RaceCountOutputType without action
   */
  export type RaceCountOutputTypeCountPersonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonWhereInput
  }


  /**
   * Count Type CultureCountOutputType
   */

  export type CultureCountOutputType = {
    i18n: number
    nameModels: number
    regionPopulations: number
  }

  export type CultureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    i18n?: boolean | CultureCountOutputTypeCountI18nArgs
    nameModels?: boolean | CultureCountOutputTypeCountNameModelsArgs
    regionPopulations?: boolean | CultureCountOutputTypeCountRegionPopulationsArgs
  }

  // Custom InputTypes
  /**
   * CultureCountOutputType without action
   */
  export type CultureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureCountOutputType
     */
    select?: CultureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CultureCountOutputType without action
   */
  export type CultureCountOutputTypeCountI18nArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CultureI18nWhereInput
  }

  /**
   * CultureCountOutputType without action
   */
  export type CultureCountOutputTypeCountNameModelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NameModelWhereInput
  }

  /**
   * CultureCountOutputType without action
   */
  export type CultureCountOutputTypeCountRegionPopulationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionPopulationWhereInput
  }


  /**
   * Count Type NameComponentKeyCountOutputType
   */

  export type NameComponentKeyCountOutputType = {
    values: number
  }

  export type NameComponentKeyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    values?: boolean | NameComponentKeyCountOutputTypeCountValuesArgs
  }

  // Custom InputTypes
  /**
   * NameComponentKeyCountOutputType without action
   */
  export type NameComponentKeyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentKeyCountOutputType
     */
    select?: NameComponentKeyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NameComponentKeyCountOutputType without action
   */
  export type NameComponentKeyCountOutputTypeCountValuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NameComponentValueWhereInput
  }


  /**
   * Count Type PersonCountOutputType
   */

  export type PersonCountOutputType = {
    PersonContract: number
  }

  export type PersonCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PersonContract?: boolean | PersonCountOutputTypeCountPersonContractArgs
  }

  // Custom InputTypes
  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonCountOutputType
     */
    select?: PersonCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountPersonContractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonContractWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    PersonContract: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PersonContract?: boolean | TeamCountOutputTypeCountPersonContractArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountPersonContractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonContractWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: string | null
    banned: boolean | null
    banReason: string | null
    banExpires: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: string | null
    banned: boolean | null
    banReason: string | null
    banExpires: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    createdAt: number
    updatedAt: number
    role: number
    banned: number
    banReason: number
    banExpires: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    banned?: true
    banReason?: true
    banExpires?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    banned?: true
    banReason?: true
    banExpires?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    banned?: true
    banReason?: true
    banExpires?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image: string | null
    createdAt: Date
    updatedAt: Date
    role: string
    banned: boolean | null
    banReason: string | null
    banExpires: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    teams?: boolean | User$teamsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "createdAt" | "updatedAt" | "role" | "banned" | "banReason" | "banExpires", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    teams?: boolean | User$teamsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      teams: Prisma.$TeamPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      emailVerified: boolean
      image: string | null
      createdAt: Date
      updatedAt: Date
      role: string
      banned: boolean | null
      banReason: string | null
      banExpires: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teams<T extends User$teamsArgs<ExtArgs> = {}>(args?: Subset<T, User$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly image: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'String'>
    readonly banned: FieldRef<"User", 'Boolean'>
    readonly banReason: FieldRef<"User", 'String'>
    readonly banExpires: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.teams
   */
  export type User$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
    impersonatedBy: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
    impersonatedBy: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    expiresAt: number
    token: number
    createdAt: number
    updatedAt: number
    ipAddress: number
    userAgent: number
    userId: number
    impersonatedBy: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    impersonatedBy?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    impersonatedBy?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    impersonatedBy?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    expiresAt: Date
    token: string
    createdAt: Date
    updatedAt: Date
    ipAddress: string | null
    userAgent: string | null
    userId: string
    impersonatedBy: string | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expiresAt" | "token" | "createdAt" | "updatedAt" | "ipAddress" | "userAgent" | "userId" | "impersonatedBy", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      expiresAt: Date
      token: string
      createdAt: Date
      updatedAt: Date
      ipAddress: string | null
      userAgent: string | null
      userId: string
      impersonatedBy: string | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly token: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly impersonatedBy: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    accountId: number
    providerId: number
    userId: number
    accessToken: number
    refreshToken: number
    idToken: number
    accessTokenExpiresAt: number
    refreshTokenExpiresAt: number
    scope: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accountId" | "providerId" | "userId" | "accessToken" | "refreshToken" | "idToken" | "accessTokenExpiresAt" | "refreshTokenExpiresAt" | "scope" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountId: string
      providerId: string
      userId: string
      accessToken: string | null
      refreshToken: string | null
      idToken: string | null
      accessTokenExpiresAt: Date | null
      refreshTokenExpiresAt: Date | null
      scope: string | null
      password: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly accountId: FieldRef<"Account", 'String'>
    readonly providerId: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly accessToken: FieldRef<"Account", 'String'>
    readonly refreshToken: FieldRef<"Account", 'String'>
    readonly idToken: FieldRef<"Account", 'String'>
    readonly accessTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly refreshTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Verification
   */

  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationMinAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationMaxAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationCountAggregateOutputType = {
    id: number
    identifier: number
    value: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VerificationMinAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationMaxAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationCountAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verification to aggregate.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithAggregationInput | VerificationOrderByWithAggregationInput[]
    by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }

  export type VerificationGroupByOutputType = {
    id: string
    identifier: string
    value: string
    expiresAt: Date
    createdAt: Date | null
    updatedAt: Date | null
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectScalar = {
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "identifier" | "value" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["verification"]>

  export type $VerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Verification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      identifier: string
      value: string
      expiresAt: Date
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["verification"]>
    composites: {}
  }

  type VerificationGetPayload<S extends boolean | null | undefined | VerificationDefaultArgs> = $Result.GetResult<Prisma.$VerificationPayload, S>

  type VerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface VerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationFindUniqueArgs>(args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Verification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationFindFirstArgs>(args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationFindManyArgs>(args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
     */
    create<T extends VerificationCreateArgs>(args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Verifications.
     * @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationCreateManyArgs>(args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Verifications and returns the data saved in the database.
     * @param {VerificationCreateManyAndReturnArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
     */
    delete<T extends VerificationDeleteArgs>(args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationUpdateArgs>(args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationDeleteManyArgs>(args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationUpdateManyArgs>(args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications and returns the data updated in the database.
     * @param {VerificationUpdateManyAndReturnArgs} args - Arguments to update many Verifications.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
     */
    upsert<T extends VerificationUpsertArgs>(args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Verification model
   */
  readonly fields: VerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Verification model
   */
  interface VerificationFieldRefs {
    readonly id: FieldRef<"Verification", 'String'>
    readonly identifier: FieldRef<"Verification", 'String'>
    readonly value: FieldRef<"Verification", 'String'>
    readonly expiresAt: FieldRef<"Verification", 'DateTime'>
    readonly createdAt: FieldRef<"Verification", 'DateTime'>
    readonly updatedAt: FieldRef<"Verification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Verification findUnique
   */
  export type VerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findUniqueOrThrow
   */
  export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findFirst
   */
  export type VerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findFirstOrThrow
   */
  export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verifications to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification create
   */
  export type VerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to create a Verification.
     */
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }

  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification createManyAndReturn
   */
  export type VerificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification update
   */
  export type VerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to update a Verification.
     */
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification updateManyAndReturn
   */
  export type VerificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The filter to search for the Verification to update in case it exists.
     */
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     */
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }

  /**
   * Verification delete
   */
  export type VerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter which Verification to delete.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verifications to delete
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to delete.
     */
    limit?: number
  }

  /**
   * Verification without action
   */
  export type VerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
  }


  /**
   * Model Region
   */

  export type AggregateRegion = {
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  export type RegionMinAggregateOutputType = {
    id: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type RegionMaxAggregateOutputType = {
    id: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type RegionCountAggregateOutputType = {
    id: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type RegionMinAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
  }

  export type RegionMaxAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
  }

  export type RegionCountAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type RegionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Region to aggregate.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Regions
    **/
    _count?: true | RegionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionMaxAggregateInputType
  }

  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegion[P]>
      : GetScalarType<T[P], AggregateRegion[P]>
  }




  export type RegionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionWhereInput
    orderBy?: RegionOrderByWithAggregationInput | RegionOrderByWithAggregationInput[]
    by: RegionScalarFieldEnum[] | RegionScalarFieldEnum
    having?: RegionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionCountAggregateInputType | true
    _min?: RegionMinAggregateInputType
    _max?: RegionMaxAggregateInputType
  }

  export type RegionGroupByOutputType = {
    id: string
    updatedAt: Date
    createdAt: Date
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionGroupByOutputType[P]>
            : GetScalarType<T[P], RegionGroupByOutputType[P]>
        }
      >
    >


  export type RegionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    i18n?: boolean | Region$i18nArgs<ExtArgs>
    locations?: boolean | Region$locationsArgs<ExtArgs>
    regionPopulations?: boolean | Region$regionPopulationsArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>

  export type RegionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectScalar = {
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type RegionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "updatedAt" | "createdAt", ExtArgs["result"]["region"]>
  export type RegionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    i18n?: boolean | Region$i18nArgs<ExtArgs>
    locations?: boolean | Region$locationsArgs<ExtArgs>
    regionPopulations?: boolean | Region$regionPopulationsArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RegionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RegionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RegionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Region"
    objects: {
      i18n: Prisma.$RegionI18nPayload<ExtArgs>[]
      locations: Prisma.$LocationPayload<ExtArgs>[]
      regionPopulations: Prisma.$RegionPopulationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["region"]>
    composites: {}
  }

  type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = $Result.GetResult<Prisma.$RegionPayload, S>

  type RegionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegionCountAggregateInputType | true
    }

  export interface RegionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
    /**
     * Find zero or one Region that matches the filter.
     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionFindUniqueArgs>(args: SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Region that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionFindFirstArgs>(args?: SelectSubset<T, RegionFindFirstArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Regions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Regions
     * const regions = await prisma.region.findMany()
     * 
     * // Get first 10 Regions
     * const regions = await prisma.region.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionWithIdOnly = await prisma.region.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegionFindManyArgs>(args?: SelectSubset<T, RegionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Region.
     * @param {RegionCreateArgs} args - Arguments to create a Region.
     * @example
     * // Create one Region
     * const Region = await prisma.region.create({
     *   data: {
     *     // ... data to create a Region
     *   }
     * })
     * 
     */
    create<T extends RegionCreateArgs>(args: SelectSubset<T, RegionCreateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Regions.
     * @param {RegionCreateManyArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionCreateManyArgs>(args?: SelectSubset<T, RegionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Regions and returns the data saved in the database.
     * @param {RegionCreateManyAndReturnArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegionCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Region.
     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
     * @example
     * // Delete one Region
     * const Region = await prisma.region.delete({
     *   where: {
     *     // ... filter to delete one Region
     *   }
     * })
     * 
     */
    delete<T extends RegionDeleteArgs>(args: SelectSubset<T, RegionDeleteArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Region.
     * @param {RegionUpdateArgs} args - Arguments to update one Region.
     * @example
     * // Update one Region
     * const region = await prisma.region.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionUpdateArgs>(args: SelectSubset<T, RegionUpdateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Regions.
     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
     * @example
     * // Delete a few Regions
     * const { count } = await prisma.region.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionDeleteManyArgs>(args?: SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionUpdateManyArgs>(args: SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions and returns the data updated in the database.
     * @param {RegionUpdateManyAndReturnArgs} args - Arguments to update many Regions.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegionUpdateManyAndReturnArgs>(args: SelectSubset<T, RegionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Region.
     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
     * @example
     * // Update or create a Region
     * const region = await prisma.region.upsert({
     *   create: {
     *     // ... data to create a Region
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Region we want to update
     *   }
     * })
     */
    upsert<T extends RegionUpsertArgs>(args: SelectSubset<T, RegionUpsertArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
     * @example
     * // Count the number of Regions
     * const count = await prisma.region.count({
     *   where: {
     *     // ... the filter for the Regions we want to count
     *   }
     * })
    **/
    count<T extends RegionCountArgs>(
      args?: Subset<T, RegionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>

    /**
     * Group by Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionGroupByArgs['orderBy'] }
        : { orderBy?: RegionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Region model
   */
  readonly fields: RegionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Region.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    i18n<T extends Region$i18nArgs<ExtArgs> = {}>(args?: Subset<T, Region$i18nArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionI18nPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    locations<T extends Region$locationsArgs<ExtArgs> = {}>(args?: Subset<T, Region$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    regionPopulations<T extends Region$regionPopulationsArgs<ExtArgs> = {}>(args?: Subset<T, Region$regionPopulationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPopulationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Region model
   */
  interface RegionFieldRefs {
    readonly id: FieldRef<"Region", 'String'>
    readonly updatedAt: FieldRef<"Region", 'DateTime'>
    readonly createdAt: FieldRef<"Region", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Region findUnique
   */
  export type RegionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findUniqueOrThrow
   */
  export type RegionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findFirst
   */
  export type RegionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findFirstOrThrow
   */
  export type RegionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findMany
   */
  export type RegionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Regions to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region create
   */
  export type RegionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to create a Region.
     */
    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
  }

  /**
   * Region createMany
   */
  export type RegionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region createManyAndReturn
   */
  export type RegionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region update
   */
  export type RegionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to update a Region.
     */
    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
    /**
     * Choose, which Region to update.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region updateMany
   */
  export type RegionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
  }

  /**
   * Region updateManyAndReturn
   */
  export type RegionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
  }

  /**
   * Region upsert
   */
  export type RegionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The filter to search for the Region to update in case it exists.
     */
    where: RegionWhereUniqueInput
    /**
     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
     */
    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
    /**
     * In case the Region was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
  }

  /**
   * Region delete
   */
  export type RegionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter which Region to delete.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region deleteMany
   */
  export type RegionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Regions to delete
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to delete.
     */
    limit?: number
  }

  /**
   * Region.i18n
   */
  export type Region$i18nArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionI18n
     */
    select?: RegionI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionI18n
     */
    omit?: RegionI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionI18nInclude<ExtArgs> | null
    where?: RegionI18nWhereInput
    orderBy?: RegionI18nOrderByWithRelationInput | RegionI18nOrderByWithRelationInput[]
    cursor?: RegionI18nWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegionI18nScalarFieldEnum | RegionI18nScalarFieldEnum[]
  }

  /**
   * Region.locations
   */
  export type Region$locationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    cursor?: LocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Region.regionPopulations
   */
  export type Region$regionPopulationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationInclude<ExtArgs> | null
    where?: RegionPopulationWhereInput
    orderBy?: RegionPopulationOrderByWithRelationInput | RegionPopulationOrderByWithRelationInput[]
    cursor?: RegionPopulationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegionPopulationScalarFieldEnum | RegionPopulationScalarFieldEnum[]
  }

  /**
   * Region without action
   */
  export type RegionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
  }


  /**
   * Model RegionI18n
   */

  export type AggregateRegionI18n = {
    _count: RegionI18nCountAggregateOutputType | null
    _min: RegionI18nMinAggregateOutputType | null
    _max: RegionI18nMaxAggregateOutputType | null
  }

  export type RegionI18nMinAggregateOutputType = {
    id: string | null
    regionId: string | null
    language: string | null
    name: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type RegionI18nMaxAggregateOutputType = {
    id: string | null
    regionId: string | null
    language: string | null
    name: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type RegionI18nCountAggregateOutputType = {
    id: number
    regionId: number
    language: number
    name: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type RegionI18nMinAggregateInputType = {
    id?: true
    regionId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
  }

  export type RegionI18nMaxAggregateInputType = {
    id?: true
    regionId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
  }

  export type RegionI18nCountAggregateInputType = {
    id?: true
    regionId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type RegionI18nAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegionI18n to aggregate.
     */
    where?: RegionI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegionI18ns to fetch.
     */
    orderBy?: RegionI18nOrderByWithRelationInput | RegionI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegionI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegionI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RegionI18ns
    **/
    _count?: true | RegionI18nCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionI18nMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionI18nMaxAggregateInputType
  }

  export type GetRegionI18nAggregateType<T extends RegionI18nAggregateArgs> = {
        [P in keyof T & keyof AggregateRegionI18n]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegionI18n[P]>
      : GetScalarType<T[P], AggregateRegionI18n[P]>
  }




  export type RegionI18nGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionI18nWhereInput
    orderBy?: RegionI18nOrderByWithAggregationInput | RegionI18nOrderByWithAggregationInput[]
    by: RegionI18nScalarFieldEnum[] | RegionI18nScalarFieldEnum
    having?: RegionI18nScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionI18nCountAggregateInputType | true
    _min?: RegionI18nMinAggregateInputType
    _max?: RegionI18nMaxAggregateInputType
  }

  export type RegionI18nGroupByOutputType = {
    id: string
    regionId: string
    language: string
    name: string
    updatedAt: Date
    createdAt: Date
    _count: RegionI18nCountAggregateOutputType | null
    _min: RegionI18nMinAggregateOutputType | null
    _max: RegionI18nMaxAggregateOutputType | null
  }

  type GetRegionI18nGroupByPayload<T extends RegionI18nGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionI18nGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionI18nGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionI18nGroupByOutputType[P]>
            : GetScalarType<T[P], RegionI18nGroupByOutputType[P]>
        }
      >
    >


  export type RegionI18nSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    regionId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["regionI18n"]>

  export type RegionI18nSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    regionId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["regionI18n"]>

  export type RegionI18nSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    regionId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["regionI18n"]>

  export type RegionI18nSelectScalar = {
    id?: boolean
    regionId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type RegionI18nOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "regionId" | "language" | "name" | "updatedAt" | "createdAt", ExtArgs["result"]["regionI18n"]>
  export type RegionI18nInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }
  export type RegionI18nIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }
  export type RegionI18nIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }

  export type $RegionI18nPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RegionI18n"
    objects: {
      region: Prisma.$RegionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      regionId: string
      language: string
      name: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["regionI18n"]>
    composites: {}
  }

  type RegionI18nGetPayload<S extends boolean | null | undefined | RegionI18nDefaultArgs> = $Result.GetResult<Prisma.$RegionI18nPayload, S>

  type RegionI18nCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegionI18nFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegionI18nCountAggregateInputType | true
    }

  export interface RegionI18nDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RegionI18n'], meta: { name: 'RegionI18n' } }
    /**
     * Find zero or one RegionI18n that matches the filter.
     * @param {RegionI18nFindUniqueArgs} args - Arguments to find a RegionI18n
     * @example
     * // Get one RegionI18n
     * const regionI18n = await prisma.regionI18n.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionI18nFindUniqueArgs>(args: SelectSubset<T, RegionI18nFindUniqueArgs<ExtArgs>>): Prisma__RegionI18nClient<$Result.GetResult<Prisma.$RegionI18nPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RegionI18n that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegionI18nFindUniqueOrThrowArgs} args - Arguments to find a RegionI18n
     * @example
     * // Get one RegionI18n
     * const regionI18n = await prisma.regionI18n.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionI18nFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionI18nFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionI18nClient<$Result.GetResult<Prisma.$RegionI18nPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RegionI18n that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionI18nFindFirstArgs} args - Arguments to find a RegionI18n
     * @example
     * // Get one RegionI18n
     * const regionI18n = await prisma.regionI18n.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionI18nFindFirstArgs>(args?: SelectSubset<T, RegionI18nFindFirstArgs<ExtArgs>>): Prisma__RegionI18nClient<$Result.GetResult<Prisma.$RegionI18nPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RegionI18n that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionI18nFindFirstOrThrowArgs} args - Arguments to find a RegionI18n
     * @example
     * // Get one RegionI18n
     * const regionI18n = await prisma.regionI18n.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionI18nFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionI18nFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionI18nClient<$Result.GetResult<Prisma.$RegionI18nPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RegionI18ns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionI18nFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RegionI18ns
     * const regionI18ns = await prisma.regionI18n.findMany()
     * 
     * // Get first 10 RegionI18ns
     * const regionI18ns = await prisma.regionI18n.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionI18nWithIdOnly = await prisma.regionI18n.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegionI18nFindManyArgs>(args?: SelectSubset<T, RegionI18nFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionI18nPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RegionI18n.
     * @param {RegionI18nCreateArgs} args - Arguments to create a RegionI18n.
     * @example
     * // Create one RegionI18n
     * const RegionI18n = await prisma.regionI18n.create({
     *   data: {
     *     // ... data to create a RegionI18n
     *   }
     * })
     * 
     */
    create<T extends RegionI18nCreateArgs>(args: SelectSubset<T, RegionI18nCreateArgs<ExtArgs>>): Prisma__RegionI18nClient<$Result.GetResult<Prisma.$RegionI18nPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RegionI18ns.
     * @param {RegionI18nCreateManyArgs} args - Arguments to create many RegionI18ns.
     * @example
     * // Create many RegionI18ns
     * const regionI18n = await prisma.regionI18n.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionI18nCreateManyArgs>(args?: SelectSubset<T, RegionI18nCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RegionI18ns and returns the data saved in the database.
     * @param {RegionI18nCreateManyAndReturnArgs} args - Arguments to create many RegionI18ns.
     * @example
     * // Create many RegionI18ns
     * const regionI18n = await prisma.regionI18n.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RegionI18ns and only return the `id`
     * const regionI18nWithIdOnly = await prisma.regionI18n.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegionI18nCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionI18nCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionI18nPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RegionI18n.
     * @param {RegionI18nDeleteArgs} args - Arguments to delete one RegionI18n.
     * @example
     * // Delete one RegionI18n
     * const RegionI18n = await prisma.regionI18n.delete({
     *   where: {
     *     // ... filter to delete one RegionI18n
     *   }
     * })
     * 
     */
    delete<T extends RegionI18nDeleteArgs>(args: SelectSubset<T, RegionI18nDeleteArgs<ExtArgs>>): Prisma__RegionI18nClient<$Result.GetResult<Prisma.$RegionI18nPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RegionI18n.
     * @param {RegionI18nUpdateArgs} args - Arguments to update one RegionI18n.
     * @example
     * // Update one RegionI18n
     * const regionI18n = await prisma.regionI18n.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionI18nUpdateArgs>(args: SelectSubset<T, RegionI18nUpdateArgs<ExtArgs>>): Prisma__RegionI18nClient<$Result.GetResult<Prisma.$RegionI18nPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RegionI18ns.
     * @param {RegionI18nDeleteManyArgs} args - Arguments to filter RegionI18ns to delete.
     * @example
     * // Delete a few RegionI18ns
     * const { count } = await prisma.regionI18n.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionI18nDeleteManyArgs>(args?: SelectSubset<T, RegionI18nDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegionI18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionI18nUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RegionI18ns
     * const regionI18n = await prisma.regionI18n.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionI18nUpdateManyArgs>(args: SelectSubset<T, RegionI18nUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegionI18ns and returns the data updated in the database.
     * @param {RegionI18nUpdateManyAndReturnArgs} args - Arguments to update many RegionI18ns.
     * @example
     * // Update many RegionI18ns
     * const regionI18n = await prisma.regionI18n.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RegionI18ns and only return the `id`
     * const regionI18nWithIdOnly = await prisma.regionI18n.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegionI18nUpdateManyAndReturnArgs>(args: SelectSubset<T, RegionI18nUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionI18nPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RegionI18n.
     * @param {RegionI18nUpsertArgs} args - Arguments to update or create a RegionI18n.
     * @example
     * // Update or create a RegionI18n
     * const regionI18n = await prisma.regionI18n.upsert({
     *   create: {
     *     // ... data to create a RegionI18n
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RegionI18n we want to update
     *   }
     * })
     */
    upsert<T extends RegionI18nUpsertArgs>(args: SelectSubset<T, RegionI18nUpsertArgs<ExtArgs>>): Prisma__RegionI18nClient<$Result.GetResult<Prisma.$RegionI18nPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RegionI18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionI18nCountArgs} args - Arguments to filter RegionI18ns to count.
     * @example
     * // Count the number of RegionI18ns
     * const count = await prisma.regionI18n.count({
     *   where: {
     *     // ... the filter for the RegionI18ns we want to count
     *   }
     * })
    **/
    count<T extends RegionI18nCountArgs>(
      args?: Subset<T, RegionI18nCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionI18nCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RegionI18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionI18nAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionI18nAggregateArgs>(args: Subset<T, RegionI18nAggregateArgs>): Prisma.PrismaPromise<GetRegionI18nAggregateType<T>>

    /**
     * Group by RegionI18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionI18nGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionI18nGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionI18nGroupByArgs['orderBy'] }
        : { orderBy?: RegionI18nGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionI18nGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionI18nGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RegionI18n model
   */
  readonly fields: RegionI18nFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RegionI18n.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionI18nClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    region<T extends RegionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegionDefaultArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RegionI18n model
   */
  interface RegionI18nFieldRefs {
    readonly id: FieldRef<"RegionI18n", 'String'>
    readonly regionId: FieldRef<"RegionI18n", 'String'>
    readonly language: FieldRef<"RegionI18n", 'String'>
    readonly name: FieldRef<"RegionI18n", 'String'>
    readonly updatedAt: FieldRef<"RegionI18n", 'DateTime'>
    readonly createdAt: FieldRef<"RegionI18n", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RegionI18n findUnique
   */
  export type RegionI18nFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionI18n
     */
    select?: RegionI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionI18n
     */
    omit?: RegionI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionI18nInclude<ExtArgs> | null
    /**
     * Filter, which RegionI18n to fetch.
     */
    where: RegionI18nWhereUniqueInput
  }

  /**
   * RegionI18n findUniqueOrThrow
   */
  export type RegionI18nFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionI18n
     */
    select?: RegionI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionI18n
     */
    omit?: RegionI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionI18nInclude<ExtArgs> | null
    /**
     * Filter, which RegionI18n to fetch.
     */
    where: RegionI18nWhereUniqueInput
  }

  /**
   * RegionI18n findFirst
   */
  export type RegionI18nFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionI18n
     */
    select?: RegionI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionI18n
     */
    omit?: RegionI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionI18nInclude<ExtArgs> | null
    /**
     * Filter, which RegionI18n to fetch.
     */
    where?: RegionI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegionI18ns to fetch.
     */
    orderBy?: RegionI18nOrderByWithRelationInput | RegionI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegionI18ns.
     */
    cursor?: RegionI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegionI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegionI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegionI18ns.
     */
    distinct?: RegionI18nScalarFieldEnum | RegionI18nScalarFieldEnum[]
  }

  /**
   * RegionI18n findFirstOrThrow
   */
  export type RegionI18nFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionI18n
     */
    select?: RegionI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionI18n
     */
    omit?: RegionI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionI18nInclude<ExtArgs> | null
    /**
     * Filter, which RegionI18n to fetch.
     */
    where?: RegionI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegionI18ns to fetch.
     */
    orderBy?: RegionI18nOrderByWithRelationInput | RegionI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegionI18ns.
     */
    cursor?: RegionI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegionI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegionI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegionI18ns.
     */
    distinct?: RegionI18nScalarFieldEnum | RegionI18nScalarFieldEnum[]
  }

  /**
   * RegionI18n findMany
   */
  export type RegionI18nFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionI18n
     */
    select?: RegionI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionI18n
     */
    omit?: RegionI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionI18nInclude<ExtArgs> | null
    /**
     * Filter, which RegionI18ns to fetch.
     */
    where?: RegionI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegionI18ns to fetch.
     */
    orderBy?: RegionI18nOrderByWithRelationInput | RegionI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RegionI18ns.
     */
    cursor?: RegionI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegionI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegionI18ns.
     */
    skip?: number
    distinct?: RegionI18nScalarFieldEnum | RegionI18nScalarFieldEnum[]
  }

  /**
   * RegionI18n create
   */
  export type RegionI18nCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionI18n
     */
    select?: RegionI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionI18n
     */
    omit?: RegionI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionI18nInclude<ExtArgs> | null
    /**
     * The data needed to create a RegionI18n.
     */
    data: XOR<RegionI18nCreateInput, RegionI18nUncheckedCreateInput>
  }

  /**
   * RegionI18n createMany
   */
  export type RegionI18nCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RegionI18ns.
     */
    data: RegionI18nCreateManyInput | RegionI18nCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RegionI18n createManyAndReturn
   */
  export type RegionI18nCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionI18n
     */
    select?: RegionI18nSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RegionI18n
     */
    omit?: RegionI18nOmit<ExtArgs> | null
    /**
     * The data used to create many RegionI18ns.
     */
    data: RegionI18nCreateManyInput | RegionI18nCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionI18nIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RegionI18n update
   */
  export type RegionI18nUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionI18n
     */
    select?: RegionI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionI18n
     */
    omit?: RegionI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionI18nInclude<ExtArgs> | null
    /**
     * The data needed to update a RegionI18n.
     */
    data: XOR<RegionI18nUpdateInput, RegionI18nUncheckedUpdateInput>
    /**
     * Choose, which RegionI18n to update.
     */
    where: RegionI18nWhereUniqueInput
  }

  /**
   * RegionI18n updateMany
   */
  export type RegionI18nUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RegionI18ns.
     */
    data: XOR<RegionI18nUpdateManyMutationInput, RegionI18nUncheckedUpdateManyInput>
    /**
     * Filter which RegionI18ns to update
     */
    where?: RegionI18nWhereInput
    /**
     * Limit how many RegionI18ns to update.
     */
    limit?: number
  }

  /**
   * RegionI18n updateManyAndReturn
   */
  export type RegionI18nUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionI18n
     */
    select?: RegionI18nSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RegionI18n
     */
    omit?: RegionI18nOmit<ExtArgs> | null
    /**
     * The data used to update RegionI18ns.
     */
    data: XOR<RegionI18nUpdateManyMutationInput, RegionI18nUncheckedUpdateManyInput>
    /**
     * Filter which RegionI18ns to update
     */
    where?: RegionI18nWhereInput
    /**
     * Limit how many RegionI18ns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionI18nIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RegionI18n upsert
   */
  export type RegionI18nUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionI18n
     */
    select?: RegionI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionI18n
     */
    omit?: RegionI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionI18nInclude<ExtArgs> | null
    /**
     * The filter to search for the RegionI18n to update in case it exists.
     */
    where: RegionI18nWhereUniqueInput
    /**
     * In case the RegionI18n found by the `where` argument doesn't exist, create a new RegionI18n with this data.
     */
    create: XOR<RegionI18nCreateInput, RegionI18nUncheckedCreateInput>
    /**
     * In case the RegionI18n was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionI18nUpdateInput, RegionI18nUncheckedUpdateInput>
  }

  /**
   * RegionI18n delete
   */
  export type RegionI18nDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionI18n
     */
    select?: RegionI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionI18n
     */
    omit?: RegionI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionI18nInclude<ExtArgs> | null
    /**
     * Filter which RegionI18n to delete.
     */
    where: RegionI18nWhereUniqueInput
  }

  /**
   * RegionI18n deleteMany
   */
  export type RegionI18nDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegionI18ns to delete
     */
    where?: RegionI18nWhereInput
    /**
     * Limit how many RegionI18ns to delete.
     */
    limit?: number
  }

  /**
   * RegionI18n without action
   */
  export type RegionI18nDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionI18n
     */
    select?: RegionI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionI18n
     */
    omit?: RegionI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionI18nInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type LocationSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: string | null
    type: $Enums.LocationType | null
    regionId: string | null
    latitude: number | null
    longitude: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type LocationMaxAggregateOutputType = {
    id: string | null
    type: $Enums.LocationType | null
    regionId: string | null
    latitude: number | null
    longitude: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    type: number
    regionId: number
    latitude: number
    longitude: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type LocationSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    type?: true
    regionId?: true
    latitude?: true
    longitude?: true
    updatedAt?: true
    createdAt?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    type?: true
    regionId?: true
    latitude?: true
    longitude?: true
    updatedAt?: true
    createdAt?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    type?: true
    regionId?: true
    latitude?: true
    longitude?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: string
    type: $Enums.LocationType
    regionId: string
    latitude: number
    longitude: number
    updatedAt: Date
    createdAt: Date
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    regionId?: boolean
    latitude?: boolean
    longitude?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    i18n?: boolean | Location$i18nArgs<ExtArgs>
    buildings?: boolean | Location$buildingsArgs<ExtArgs>
    region?: boolean | RegionDefaultArgs<ExtArgs>
    routesFrom?: boolean | Location$routesFromArgs<ExtArgs>
    routesTo?: boolean | Location$routesToArgs<ExtArgs>
    teams?: boolean | Location$teamsArgs<ExtArgs>
    townInfo?: boolean | Location$townInfoArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    regionId?: boolean
    latitude?: boolean
    longitude?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    regionId?: boolean
    latitude?: boolean
    longitude?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    id?: boolean
    type?: boolean
    regionId?: boolean
    latitude?: boolean
    longitude?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type LocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "regionId" | "latitude" | "longitude" | "updatedAt" | "createdAt", ExtArgs["result"]["location"]>
  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    i18n?: boolean | Location$i18nArgs<ExtArgs>
    buildings?: boolean | Location$buildingsArgs<ExtArgs>
    region?: boolean | RegionDefaultArgs<ExtArgs>
    routesFrom?: boolean | Location$routesFromArgs<ExtArgs>
    routesTo?: boolean | Location$routesToArgs<ExtArgs>
    teams?: boolean | Location$teamsArgs<ExtArgs>
    townInfo?: boolean | Location$townInfoArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }
  export type LocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      i18n: Prisma.$LocationI18nPayload<ExtArgs>[]
      buildings: Prisma.$BuildingPayload<ExtArgs>[]
      region: Prisma.$RegionPayload<ExtArgs>
      routesFrom: Prisma.$RoutePayload<ExtArgs>[]
      routesTo: Prisma.$RoutePayload<ExtArgs>[]
      teams: Prisma.$TeamLocationPayload<ExtArgs>[]
      townInfo: Prisma.$TownInformationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.LocationType
      regionId: string
      latitude: number
      longitude: number
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Locations and returns the data saved in the database.
     * @param {LocationCreateManyAndReturnArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations and returns the data updated in the database.
     * @param {LocationUpdateManyAndReturnArgs} args - Arguments to update many Locations.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LocationUpdateManyAndReturnArgs>(args: SelectSubset<T, LocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    i18n<T extends Location$i18nArgs<ExtArgs> = {}>(args?: Subset<T, Location$i18nArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationI18nPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    buildings<T extends Location$buildingsArgs<ExtArgs> = {}>(args?: Subset<T, Location$buildingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    region<T extends RegionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegionDefaultArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    routesFrom<T extends Location$routesFromArgs<ExtArgs> = {}>(args?: Subset<T, Location$routesFromArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    routesTo<T extends Location$routesToArgs<ExtArgs> = {}>(args?: Subset<T, Location$routesToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teams<T extends Location$teamsArgs<ExtArgs> = {}>(args?: Subset<T, Location$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    townInfo<T extends Location$townInfoArgs<ExtArgs> = {}>(args?: Subset<T, Location$townInfoArgs<ExtArgs>>): Prisma__TownInformationClient<$Result.GetResult<Prisma.$TownInformationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'String'>
    readonly type: FieldRef<"Location", 'LocationType'>
    readonly regionId: FieldRef<"Location", 'String'>
    readonly latitude: FieldRef<"Location", 'Float'>
    readonly longitude: FieldRef<"Location", 'Float'>
    readonly updatedAt: FieldRef<"Location", 'DateTime'>
    readonly createdAt: FieldRef<"Location", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location createManyAndReturn
   */
  export type LocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
  }

  /**
   * Location updateManyAndReturn
   */
  export type LocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to delete.
     */
    limit?: number
  }

  /**
   * Location.i18n
   */
  export type Location$i18nArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationI18n
     */
    select?: LocationI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationI18n
     */
    omit?: LocationI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationI18nInclude<ExtArgs> | null
    where?: LocationI18nWhereInput
    orderBy?: LocationI18nOrderByWithRelationInput | LocationI18nOrderByWithRelationInput[]
    cursor?: LocationI18nWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationI18nScalarFieldEnum | LocationI18nScalarFieldEnum[]
  }

  /**
   * Location.buildings
   */
  export type Location$buildingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    where?: BuildingWhereInput
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    cursor?: BuildingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuildingScalarFieldEnum | BuildingScalarFieldEnum[]
  }

  /**
   * Location.routesFrom
   */
  export type Location$routesFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    where?: RouteWhereInput
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    cursor?: RouteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RouteScalarFieldEnum | RouteScalarFieldEnum[]
  }

  /**
   * Location.routesTo
   */
  export type Location$routesToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    where?: RouteWhereInput
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    cursor?: RouteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RouteScalarFieldEnum | RouteScalarFieldEnum[]
  }

  /**
   * Location.teams
   */
  export type Location$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationInclude<ExtArgs> | null
    where?: TeamLocationWhereInput
    orderBy?: TeamLocationOrderByWithRelationInput | TeamLocationOrderByWithRelationInput[]
    cursor?: TeamLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamLocationScalarFieldEnum | TeamLocationScalarFieldEnum[]
  }

  /**
   * Location.townInfo
   */
  export type Location$townInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TownInformation
     */
    select?: TownInformationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TownInformation
     */
    omit?: TownInformationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TownInformationInclude<ExtArgs> | null
    where?: TownInformationWhereInput
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model LocationI18n
   */

  export type AggregateLocationI18n = {
    _count: LocationI18nCountAggregateOutputType | null
    _min: LocationI18nMinAggregateOutputType | null
    _max: LocationI18nMaxAggregateOutputType | null
  }

  export type LocationI18nMinAggregateOutputType = {
    id: string | null
    locationId: string | null
    language: string | null
    name: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type LocationI18nMaxAggregateOutputType = {
    id: string | null
    locationId: string | null
    language: string | null
    name: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type LocationI18nCountAggregateOutputType = {
    id: number
    locationId: number
    language: number
    name: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type LocationI18nMinAggregateInputType = {
    id?: true
    locationId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
  }

  export type LocationI18nMaxAggregateInputType = {
    id?: true
    locationId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
  }

  export type LocationI18nCountAggregateInputType = {
    id?: true
    locationId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type LocationI18nAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationI18n to aggregate.
     */
    where?: LocationI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationI18ns to fetch.
     */
    orderBy?: LocationI18nOrderByWithRelationInput | LocationI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LocationI18ns
    **/
    _count?: true | LocationI18nCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationI18nMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationI18nMaxAggregateInputType
  }

  export type GetLocationI18nAggregateType<T extends LocationI18nAggregateArgs> = {
        [P in keyof T & keyof AggregateLocationI18n]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocationI18n[P]>
      : GetScalarType<T[P], AggregateLocationI18n[P]>
  }




  export type LocationI18nGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationI18nWhereInput
    orderBy?: LocationI18nOrderByWithAggregationInput | LocationI18nOrderByWithAggregationInput[]
    by: LocationI18nScalarFieldEnum[] | LocationI18nScalarFieldEnum
    having?: LocationI18nScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationI18nCountAggregateInputType | true
    _min?: LocationI18nMinAggregateInputType
    _max?: LocationI18nMaxAggregateInputType
  }

  export type LocationI18nGroupByOutputType = {
    id: string
    locationId: string
    language: string
    name: string
    updatedAt: Date
    createdAt: Date
    _count: LocationI18nCountAggregateOutputType | null
    _min: LocationI18nMinAggregateOutputType | null
    _max: LocationI18nMaxAggregateOutputType | null
  }

  type GetLocationI18nGroupByPayload<T extends LocationI18nGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationI18nGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationI18nGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationI18nGroupByOutputType[P]>
            : GetScalarType<T[P], LocationI18nGroupByOutputType[P]>
        }
      >
    >


  export type LocationI18nSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationI18n"]>

  export type LocationI18nSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationI18n"]>

  export type LocationI18nSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationI18n"]>

  export type LocationI18nSelectScalar = {
    id?: boolean
    locationId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type LocationI18nOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "locationId" | "language" | "name" | "updatedAt" | "createdAt", ExtArgs["result"]["locationI18n"]>
  export type LocationI18nInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type LocationI18nIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type LocationI18nIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $LocationI18nPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LocationI18n"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      locationId: string
      language: string
      name: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["locationI18n"]>
    composites: {}
  }

  type LocationI18nGetPayload<S extends boolean | null | undefined | LocationI18nDefaultArgs> = $Result.GetResult<Prisma.$LocationI18nPayload, S>

  type LocationI18nCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LocationI18nFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LocationI18nCountAggregateInputType | true
    }

  export interface LocationI18nDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LocationI18n'], meta: { name: 'LocationI18n' } }
    /**
     * Find zero or one LocationI18n that matches the filter.
     * @param {LocationI18nFindUniqueArgs} args - Arguments to find a LocationI18n
     * @example
     * // Get one LocationI18n
     * const locationI18n = await prisma.locationI18n.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationI18nFindUniqueArgs>(args: SelectSubset<T, LocationI18nFindUniqueArgs<ExtArgs>>): Prisma__LocationI18nClient<$Result.GetResult<Prisma.$LocationI18nPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LocationI18n that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LocationI18nFindUniqueOrThrowArgs} args - Arguments to find a LocationI18n
     * @example
     * // Get one LocationI18n
     * const locationI18n = await prisma.locationI18n.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationI18nFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationI18nFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationI18nClient<$Result.GetResult<Prisma.$LocationI18nPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LocationI18n that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationI18nFindFirstArgs} args - Arguments to find a LocationI18n
     * @example
     * // Get one LocationI18n
     * const locationI18n = await prisma.locationI18n.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationI18nFindFirstArgs>(args?: SelectSubset<T, LocationI18nFindFirstArgs<ExtArgs>>): Prisma__LocationI18nClient<$Result.GetResult<Prisma.$LocationI18nPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LocationI18n that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationI18nFindFirstOrThrowArgs} args - Arguments to find a LocationI18n
     * @example
     * // Get one LocationI18n
     * const locationI18n = await prisma.locationI18n.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationI18nFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationI18nFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationI18nClient<$Result.GetResult<Prisma.$LocationI18nPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LocationI18ns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationI18nFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LocationI18ns
     * const locationI18ns = await prisma.locationI18n.findMany()
     * 
     * // Get first 10 LocationI18ns
     * const locationI18ns = await prisma.locationI18n.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationI18nWithIdOnly = await prisma.locationI18n.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationI18nFindManyArgs>(args?: SelectSubset<T, LocationI18nFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationI18nPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LocationI18n.
     * @param {LocationI18nCreateArgs} args - Arguments to create a LocationI18n.
     * @example
     * // Create one LocationI18n
     * const LocationI18n = await prisma.locationI18n.create({
     *   data: {
     *     // ... data to create a LocationI18n
     *   }
     * })
     * 
     */
    create<T extends LocationI18nCreateArgs>(args: SelectSubset<T, LocationI18nCreateArgs<ExtArgs>>): Prisma__LocationI18nClient<$Result.GetResult<Prisma.$LocationI18nPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LocationI18ns.
     * @param {LocationI18nCreateManyArgs} args - Arguments to create many LocationI18ns.
     * @example
     * // Create many LocationI18ns
     * const locationI18n = await prisma.locationI18n.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationI18nCreateManyArgs>(args?: SelectSubset<T, LocationI18nCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LocationI18ns and returns the data saved in the database.
     * @param {LocationI18nCreateManyAndReturnArgs} args - Arguments to create many LocationI18ns.
     * @example
     * // Create many LocationI18ns
     * const locationI18n = await prisma.locationI18n.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LocationI18ns and only return the `id`
     * const locationI18nWithIdOnly = await prisma.locationI18n.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationI18nCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationI18nCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationI18nPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LocationI18n.
     * @param {LocationI18nDeleteArgs} args - Arguments to delete one LocationI18n.
     * @example
     * // Delete one LocationI18n
     * const LocationI18n = await prisma.locationI18n.delete({
     *   where: {
     *     // ... filter to delete one LocationI18n
     *   }
     * })
     * 
     */
    delete<T extends LocationI18nDeleteArgs>(args: SelectSubset<T, LocationI18nDeleteArgs<ExtArgs>>): Prisma__LocationI18nClient<$Result.GetResult<Prisma.$LocationI18nPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LocationI18n.
     * @param {LocationI18nUpdateArgs} args - Arguments to update one LocationI18n.
     * @example
     * // Update one LocationI18n
     * const locationI18n = await prisma.locationI18n.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationI18nUpdateArgs>(args: SelectSubset<T, LocationI18nUpdateArgs<ExtArgs>>): Prisma__LocationI18nClient<$Result.GetResult<Prisma.$LocationI18nPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LocationI18ns.
     * @param {LocationI18nDeleteManyArgs} args - Arguments to filter LocationI18ns to delete.
     * @example
     * // Delete a few LocationI18ns
     * const { count } = await prisma.locationI18n.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationI18nDeleteManyArgs>(args?: SelectSubset<T, LocationI18nDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationI18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationI18nUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LocationI18ns
     * const locationI18n = await prisma.locationI18n.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationI18nUpdateManyArgs>(args: SelectSubset<T, LocationI18nUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationI18ns and returns the data updated in the database.
     * @param {LocationI18nUpdateManyAndReturnArgs} args - Arguments to update many LocationI18ns.
     * @example
     * // Update many LocationI18ns
     * const locationI18n = await prisma.locationI18n.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LocationI18ns and only return the `id`
     * const locationI18nWithIdOnly = await prisma.locationI18n.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LocationI18nUpdateManyAndReturnArgs>(args: SelectSubset<T, LocationI18nUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationI18nPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LocationI18n.
     * @param {LocationI18nUpsertArgs} args - Arguments to update or create a LocationI18n.
     * @example
     * // Update or create a LocationI18n
     * const locationI18n = await prisma.locationI18n.upsert({
     *   create: {
     *     // ... data to create a LocationI18n
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LocationI18n we want to update
     *   }
     * })
     */
    upsert<T extends LocationI18nUpsertArgs>(args: SelectSubset<T, LocationI18nUpsertArgs<ExtArgs>>): Prisma__LocationI18nClient<$Result.GetResult<Prisma.$LocationI18nPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LocationI18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationI18nCountArgs} args - Arguments to filter LocationI18ns to count.
     * @example
     * // Count the number of LocationI18ns
     * const count = await prisma.locationI18n.count({
     *   where: {
     *     // ... the filter for the LocationI18ns we want to count
     *   }
     * })
    **/
    count<T extends LocationI18nCountArgs>(
      args?: Subset<T, LocationI18nCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationI18nCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LocationI18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationI18nAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationI18nAggregateArgs>(args: Subset<T, LocationI18nAggregateArgs>): Prisma.PrismaPromise<GetLocationI18nAggregateType<T>>

    /**
     * Group by LocationI18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationI18nGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationI18nGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationI18nGroupByArgs['orderBy'] }
        : { orderBy?: LocationI18nGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationI18nGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationI18nGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LocationI18n model
   */
  readonly fields: LocationI18nFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LocationI18n.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationI18nClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LocationI18n model
   */
  interface LocationI18nFieldRefs {
    readonly id: FieldRef<"LocationI18n", 'String'>
    readonly locationId: FieldRef<"LocationI18n", 'String'>
    readonly language: FieldRef<"LocationI18n", 'String'>
    readonly name: FieldRef<"LocationI18n", 'String'>
    readonly updatedAt: FieldRef<"LocationI18n", 'DateTime'>
    readonly createdAt: FieldRef<"LocationI18n", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LocationI18n findUnique
   */
  export type LocationI18nFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationI18n
     */
    select?: LocationI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationI18n
     */
    omit?: LocationI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationI18nInclude<ExtArgs> | null
    /**
     * Filter, which LocationI18n to fetch.
     */
    where: LocationI18nWhereUniqueInput
  }

  /**
   * LocationI18n findUniqueOrThrow
   */
  export type LocationI18nFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationI18n
     */
    select?: LocationI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationI18n
     */
    omit?: LocationI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationI18nInclude<ExtArgs> | null
    /**
     * Filter, which LocationI18n to fetch.
     */
    where: LocationI18nWhereUniqueInput
  }

  /**
   * LocationI18n findFirst
   */
  export type LocationI18nFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationI18n
     */
    select?: LocationI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationI18n
     */
    omit?: LocationI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationI18nInclude<ExtArgs> | null
    /**
     * Filter, which LocationI18n to fetch.
     */
    where?: LocationI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationI18ns to fetch.
     */
    orderBy?: LocationI18nOrderByWithRelationInput | LocationI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationI18ns.
     */
    cursor?: LocationI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationI18ns.
     */
    distinct?: LocationI18nScalarFieldEnum | LocationI18nScalarFieldEnum[]
  }

  /**
   * LocationI18n findFirstOrThrow
   */
  export type LocationI18nFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationI18n
     */
    select?: LocationI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationI18n
     */
    omit?: LocationI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationI18nInclude<ExtArgs> | null
    /**
     * Filter, which LocationI18n to fetch.
     */
    where?: LocationI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationI18ns to fetch.
     */
    orderBy?: LocationI18nOrderByWithRelationInput | LocationI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationI18ns.
     */
    cursor?: LocationI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationI18ns.
     */
    distinct?: LocationI18nScalarFieldEnum | LocationI18nScalarFieldEnum[]
  }

  /**
   * LocationI18n findMany
   */
  export type LocationI18nFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationI18n
     */
    select?: LocationI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationI18n
     */
    omit?: LocationI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationI18nInclude<ExtArgs> | null
    /**
     * Filter, which LocationI18ns to fetch.
     */
    where?: LocationI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationI18ns to fetch.
     */
    orderBy?: LocationI18nOrderByWithRelationInput | LocationI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LocationI18ns.
     */
    cursor?: LocationI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationI18ns.
     */
    skip?: number
    distinct?: LocationI18nScalarFieldEnum | LocationI18nScalarFieldEnum[]
  }

  /**
   * LocationI18n create
   */
  export type LocationI18nCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationI18n
     */
    select?: LocationI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationI18n
     */
    omit?: LocationI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationI18nInclude<ExtArgs> | null
    /**
     * The data needed to create a LocationI18n.
     */
    data: XOR<LocationI18nCreateInput, LocationI18nUncheckedCreateInput>
  }

  /**
   * LocationI18n createMany
   */
  export type LocationI18nCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LocationI18ns.
     */
    data: LocationI18nCreateManyInput | LocationI18nCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LocationI18n createManyAndReturn
   */
  export type LocationI18nCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationI18n
     */
    select?: LocationI18nSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LocationI18n
     */
    omit?: LocationI18nOmit<ExtArgs> | null
    /**
     * The data used to create many LocationI18ns.
     */
    data: LocationI18nCreateManyInput | LocationI18nCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationI18nIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LocationI18n update
   */
  export type LocationI18nUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationI18n
     */
    select?: LocationI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationI18n
     */
    omit?: LocationI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationI18nInclude<ExtArgs> | null
    /**
     * The data needed to update a LocationI18n.
     */
    data: XOR<LocationI18nUpdateInput, LocationI18nUncheckedUpdateInput>
    /**
     * Choose, which LocationI18n to update.
     */
    where: LocationI18nWhereUniqueInput
  }

  /**
   * LocationI18n updateMany
   */
  export type LocationI18nUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LocationI18ns.
     */
    data: XOR<LocationI18nUpdateManyMutationInput, LocationI18nUncheckedUpdateManyInput>
    /**
     * Filter which LocationI18ns to update
     */
    where?: LocationI18nWhereInput
    /**
     * Limit how many LocationI18ns to update.
     */
    limit?: number
  }

  /**
   * LocationI18n updateManyAndReturn
   */
  export type LocationI18nUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationI18n
     */
    select?: LocationI18nSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LocationI18n
     */
    omit?: LocationI18nOmit<ExtArgs> | null
    /**
     * The data used to update LocationI18ns.
     */
    data: XOR<LocationI18nUpdateManyMutationInput, LocationI18nUncheckedUpdateManyInput>
    /**
     * Filter which LocationI18ns to update
     */
    where?: LocationI18nWhereInput
    /**
     * Limit how many LocationI18ns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationI18nIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LocationI18n upsert
   */
  export type LocationI18nUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationI18n
     */
    select?: LocationI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationI18n
     */
    omit?: LocationI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationI18nInclude<ExtArgs> | null
    /**
     * The filter to search for the LocationI18n to update in case it exists.
     */
    where: LocationI18nWhereUniqueInput
    /**
     * In case the LocationI18n found by the `where` argument doesn't exist, create a new LocationI18n with this data.
     */
    create: XOR<LocationI18nCreateInput, LocationI18nUncheckedCreateInput>
    /**
     * In case the LocationI18n was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationI18nUpdateInput, LocationI18nUncheckedUpdateInput>
  }

  /**
   * LocationI18n delete
   */
  export type LocationI18nDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationI18n
     */
    select?: LocationI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationI18n
     */
    omit?: LocationI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationI18nInclude<ExtArgs> | null
    /**
     * Filter which LocationI18n to delete.
     */
    where: LocationI18nWhereUniqueInput
  }

  /**
   * LocationI18n deleteMany
   */
  export type LocationI18nDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationI18ns to delete
     */
    where?: LocationI18nWhereInput
    /**
     * Limit how many LocationI18ns to delete.
     */
    limit?: number
  }

  /**
   * LocationI18n without action
   */
  export type LocationI18nDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationI18n
     */
    select?: LocationI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationI18n
     */
    omit?: LocationI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationI18nInclude<ExtArgs> | null
  }


  /**
   * Model TownInformation
   */

  export type AggregateTownInformation = {
    _count: TownInformationCountAggregateOutputType | null
    _avg: TownInformationAvgAggregateOutputType | null
    _sum: TownInformationSumAggregateOutputType | null
    _min: TownInformationMinAggregateOutputType | null
    _max: TownInformationMaxAggregateOutputType | null
  }

  export type TownInformationAvgAggregateOutputType = {
    population: number | null
  }

  export type TownInformationSumAggregateOutputType = {
    population: number | null
  }

  export type TownInformationMinAggregateOutputType = {
    id: string | null
    locationId: string | null
    population: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type TownInformationMaxAggregateOutputType = {
    id: string | null
    locationId: string | null
    population: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type TownInformationCountAggregateOutputType = {
    id: number
    locationId: number
    population: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type TownInformationAvgAggregateInputType = {
    population?: true
  }

  export type TownInformationSumAggregateInputType = {
    population?: true
  }

  export type TownInformationMinAggregateInputType = {
    id?: true
    locationId?: true
    population?: true
    updatedAt?: true
    createdAt?: true
  }

  export type TownInformationMaxAggregateInputType = {
    id?: true
    locationId?: true
    population?: true
    updatedAt?: true
    createdAt?: true
  }

  export type TownInformationCountAggregateInputType = {
    id?: true
    locationId?: true
    population?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type TownInformationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TownInformation to aggregate.
     */
    where?: TownInformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TownInformations to fetch.
     */
    orderBy?: TownInformationOrderByWithRelationInput | TownInformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TownInformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TownInformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TownInformations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TownInformations
    **/
    _count?: true | TownInformationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TownInformationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TownInformationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TownInformationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TownInformationMaxAggregateInputType
  }

  export type GetTownInformationAggregateType<T extends TownInformationAggregateArgs> = {
        [P in keyof T & keyof AggregateTownInformation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTownInformation[P]>
      : GetScalarType<T[P], AggregateTownInformation[P]>
  }




  export type TownInformationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TownInformationWhereInput
    orderBy?: TownInformationOrderByWithAggregationInput | TownInformationOrderByWithAggregationInput[]
    by: TownInformationScalarFieldEnum[] | TownInformationScalarFieldEnum
    having?: TownInformationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TownInformationCountAggregateInputType | true
    _avg?: TownInformationAvgAggregateInputType
    _sum?: TownInformationSumAggregateInputType
    _min?: TownInformationMinAggregateInputType
    _max?: TownInformationMaxAggregateInputType
  }

  export type TownInformationGroupByOutputType = {
    id: string
    locationId: string
    population: number
    updatedAt: Date
    createdAt: Date
    _count: TownInformationCountAggregateOutputType | null
    _avg: TownInformationAvgAggregateOutputType | null
    _sum: TownInformationSumAggregateOutputType | null
    _min: TownInformationMinAggregateOutputType | null
    _max: TownInformationMaxAggregateOutputType | null
  }

  type GetTownInformationGroupByPayload<T extends TownInformationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TownInformationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TownInformationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TownInformationGroupByOutputType[P]>
            : GetScalarType<T[P], TownInformationGroupByOutputType[P]>
        }
      >
    >


  export type TownInformationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationId?: boolean
    population?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["townInformation"]>

  export type TownInformationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationId?: boolean
    population?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["townInformation"]>

  export type TownInformationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationId?: boolean
    population?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["townInformation"]>

  export type TownInformationSelectScalar = {
    id?: boolean
    locationId?: boolean
    population?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type TownInformationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "locationId" | "population" | "updatedAt" | "createdAt", ExtArgs["result"]["townInformation"]>
  export type TownInformationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type TownInformationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type TownInformationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $TownInformationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TownInformation"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      locationId: string
      population: number
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["townInformation"]>
    composites: {}
  }

  type TownInformationGetPayload<S extends boolean | null | undefined | TownInformationDefaultArgs> = $Result.GetResult<Prisma.$TownInformationPayload, S>

  type TownInformationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TownInformationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TownInformationCountAggregateInputType | true
    }

  export interface TownInformationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TownInformation'], meta: { name: 'TownInformation' } }
    /**
     * Find zero or one TownInformation that matches the filter.
     * @param {TownInformationFindUniqueArgs} args - Arguments to find a TownInformation
     * @example
     * // Get one TownInformation
     * const townInformation = await prisma.townInformation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TownInformationFindUniqueArgs>(args: SelectSubset<T, TownInformationFindUniqueArgs<ExtArgs>>): Prisma__TownInformationClient<$Result.GetResult<Prisma.$TownInformationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TownInformation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TownInformationFindUniqueOrThrowArgs} args - Arguments to find a TownInformation
     * @example
     * // Get one TownInformation
     * const townInformation = await prisma.townInformation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TownInformationFindUniqueOrThrowArgs>(args: SelectSubset<T, TownInformationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TownInformationClient<$Result.GetResult<Prisma.$TownInformationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TownInformation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TownInformationFindFirstArgs} args - Arguments to find a TownInformation
     * @example
     * // Get one TownInformation
     * const townInformation = await prisma.townInformation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TownInformationFindFirstArgs>(args?: SelectSubset<T, TownInformationFindFirstArgs<ExtArgs>>): Prisma__TownInformationClient<$Result.GetResult<Prisma.$TownInformationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TownInformation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TownInformationFindFirstOrThrowArgs} args - Arguments to find a TownInformation
     * @example
     * // Get one TownInformation
     * const townInformation = await prisma.townInformation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TownInformationFindFirstOrThrowArgs>(args?: SelectSubset<T, TownInformationFindFirstOrThrowArgs<ExtArgs>>): Prisma__TownInformationClient<$Result.GetResult<Prisma.$TownInformationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TownInformations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TownInformationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TownInformations
     * const townInformations = await prisma.townInformation.findMany()
     * 
     * // Get first 10 TownInformations
     * const townInformations = await prisma.townInformation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const townInformationWithIdOnly = await prisma.townInformation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TownInformationFindManyArgs>(args?: SelectSubset<T, TownInformationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TownInformationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TownInformation.
     * @param {TownInformationCreateArgs} args - Arguments to create a TownInformation.
     * @example
     * // Create one TownInformation
     * const TownInformation = await prisma.townInformation.create({
     *   data: {
     *     // ... data to create a TownInformation
     *   }
     * })
     * 
     */
    create<T extends TownInformationCreateArgs>(args: SelectSubset<T, TownInformationCreateArgs<ExtArgs>>): Prisma__TownInformationClient<$Result.GetResult<Prisma.$TownInformationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TownInformations.
     * @param {TownInformationCreateManyArgs} args - Arguments to create many TownInformations.
     * @example
     * // Create many TownInformations
     * const townInformation = await prisma.townInformation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TownInformationCreateManyArgs>(args?: SelectSubset<T, TownInformationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TownInformations and returns the data saved in the database.
     * @param {TownInformationCreateManyAndReturnArgs} args - Arguments to create many TownInformations.
     * @example
     * // Create many TownInformations
     * const townInformation = await prisma.townInformation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TownInformations and only return the `id`
     * const townInformationWithIdOnly = await prisma.townInformation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TownInformationCreateManyAndReturnArgs>(args?: SelectSubset<T, TownInformationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TownInformationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TownInformation.
     * @param {TownInformationDeleteArgs} args - Arguments to delete one TownInformation.
     * @example
     * // Delete one TownInformation
     * const TownInformation = await prisma.townInformation.delete({
     *   where: {
     *     // ... filter to delete one TownInformation
     *   }
     * })
     * 
     */
    delete<T extends TownInformationDeleteArgs>(args: SelectSubset<T, TownInformationDeleteArgs<ExtArgs>>): Prisma__TownInformationClient<$Result.GetResult<Prisma.$TownInformationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TownInformation.
     * @param {TownInformationUpdateArgs} args - Arguments to update one TownInformation.
     * @example
     * // Update one TownInformation
     * const townInformation = await prisma.townInformation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TownInformationUpdateArgs>(args: SelectSubset<T, TownInformationUpdateArgs<ExtArgs>>): Prisma__TownInformationClient<$Result.GetResult<Prisma.$TownInformationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TownInformations.
     * @param {TownInformationDeleteManyArgs} args - Arguments to filter TownInformations to delete.
     * @example
     * // Delete a few TownInformations
     * const { count } = await prisma.townInformation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TownInformationDeleteManyArgs>(args?: SelectSubset<T, TownInformationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TownInformations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TownInformationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TownInformations
     * const townInformation = await prisma.townInformation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TownInformationUpdateManyArgs>(args: SelectSubset<T, TownInformationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TownInformations and returns the data updated in the database.
     * @param {TownInformationUpdateManyAndReturnArgs} args - Arguments to update many TownInformations.
     * @example
     * // Update many TownInformations
     * const townInformation = await prisma.townInformation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TownInformations and only return the `id`
     * const townInformationWithIdOnly = await prisma.townInformation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TownInformationUpdateManyAndReturnArgs>(args: SelectSubset<T, TownInformationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TownInformationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TownInformation.
     * @param {TownInformationUpsertArgs} args - Arguments to update or create a TownInformation.
     * @example
     * // Update or create a TownInformation
     * const townInformation = await prisma.townInformation.upsert({
     *   create: {
     *     // ... data to create a TownInformation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TownInformation we want to update
     *   }
     * })
     */
    upsert<T extends TownInformationUpsertArgs>(args: SelectSubset<T, TownInformationUpsertArgs<ExtArgs>>): Prisma__TownInformationClient<$Result.GetResult<Prisma.$TownInformationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TownInformations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TownInformationCountArgs} args - Arguments to filter TownInformations to count.
     * @example
     * // Count the number of TownInformations
     * const count = await prisma.townInformation.count({
     *   where: {
     *     // ... the filter for the TownInformations we want to count
     *   }
     * })
    **/
    count<T extends TownInformationCountArgs>(
      args?: Subset<T, TownInformationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TownInformationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TownInformation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TownInformationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TownInformationAggregateArgs>(args: Subset<T, TownInformationAggregateArgs>): Prisma.PrismaPromise<GetTownInformationAggregateType<T>>

    /**
     * Group by TownInformation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TownInformationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TownInformationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TownInformationGroupByArgs['orderBy'] }
        : { orderBy?: TownInformationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TownInformationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTownInformationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TownInformation model
   */
  readonly fields: TownInformationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TownInformation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TownInformationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TownInformation model
   */
  interface TownInformationFieldRefs {
    readonly id: FieldRef<"TownInformation", 'String'>
    readonly locationId: FieldRef<"TownInformation", 'String'>
    readonly population: FieldRef<"TownInformation", 'Int'>
    readonly updatedAt: FieldRef<"TownInformation", 'DateTime'>
    readonly createdAt: FieldRef<"TownInformation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TownInformation findUnique
   */
  export type TownInformationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TownInformation
     */
    select?: TownInformationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TownInformation
     */
    omit?: TownInformationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TownInformationInclude<ExtArgs> | null
    /**
     * Filter, which TownInformation to fetch.
     */
    where: TownInformationWhereUniqueInput
  }

  /**
   * TownInformation findUniqueOrThrow
   */
  export type TownInformationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TownInformation
     */
    select?: TownInformationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TownInformation
     */
    omit?: TownInformationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TownInformationInclude<ExtArgs> | null
    /**
     * Filter, which TownInformation to fetch.
     */
    where: TownInformationWhereUniqueInput
  }

  /**
   * TownInformation findFirst
   */
  export type TownInformationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TownInformation
     */
    select?: TownInformationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TownInformation
     */
    omit?: TownInformationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TownInformationInclude<ExtArgs> | null
    /**
     * Filter, which TownInformation to fetch.
     */
    where?: TownInformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TownInformations to fetch.
     */
    orderBy?: TownInformationOrderByWithRelationInput | TownInformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TownInformations.
     */
    cursor?: TownInformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TownInformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TownInformations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TownInformations.
     */
    distinct?: TownInformationScalarFieldEnum | TownInformationScalarFieldEnum[]
  }

  /**
   * TownInformation findFirstOrThrow
   */
  export type TownInformationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TownInformation
     */
    select?: TownInformationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TownInformation
     */
    omit?: TownInformationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TownInformationInclude<ExtArgs> | null
    /**
     * Filter, which TownInformation to fetch.
     */
    where?: TownInformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TownInformations to fetch.
     */
    orderBy?: TownInformationOrderByWithRelationInput | TownInformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TownInformations.
     */
    cursor?: TownInformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TownInformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TownInformations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TownInformations.
     */
    distinct?: TownInformationScalarFieldEnum | TownInformationScalarFieldEnum[]
  }

  /**
   * TownInformation findMany
   */
  export type TownInformationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TownInformation
     */
    select?: TownInformationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TownInformation
     */
    omit?: TownInformationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TownInformationInclude<ExtArgs> | null
    /**
     * Filter, which TownInformations to fetch.
     */
    where?: TownInformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TownInformations to fetch.
     */
    orderBy?: TownInformationOrderByWithRelationInput | TownInformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TownInformations.
     */
    cursor?: TownInformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TownInformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TownInformations.
     */
    skip?: number
    distinct?: TownInformationScalarFieldEnum | TownInformationScalarFieldEnum[]
  }

  /**
   * TownInformation create
   */
  export type TownInformationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TownInformation
     */
    select?: TownInformationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TownInformation
     */
    omit?: TownInformationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TownInformationInclude<ExtArgs> | null
    /**
     * The data needed to create a TownInformation.
     */
    data: XOR<TownInformationCreateInput, TownInformationUncheckedCreateInput>
  }

  /**
   * TownInformation createMany
   */
  export type TownInformationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TownInformations.
     */
    data: TownInformationCreateManyInput | TownInformationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TownInformation createManyAndReturn
   */
  export type TownInformationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TownInformation
     */
    select?: TownInformationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TownInformation
     */
    omit?: TownInformationOmit<ExtArgs> | null
    /**
     * The data used to create many TownInformations.
     */
    data: TownInformationCreateManyInput | TownInformationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TownInformationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TownInformation update
   */
  export type TownInformationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TownInformation
     */
    select?: TownInformationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TownInformation
     */
    omit?: TownInformationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TownInformationInclude<ExtArgs> | null
    /**
     * The data needed to update a TownInformation.
     */
    data: XOR<TownInformationUpdateInput, TownInformationUncheckedUpdateInput>
    /**
     * Choose, which TownInformation to update.
     */
    where: TownInformationWhereUniqueInput
  }

  /**
   * TownInformation updateMany
   */
  export type TownInformationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TownInformations.
     */
    data: XOR<TownInformationUpdateManyMutationInput, TownInformationUncheckedUpdateManyInput>
    /**
     * Filter which TownInformations to update
     */
    where?: TownInformationWhereInput
    /**
     * Limit how many TownInformations to update.
     */
    limit?: number
  }

  /**
   * TownInformation updateManyAndReturn
   */
  export type TownInformationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TownInformation
     */
    select?: TownInformationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TownInformation
     */
    omit?: TownInformationOmit<ExtArgs> | null
    /**
     * The data used to update TownInformations.
     */
    data: XOR<TownInformationUpdateManyMutationInput, TownInformationUncheckedUpdateManyInput>
    /**
     * Filter which TownInformations to update
     */
    where?: TownInformationWhereInput
    /**
     * Limit how many TownInformations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TownInformationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TownInformation upsert
   */
  export type TownInformationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TownInformation
     */
    select?: TownInformationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TownInformation
     */
    omit?: TownInformationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TownInformationInclude<ExtArgs> | null
    /**
     * The filter to search for the TownInformation to update in case it exists.
     */
    where: TownInformationWhereUniqueInput
    /**
     * In case the TownInformation found by the `where` argument doesn't exist, create a new TownInformation with this data.
     */
    create: XOR<TownInformationCreateInput, TownInformationUncheckedCreateInput>
    /**
     * In case the TownInformation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TownInformationUpdateInput, TownInformationUncheckedUpdateInput>
  }

  /**
   * TownInformation delete
   */
  export type TownInformationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TownInformation
     */
    select?: TownInformationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TownInformation
     */
    omit?: TownInformationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TownInformationInclude<ExtArgs> | null
    /**
     * Filter which TownInformation to delete.
     */
    where: TownInformationWhereUniqueInput
  }

  /**
   * TownInformation deleteMany
   */
  export type TownInformationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TownInformations to delete
     */
    where?: TownInformationWhereInput
    /**
     * Limit how many TownInformations to delete.
     */
    limit?: number
  }

  /**
   * TownInformation without action
   */
  export type TownInformationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TownInformation
     */
    select?: TownInformationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TownInformation
     */
    omit?: TownInformationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TownInformationInclude<ExtArgs> | null
  }


  /**
   * Model Route
   */

  export type AggregateRoute = {
    _count: RouteCountAggregateOutputType | null
    _avg: RouteAvgAggregateOutputType | null
    _sum: RouteSumAggregateOutputType | null
    _min: RouteMinAggregateOutputType | null
    _max: RouteMaxAggregateOutputType | null
  }

  export type RouteAvgAggregateOutputType = {
    distance: number | null
  }

  export type RouteSumAggregateOutputType = {
    distance: number | null
  }

  export type RouteMinAggregateOutputType = {
    id: string | null
    type: $Enums.RouteType | null
    fromId: string | null
    toId: string | null
    distance: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type RouteMaxAggregateOutputType = {
    id: string | null
    type: $Enums.RouteType | null
    fromId: string | null
    toId: string | null
    distance: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type RouteCountAggregateOutputType = {
    id: number
    type: number
    fromId: number
    toId: number
    distance: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type RouteAvgAggregateInputType = {
    distance?: true
  }

  export type RouteSumAggregateInputType = {
    distance?: true
  }

  export type RouteMinAggregateInputType = {
    id?: true
    type?: true
    fromId?: true
    toId?: true
    distance?: true
    updatedAt?: true
    createdAt?: true
  }

  export type RouteMaxAggregateInputType = {
    id?: true
    type?: true
    fromId?: true
    toId?: true
    distance?: true
    updatedAt?: true
    createdAt?: true
  }

  export type RouteCountAggregateInputType = {
    id?: true
    type?: true
    fromId?: true
    toId?: true
    distance?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type RouteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Route to aggregate.
     */
    where?: RouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routes to fetch.
     */
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Routes
    **/
    _count?: true | RouteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RouteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RouteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RouteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RouteMaxAggregateInputType
  }

  export type GetRouteAggregateType<T extends RouteAggregateArgs> = {
        [P in keyof T & keyof AggregateRoute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoute[P]>
      : GetScalarType<T[P], AggregateRoute[P]>
  }




  export type RouteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RouteWhereInput
    orderBy?: RouteOrderByWithAggregationInput | RouteOrderByWithAggregationInput[]
    by: RouteScalarFieldEnum[] | RouteScalarFieldEnum
    having?: RouteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RouteCountAggregateInputType | true
    _avg?: RouteAvgAggregateInputType
    _sum?: RouteSumAggregateInputType
    _min?: RouteMinAggregateInputType
    _max?: RouteMaxAggregateInputType
  }

  export type RouteGroupByOutputType = {
    id: string
    type: $Enums.RouteType
    fromId: string
    toId: string
    distance: number
    updatedAt: Date
    createdAt: Date
    _count: RouteCountAggregateOutputType | null
    _avg: RouteAvgAggregateOutputType | null
    _sum: RouteSumAggregateOutputType | null
    _min: RouteMinAggregateOutputType | null
    _max: RouteMaxAggregateOutputType | null
  }

  type GetRouteGroupByPayload<T extends RouteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RouteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RouteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RouteGroupByOutputType[P]>
            : GetScalarType<T[P], RouteGroupByOutputType[P]>
        }
      >
    >


  export type RouteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    fromId?: boolean
    toId?: boolean
    distance?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    locationFrom?: boolean | LocationDefaultArgs<ExtArgs>
    locationTo?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["route"]>

  export type RouteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    fromId?: boolean
    toId?: boolean
    distance?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    locationFrom?: boolean | LocationDefaultArgs<ExtArgs>
    locationTo?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["route"]>

  export type RouteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    fromId?: boolean
    toId?: boolean
    distance?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    locationFrom?: boolean | LocationDefaultArgs<ExtArgs>
    locationTo?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["route"]>

  export type RouteSelectScalar = {
    id?: boolean
    type?: boolean
    fromId?: boolean
    toId?: boolean
    distance?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type RouteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "fromId" | "toId" | "distance" | "updatedAt" | "createdAt", ExtArgs["result"]["route"]>
  export type RouteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locationFrom?: boolean | LocationDefaultArgs<ExtArgs>
    locationTo?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type RouteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locationFrom?: boolean | LocationDefaultArgs<ExtArgs>
    locationTo?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type RouteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locationFrom?: boolean | LocationDefaultArgs<ExtArgs>
    locationTo?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $RoutePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Route"
    objects: {
      locationFrom: Prisma.$LocationPayload<ExtArgs>
      locationTo: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.RouteType
      fromId: string
      toId: string
      distance: number
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["route"]>
    composites: {}
  }

  type RouteGetPayload<S extends boolean | null | undefined | RouteDefaultArgs> = $Result.GetResult<Prisma.$RoutePayload, S>

  type RouteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RouteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RouteCountAggregateInputType | true
    }

  export interface RouteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Route'], meta: { name: 'Route' } }
    /**
     * Find zero or one Route that matches the filter.
     * @param {RouteFindUniqueArgs} args - Arguments to find a Route
     * @example
     * // Get one Route
     * const route = await prisma.route.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RouteFindUniqueArgs>(args: SelectSubset<T, RouteFindUniqueArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Route that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RouteFindUniqueOrThrowArgs} args - Arguments to find a Route
     * @example
     * // Get one Route
     * const route = await prisma.route.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RouteFindUniqueOrThrowArgs>(args: SelectSubset<T, RouteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Route that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteFindFirstArgs} args - Arguments to find a Route
     * @example
     * // Get one Route
     * const route = await prisma.route.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RouteFindFirstArgs>(args?: SelectSubset<T, RouteFindFirstArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Route that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteFindFirstOrThrowArgs} args - Arguments to find a Route
     * @example
     * // Get one Route
     * const route = await prisma.route.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RouteFindFirstOrThrowArgs>(args?: SelectSubset<T, RouteFindFirstOrThrowArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Routes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Routes
     * const routes = await prisma.route.findMany()
     * 
     * // Get first 10 Routes
     * const routes = await prisma.route.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routeWithIdOnly = await prisma.route.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RouteFindManyArgs>(args?: SelectSubset<T, RouteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Route.
     * @param {RouteCreateArgs} args - Arguments to create a Route.
     * @example
     * // Create one Route
     * const Route = await prisma.route.create({
     *   data: {
     *     // ... data to create a Route
     *   }
     * })
     * 
     */
    create<T extends RouteCreateArgs>(args: SelectSubset<T, RouteCreateArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Routes.
     * @param {RouteCreateManyArgs} args - Arguments to create many Routes.
     * @example
     * // Create many Routes
     * const route = await prisma.route.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RouteCreateManyArgs>(args?: SelectSubset<T, RouteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Routes and returns the data saved in the database.
     * @param {RouteCreateManyAndReturnArgs} args - Arguments to create many Routes.
     * @example
     * // Create many Routes
     * const route = await prisma.route.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Routes and only return the `id`
     * const routeWithIdOnly = await prisma.route.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RouteCreateManyAndReturnArgs>(args?: SelectSubset<T, RouteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Route.
     * @param {RouteDeleteArgs} args - Arguments to delete one Route.
     * @example
     * // Delete one Route
     * const Route = await prisma.route.delete({
     *   where: {
     *     // ... filter to delete one Route
     *   }
     * })
     * 
     */
    delete<T extends RouteDeleteArgs>(args: SelectSubset<T, RouteDeleteArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Route.
     * @param {RouteUpdateArgs} args - Arguments to update one Route.
     * @example
     * // Update one Route
     * const route = await prisma.route.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RouteUpdateArgs>(args: SelectSubset<T, RouteUpdateArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Routes.
     * @param {RouteDeleteManyArgs} args - Arguments to filter Routes to delete.
     * @example
     * // Delete a few Routes
     * const { count } = await prisma.route.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RouteDeleteManyArgs>(args?: SelectSubset<T, RouteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Routes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Routes
     * const route = await prisma.route.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RouteUpdateManyArgs>(args: SelectSubset<T, RouteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Routes and returns the data updated in the database.
     * @param {RouteUpdateManyAndReturnArgs} args - Arguments to update many Routes.
     * @example
     * // Update many Routes
     * const route = await prisma.route.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Routes and only return the `id`
     * const routeWithIdOnly = await prisma.route.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RouteUpdateManyAndReturnArgs>(args: SelectSubset<T, RouteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Route.
     * @param {RouteUpsertArgs} args - Arguments to update or create a Route.
     * @example
     * // Update or create a Route
     * const route = await prisma.route.upsert({
     *   create: {
     *     // ... data to create a Route
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Route we want to update
     *   }
     * })
     */
    upsert<T extends RouteUpsertArgs>(args: SelectSubset<T, RouteUpsertArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Routes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteCountArgs} args - Arguments to filter Routes to count.
     * @example
     * // Count the number of Routes
     * const count = await prisma.route.count({
     *   where: {
     *     // ... the filter for the Routes we want to count
     *   }
     * })
    **/
    count<T extends RouteCountArgs>(
      args?: Subset<T, RouteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RouteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Route.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RouteAggregateArgs>(args: Subset<T, RouteAggregateArgs>): Prisma.PrismaPromise<GetRouteAggregateType<T>>

    /**
     * Group by Route.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RouteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RouteGroupByArgs['orderBy'] }
        : { orderBy?: RouteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RouteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRouteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Route model
   */
  readonly fields: RouteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Route.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RouteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    locationFrom<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    locationTo<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Route model
   */
  interface RouteFieldRefs {
    readonly id: FieldRef<"Route", 'String'>
    readonly type: FieldRef<"Route", 'RouteType'>
    readonly fromId: FieldRef<"Route", 'String'>
    readonly toId: FieldRef<"Route", 'String'>
    readonly distance: FieldRef<"Route", 'Float'>
    readonly updatedAt: FieldRef<"Route", 'DateTime'>
    readonly createdAt: FieldRef<"Route", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Route findUnique
   */
  export type RouteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Route to fetch.
     */
    where: RouteWhereUniqueInput
  }

  /**
   * Route findUniqueOrThrow
   */
  export type RouteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Route to fetch.
     */
    where: RouteWhereUniqueInput
  }

  /**
   * Route findFirst
   */
  export type RouteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Route to fetch.
     */
    where?: RouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routes to fetch.
     */
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Routes.
     */
    cursor?: RouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Routes.
     */
    distinct?: RouteScalarFieldEnum | RouteScalarFieldEnum[]
  }

  /**
   * Route findFirstOrThrow
   */
  export type RouteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Route to fetch.
     */
    where?: RouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routes to fetch.
     */
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Routes.
     */
    cursor?: RouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Routes.
     */
    distinct?: RouteScalarFieldEnum | RouteScalarFieldEnum[]
  }

  /**
   * Route findMany
   */
  export type RouteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Routes to fetch.
     */
    where?: RouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routes to fetch.
     */
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Routes.
     */
    cursor?: RouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routes.
     */
    skip?: number
    distinct?: RouteScalarFieldEnum | RouteScalarFieldEnum[]
  }

  /**
   * Route create
   */
  export type RouteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * The data needed to create a Route.
     */
    data: XOR<RouteCreateInput, RouteUncheckedCreateInput>
  }

  /**
   * Route createMany
   */
  export type RouteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Routes.
     */
    data: RouteCreateManyInput | RouteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Route createManyAndReturn
   */
  export type RouteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * The data used to create many Routes.
     */
    data: RouteCreateManyInput | RouteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Route update
   */
  export type RouteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * The data needed to update a Route.
     */
    data: XOR<RouteUpdateInput, RouteUncheckedUpdateInput>
    /**
     * Choose, which Route to update.
     */
    where: RouteWhereUniqueInput
  }

  /**
   * Route updateMany
   */
  export type RouteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Routes.
     */
    data: XOR<RouteUpdateManyMutationInput, RouteUncheckedUpdateManyInput>
    /**
     * Filter which Routes to update
     */
    where?: RouteWhereInput
    /**
     * Limit how many Routes to update.
     */
    limit?: number
  }

  /**
   * Route updateManyAndReturn
   */
  export type RouteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * The data used to update Routes.
     */
    data: XOR<RouteUpdateManyMutationInput, RouteUncheckedUpdateManyInput>
    /**
     * Filter which Routes to update
     */
    where?: RouteWhereInput
    /**
     * Limit how many Routes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Route upsert
   */
  export type RouteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * The filter to search for the Route to update in case it exists.
     */
    where: RouteWhereUniqueInput
    /**
     * In case the Route found by the `where` argument doesn't exist, create a new Route with this data.
     */
    create: XOR<RouteCreateInput, RouteUncheckedCreateInput>
    /**
     * In case the Route was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RouteUpdateInput, RouteUncheckedUpdateInput>
  }

  /**
   * Route delete
   */
  export type RouteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter which Route to delete.
     */
    where: RouteWhereUniqueInput
  }

  /**
   * Route deleteMany
   */
  export type RouteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Routes to delete
     */
    where?: RouteWhereInput
    /**
     * Limit how many Routes to delete.
     */
    limit?: number
  }

  /**
   * Route without action
   */
  export type RouteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
  }


  /**
   * Model BuildingType
   */

  export type AggregateBuildingType = {
    _count: BuildingTypeCountAggregateOutputType | null
    _min: BuildingTypeMinAggregateOutputType | null
    _max: BuildingTypeMaxAggregateOutputType | null
  }

  export type BuildingTypeMinAggregateOutputType = {
    id: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type BuildingTypeMaxAggregateOutputType = {
    id: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type BuildingTypeCountAggregateOutputType = {
    id: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type BuildingTypeMinAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
  }

  export type BuildingTypeMaxAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
  }

  export type BuildingTypeCountAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type BuildingTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuildingType to aggregate.
     */
    where?: BuildingTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildingTypes to fetch.
     */
    orderBy?: BuildingTypeOrderByWithRelationInput | BuildingTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuildingTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildingTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildingTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BuildingTypes
    **/
    _count?: true | BuildingTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuildingTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuildingTypeMaxAggregateInputType
  }

  export type GetBuildingTypeAggregateType<T extends BuildingTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateBuildingType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuildingType[P]>
      : GetScalarType<T[P], AggregateBuildingType[P]>
  }




  export type BuildingTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildingTypeWhereInput
    orderBy?: BuildingTypeOrderByWithAggregationInput | BuildingTypeOrderByWithAggregationInput[]
    by: BuildingTypeScalarFieldEnum[] | BuildingTypeScalarFieldEnum
    having?: BuildingTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuildingTypeCountAggregateInputType | true
    _min?: BuildingTypeMinAggregateInputType
    _max?: BuildingTypeMaxAggregateInputType
  }

  export type BuildingTypeGroupByOutputType = {
    id: string
    updatedAt: Date
    createdAt: Date
    _count: BuildingTypeCountAggregateOutputType | null
    _min: BuildingTypeMinAggregateOutputType | null
    _max: BuildingTypeMaxAggregateOutputType | null
  }

  type GetBuildingTypeGroupByPayload<T extends BuildingTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuildingTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuildingTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuildingTypeGroupByOutputType[P]>
            : GetScalarType<T[P], BuildingTypeGroupByOutputType[P]>
        }
      >
    >


  export type BuildingTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    i18n?: boolean | BuildingType$i18nArgs<ExtArgs>
    buildings?: boolean | BuildingType$buildingsArgs<ExtArgs>
    _count?: boolean | BuildingTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buildingType"]>

  export type BuildingTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["buildingType"]>

  export type BuildingTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["buildingType"]>

  export type BuildingTypeSelectScalar = {
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type BuildingTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "updatedAt" | "createdAt", ExtArgs["result"]["buildingType"]>
  export type BuildingTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    i18n?: boolean | BuildingType$i18nArgs<ExtArgs>
    buildings?: boolean | BuildingType$buildingsArgs<ExtArgs>
    _count?: boolean | BuildingTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BuildingTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BuildingTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BuildingTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BuildingType"
    objects: {
      i18n: Prisma.$BuildingTypeI18nPayload<ExtArgs>[]
      buildings: Prisma.$BuildingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["buildingType"]>
    composites: {}
  }

  type BuildingTypeGetPayload<S extends boolean | null | undefined | BuildingTypeDefaultArgs> = $Result.GetResult<Prisma.$BuildingTypePayload, S>

  type BuildingTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuildingTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuildingTypeCountAggregateInputType | true
    }

  export interface BuildingTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BuildingType'], meta: { name: 'BuildingType' } }
    /**
     * Find zero or one BuildingType that matches the filter.
     * @param {BuildingTypeFindUniqueArgs} args - Arguments to find a BuildingType
     * @example
     * // Get one BuildingType
     * const buildingType = await prisma.buildingType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuildingTypeFindUniqueArgs>(args: SelectSubset<T, BuildingTypeFindUniqueArgs<ExtArgs>>): Prisma__BuildingTypeClient<$Result.GetResult<Prisma.$BuildingTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BuildingType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuildingTypeFindUniqueOrThrowArgs} args - Arguments to find a BuildingType
     * @example
     * // Get one BuildingType
     * const buildingType = await prisma.buildingType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuildingTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, BuildingTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuildingTypeClient<$Result.GetResult<Prisma.$BuildingTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuildingType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeFindFirstArgs} args - Arguments to find a BuildingType
     * @example
     * // Get one BuildingType
     * const buildingType = await prisma.buildingType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuildingTypeFindFirstArgs>(args?: SelectSubset<T, BuildingTypeFindFirstArgs<ExtArgs>>): Prisma__BuildingTypeClient<$Result.GetResult<Prisma.$BuildingTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuildingType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeFindFirstOrThrowArgs} args - Arguments to find a BuildingType
     * @example
     * // Get one BuildingType
     * const buildingType = await prisma.buildingType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuildingTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, BuildingTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuildingTypeClient<$Result.GetResult<Prisma.$BuildingTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BuildingTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BuildingTypes
     * const buildingTypes = await prisma.buildingType.findMany()
     * 
     * // Get first 10 BuildingTypes
     * const buildingTypes = await prisma.buildingType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buildingTypeWithIdOnly = await prisma.buildingType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuildingTypeFindManyArgs>(args?: SelectSubset<T, BuildingTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BuildingType.
     * @param {BuildingTypeCreateArgs} args - Arguments to create a BuildingType.
     * @example
     * // Create one BuildingType
     * const BuildingType = await prisma.buildingType.create({
     *   data: {
     *     // ... data to create a BuildingType
     *   }
     * })
     * 
     */
    create<T extends BuildingTypeCreateArgs>(args: SelectSubset<T, BuildingTypeCreateArgs<ExtArgs>>): Prisma__BuildingTypeClient<$Result.GetResult<Prisma.$BuildingTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BuildingTypes.
     * @param {BuildingTypeCreateManyArgs} args - Arguments to create many BuildingTypes.
     * @example
     * // Create many BuildingTypes
     * const buildingType = await prisma.buildingType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuildingTypeCreateManyArgs>(args?: SelectSubset<T, BuildingTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BuildingTypes and returns the data saved in the database.
     * @param {BuildingTypeCreateManyAndReturnArgs} args - Arguments to create many BuildingTypes.
     * @example
     * // Create many BuildingTypes
     * const buildingType = await prisma.buildingType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BuildingTypes and only return the `id`
     * const buildingTypeWithIdOnly = await prisma.buildingType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BuildingTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, BuildingTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BuildingType.
     * @param {BuildingTypeDeleteArgs} args - Arguments to delete one BuildingType.
     * @example
     * // Delete one BuildingType
     * const BuildingType = await prisma.buildingType.delete({
     *   where: {
     *     // ... filter to delete one BuildingType
     *   }
     * })
     * 
     */
    delete<T extends BuildingTypeDeleteArgs>(args: SelectSubset<T, BuildingTypeDeleteArgs<ExtArgs>>): Prisma__BuildingTypeClient<$Result.GetResult<Prisma.$BuildingTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BuildingType.
     * @param {BuildingTypeUpdateArgs} args - Arguments to update one BuildingType.
     * @example
     * // Update one BuildingType
     * const buildingType = await prisma.buildingType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuildingTypeUpdateArgs>(args: SelectSubset<T, BuildingTypeUpdateArgs<ExtArgs>>): Prisma__BuildingTypeClient<$Result.GetResult<Prisma.$BuildingTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BuildingTypes.
     * @param {BuildingTypeDeleteManyArgs} args - Arguments to filter BuildingTypes to delete.
     * @example
     * // Delete a few BuildingTypes
     * const { count } = await prisma.buildingType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuildingTypeDeleteManyArgs>(args?: SelectSubset<T, BuildingTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BuildingTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BuildingTypes
     * const buildingType = await prisma.buildingType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuildingTypeUpdateManyArgs>(args: SelectSubset<T, BuildingTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BuildingTypes and returns the data updated in the database.
     * @param {BuildingTypeUpdateManyAndReturnArgs} args - Arguments to update many BuildingTypes.
     * @example
     * // Update many BuildingTypes
     * const buildingType = await prisma.buildingType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BuildingTypes and only return the `id`
     * const buildingTypeWithIdOnly = await prisma.buildingType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BuildingTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, BuildingTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BuildingType.
     * @param {BuildingTypeUpsertArgs} args - Arguments to update or create a BuildingType.
     * @example
     * // Update or create a BuildingType
     * const buildingType = await prisma.buildingType.upsert({
     *   create: {
     *     // ... data to create a BuildingType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BuildingType we want to update
     *   }
     * })
     */
    upsert<T extends BuildingTypeUpsertArgs>(args: SelectSubset<T, BuildingTypeUpsertArgs<ExtArgs>>): Prisma__BuildingTypeClient<$Result.GetResult<Prisma.$BuildingTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BuildingTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeCountArgs} args - Arguments to filter BuildingTypes to count.
     * @example
     * // Count the number of BuildingTypes
     * const count = await prisma.buildingType.count({
     *   where: {
     *     // ... the filter for the BuildingTypes we want to count
     *   }
     * })
    **/
    count<T extends BuildingTypeCountArgs>(
      args?: Subset<T, BuildingTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuildingTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BuildingType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuildingTypeAggregateArgs>(args: Subset<T, BuildingTypeAggregateArgs>): Prisma.PrismaPromise<GetBuildingTypeAggregateType<T>>

    /**
     * Group by BuildingType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuildingTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuildingTypeGroupByArgs['orderBy'] }
        : { orderBy?: BuildingTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuildingTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuildingTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BuildingType model
   */
  readonly fields: BuildingTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BuildingType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuildingTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    i18n<T extends BuildingType$i18nArgs<ExtArgs> = {}>(args?: Subset<T, BuildingType$i18nArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingTypeI18nPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    buildings<T extends BuildingType$buildingsArgs<ExtArgs> = {}>(args?: Subset<T, BuildingType$buildingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BuildingType model
   */
  interface BuildingTypeFieldRefs {
    readonly id: FieldRef<"BuildingType", 'String'>
    readonly updatedAt: FieldRef<"BuildingType", 'DateTime'>
    readonly createdAt: FieldRef<"BuildingType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BuildingType findUnique
   */
  export type BuildingTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingType
     */
    select?: BuildingTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingType
     */
    omit?: BuildingTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeInclude<ExtArgs> | null
    /**
     * Filter, which BuildingType to fetch.
     */
    where: BuildingTypeWhereUniqueInput
  }

  /**
   * BuildingType findUniqueOrThrow
   */
  export type BuildingTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingType
     */
    select?: BuildingTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingType
     */
    omit?: BuildingTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeInclude<ExtArgs> | null
    /**
     * Filter, which BuildingType to fetch.
     */
    where: BuildingTypeWhereUniqueInput
  }

  /**
   * BuildingType findFirst
   */
  export type BuildingTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingType
     */
    select?: BuildingTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingType
     */
    omit?: BuildingTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeInclude<ExtArgs> | null
    /**
     * Filter, which BuildingType to fetch.
     */
    where?: BuildingTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildingTypes to fetch.
     */
    orderBy?: BuildingTypeOrderByWithRelationInput | BuildingTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuildingTypes.
     */
    cursor?: BuildingTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildingTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildingTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuildingTypes.
     */
    distinct?: BuildingTypeScalarFieldEnum | BuildingTypeScalarFieldEnum[]
  }

  /**
   * BuildingType findFirstOrThrow
   */
  export type BuildingTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingType
     */
    select?: BuildingTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingType
     */
    omit?: BuildingTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeInclude<ExtArgs> | null
    /**
     * Filter, which BuildingType to fetch.
     */
    where?: BuildingTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildingTypes to fetch.
     */
    orderBy?: BuildingTypeOrderByWithRelationInput | BuildingTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuildingTypes.
     */
    cursor?: BuildingTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildingTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildingTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuildingTypes.
     */
    distinct?: BuildingTypeScalarFieldEnum | BuildingTypeScalarFieldEnum[]
  }

  /**
   * BuildingType findMany
   */
  export type BuildingTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingType
     */
    select?: BuildingTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingType
     */
    omit?: BuildingTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeInclude<ExtArgs> | null
    /**
     * Filter, which BuildingTypes to fetch.
     */
    where?: BuildingTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildingTypes to fetch.
     */
    orderBy?: BuildingTypeOrderByWithRelationInput | BuildingTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BuildingTypes.
     */
    cursor?: BuildingTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildingTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildingTypes.
     */
    skip?: number
    distinct?: BuildingTypeScalarFieldEnum | BuildingTypeScalarFieldEnum[]
  }

  /**
   * BuildingType create
   */
  export type BuildingTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingType
     */
    select?: BuildingTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingType
     */
    omit?: BuildingTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a BuildingType.
     */
    data: XOR<BuildingTypeCreateInput, BuildingTypeUncheckedCreateInput>
  }

  /**
   * BuildingType createMany
   */
  export type BuildingTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BuildingTypes.
     */
    data: BuildingTypeCreateManyInput | BuildingTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BuildingType createManyAndReturn
   */
  export type BuildingTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingType
     */
    select?: BuildingTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingType
     */
    omit?: BuildingTypeOmit<ExtArgs> | null
    /**
     * The data used to create many BuildingTypes.
     */
    data: BuildingTypeCreateManyInput | BuildingTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BuildingType update
   */
  export type BuildingTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingType
     */
    select?: BuildingTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingType
     */
    omit?: BuildingTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a BuildingType.
     */
    data: XOR<BuildingTypeUpdateInput, BuildingTypeUncheckedUpdateInput>
    /**
     * Choose, which BuildingType to update.
     */
    where: BuildingTypeWhereUniqueInput
  }

  /**
   * BuildingType updateMany
   */
  export type BuildingTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BuildingTypes.
     */
    data: XOR<BuildingTypeUpdateManyMutationInput, BuildingTypeUncheckedUpdateManyInput>
    /**
     * Filter which BuildingTypes to update
     */
    where?: BuildingTypeWhereInput
    /**
     * Limit how many BuildingTypes to update.
     */
    limit?: number
  }

  /**
   * BuildingType updateManyAndReturn
   */
  export type BuildingTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingType
     */
    select?: BuildingTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingType
     */
    omit?: BuildingTypeOmit<ExtArgs> | null
    /**
     * The data used to update BuildingTypes.
     */
    data: XOR<BuildingTypeUpdateManyMutationInput, BuildingTypeUncheckedUpdateManyInput>
    /**
     * Filter which BuildingTypes to update
     */
    where?: BuildingTypeWhereInput
    /**
     * Limit how many BuildingTypes to update.
     */
    limit?: number
  }

  /**
   * BuildingType upsert
   */
  export type BuildingTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingType
     */
    select?: BuildingTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingType
     */
    omit?: BuildingTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the BuildingType to update in case it exists.
     */
    where: BuildingTypeWhereUniqueInput
    /**
     * In case the BuildingType found by the `where` argument doesn't exist, create a new BuildingType with this data.
     */
    create: XOR<BuildingTypeCreateInput, BuildingTypeUncheckedCreateInput>
    /**
     * In case the BuildingType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuildingTypeUpdateInput, BuildingTypeUncheckedUpdateInput>
  }

  /**
   * BuildingType delete
   */
  export type BuildingTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingType
     */
    select?: BuildingTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingType
     */
    omit?: BuildingTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeInclude<ExtArgs> | null
    /**
     * Filter which BuildingType to delete.
     */
    where: BuildingTypeWhereUniqueInput
  }

  /**
   * BuildingType deleteMany
   */
  export type BuildingTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuildingTypes to delete
     */
    where?: BuildingTypeWhereInput
    /**
     * Limit how many BuildingTypes to delete.
     */
    limit?: number
  }

  /**
   * BuildingType.i18n
   */
  export type BuildingType$i18nArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeI18n
     */
    select?: BuildingTypeI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingTypeI18n
     */
    omit?: BuildingTypeI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeI18nInclude<ExtArgs> | null
    where?: BuildingTypeI18nWhereInput
    orderBy?: BuildingTypeI18nOrderByWithRelationInput | BuildingTypeI18nOrderByWithRelationInput[]
    cursor?: BuildingTypeI18nWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuildingTypeI18nScalarFieldEnum | BuildingTypeI18nScalarFieldEnum[]
  }

  /**
   * BuildingType.buildings
   */
  export type BuildingType$buildingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    where?: BuildingWhereInput
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    cursor?: BuildingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuildingScalarFieldEnum | BuildingScalarFieldEnum[]
  }

  /**
   * BuildingType without action
   */
  export type BuildingTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingType
     */
    select?: BuildingTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingType
     */
    omit?: BuildingTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeInclude<ExtArgs> | null
  }


  /**
   * Model BuildingTypeI18n
   */

  export type AggregateBuildingTypeI18n = {
    _count: BuildingTypeI18nCountAggregateOutputType | null
    _min: BuildingTypeI18nMinAggregateOutputType | null
    _max: BuildingTypeI18nMaxAggregateOutputType | null
  }

  export type BuildingTypeI18nMinAggregateOutputType = {
    id: string | null
    buildingTypeId: string | null
    language: string | null
    name: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type BuildingTypeI18nMaxAggregateOutputType = {
    id: string | null
    buildingTypeId: string | null
    language: string | null
    name: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type BuildingTypeI18nCountAggregateOutputType = {
    id: number
    buildingTypeId: number
    language: number
    name: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type BuildingTypeI18nMinAggregateInputType = {
    id?: true
    buildingTypeId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
  }

  export type BuildingTypeI18nMaxAggregateInputType = {
    id?: true
    buildingTypeId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
  }

  export type BuildingTypeI18nCountAggregateInputType = {
    id?: true
    buildingTypeId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type BuildingTypeI18nAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuildingTypeI18n to aggregate.
     */
    where?: BuildingTypeI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildingTypeI18ns to fetch.
     */
    orderBy?: BuildingTypeI18nOrderByWithRelationInput | BuildingTypeI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuildingTypeI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildingTypeI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildingTypeI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BuildingTypeI18ns
    **/
    _count?: true | BuildingTypeI18nCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuildingTypeI18nMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuildingTypeI18nMaxAggregateInputType
  }

  export type GetBuildingTypeI18nAggregateType<T extends BuildingTypeI18nAggregateArgs> = {
        [P in keyof T & keyof AggregateBuildingTypeI18n]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuildingTypeI18n[P]>
      : GetScalarType<T[P], AggregateBuildingTypeI18n[P]>
  }




  export type BuildingTypeI18nGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildingTypeI18nWhereInput
    orderBy?: BuildingTypeI18nOrderByWithAggregationInput | BuildingTypeI18nOrderByWithAggregationInput[]
    by: BuildingTypeI18nScalarFieldEnum[] | BuildingTypeI18nScalarFieldEnum
    having?: BuildingTypeI18nScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuildingTypeI18nCountAggregateInputType | true
    _min?: BuildingTypeI18nMinAggregateInputType
    _max?: BuildingTypeI18nMaxAggregateInputType
  }

  export type BuildingTypeI18nGroupByOutputType = {
    id: string
    buildingTypeId: string
    language: string
    name: string
    updatedAt: Date
    createdAt: Date
    _count: BuildingTypeI18nCountAggregateOutputType | null
    _min: BuildingTypeI18nMinAggregateOutputType | null
    _max: BuildingTypeI18nMaxAggregateOutputType | null
  }

  type GetBuildingTypeI18nGroupByPayload<T extends BuildingTypeI18nGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuildingTypeI18nGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuildingTypeI18nGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuildingTypeI18nGroupByOutputType[P]>
            : GetScalarType<T[P], BuildingTypeI18nGroupByOutputType[P]>
        }
      >
    >


  export type BuildingTypeI18nSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingTypeId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    buildingType?: boolean | BuildingTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buildingTypeI18n"]>

  export type BuildingTypeI18nSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingTypeId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    buildingType?: boolean | BuildingTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buildingTypeI18n"]>

  export type BuildingTypeI18nSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingTypeId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    buildingType?: boolean | BuildingTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buildingTypeI18n"]>

  export type BuildingTypeI18nSelectScalar = {
    id?: boolean
    buildingTypeId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type BuildingTypeI18nOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "buildingTypeId" | "language" | "name" | "updatedAt" | "createdAt", ExtArgs["result"]["buildingTypeI18n"]>
  export type BuildingTypeI18nInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buildingType?: boolean | BuildingTypeDefaultArgs<ExtArgs>
  }
  export type BuildingTypeI18nIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buildingType?: boolean | BuildingTypeDefaultArgs<ExtArgs>
  }
  export type BuildingTypeI18nIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buildingType?: boolean | BuildingTypeDefaultArgs<ExtArgs>
  }

  export type $BuildingTypeI18nPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BuildingTypeI18n"
    objects: {
      buildingType: Prisma.$BuildingTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      buildingTypeId: string
      language: string
      name: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["buildingTypeI18n"]>
    composites: {}
  }

  type BuildingTypeI18nGetPayload<S extends boolean | null | undefined | BuildingTypeI18nDefaultArgs> = $Result.GetResult<Prisma.$BuildingTypeI18nPayload, S>

  type BuildingTypeI18nCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuildingTypeI18nFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuildingTypeI18nCountAggregateInputType | true
    }

  export interface BuildingTypeI18nDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BuildingTypeI18n'], meta: { name: 'BuildingTypeI18n' } }
    /**
     * Find zero or one BuildingTypeI18n that matches the filter.
     * @param {BuildingTypeI18nFindUniqueArgs} args - Arguments to find a BuildingTypeI18n
     * @example
     * // Get one BuildingTypeI18n
     * const buildingTypeI18n = await prisma.buildingTypeI18n.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuildingTypeI18nFindUniqueArgs>(args: SelectSubset<T, BuildingTypeI18nFindUniqueArgs<ExtArgs>>): Prisma__BuildingTypeI18nClient<$Result.GetResult<Prisma.$BuildingTypeI18nPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BuildingTypeI18n that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuildingTypeI18nFindUniqueOrThrowArgs} args - Arguments to find a BuildingTypeI18n
     * @example
     * // Get one BuildingTypeI18n
     * const buildingTypeI18n = await prisma.buildingTypeI18n.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuildingTypeI18nFindUniqueOrThrowArgs>(args: SelectSubset<T, BuildingTypeI18nFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuildingTypeI18nClient<$Result.GetResult<Prisma.$BuildingTypeI18nPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuildingTypeI18n that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeI18nFindFirstArgs} args - Arguments to find a BuildingTypeI18n
     * @example
     * // Get one BuildingTypeI18n
     * const buildingTypeI18n = await prisma.buildingTypeI18n.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuildingTypeI18nFindFirstArgs>(args?: SelectSubset<T, BuildingTypeI18nFindFirstArgs<ExtArgs>>): Prisma__BuildingTypeI18nClient<$Result.GetResult<Prisma.$BuildingTypeI18nPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuildingTypeI18n that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeI18nFindFirstOrThrowArgs} args - Arguments to find a BuildingTypeI18n
     * @example
     * // Get one BuildingTypeI18n
     * const buildingTypeI18n = await prisma.buildingTypeI18n.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuildingTypeI18nFindFirstOrThrowArgs>(args?: SelectSubset<T, BuildingTypeI18nFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuildingTypeI18nClient<$Result.GetResult<Prisma.$BuildingTypeI18nPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BuildingTypeI18ns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeI18nFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BuildingTypeI18ns
     * const buildingTypeI18ns = await prisma.buildingTypeI18n.findMany()
     * 
     * // Get first 10 BuildingTypeI18ns
     * const buildingTypeI18ns = await prisma.buildingTypeI18n.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buildingTypeI18nWithIdOnly = await prisma.buildingTypeI18n.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuildingTypeI18nFindManyArgs>(args?: SelectSubset<T, BuildingTypeI18nFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingTypeI18nPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BuildingTypeI18n.
     * @param {BuildingTypeI18nCreateArgs} args - Arguments to create a BuildingTypeI18n.
     * @example
     * // Create one BuildingTypeI18n
     * const BuildingTypeI18n = await prisma.buildingTypeI18n.create({
     *   data: {
     *     // ... data to create a BuildingTypeI18n
     *   }
     * })
     * 
     */
    create<T extends BuildingTypeI18nCreateArgs>(args: SelectSubset<T, BuildingTypeI18nCreateArgs<ExtArgs>>): Prisma__BuildingTypeI18nClient<$Result.GetResult<Prisma.$BuildingTypeI18nPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BuildingTypeI18ns.
     * @param {BuildingTypeI18nCreateManyArgs} args - Arguments to create many BuildingTypeI18ns.
     * @example
     * // Create many BuildingTypeI18ns
     * const buildingTypeI18n = await prisma.buildingTypeI18n.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuildingTypeI18nCreateManyArgs>(args?: SelectSubset<T, BuildingTypeI18nCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BuildingTypeI18ns and returns the data saved in the database.
     * @param {BuildingTypeI18nCreateManyAndReturnArgs} args - Arguments to create many BuildingTypeI18ns.
     * @example
     * // Create many BuildingTypeI18ns
     * const buildingTypeI18n = await prisma.buildingTypeI18n.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BuildingTypeI18ns and only return the `id`
     * const buildingTypeI18nWithIdOnly = await prisma.buildingTypeI18n.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BuildingTypeI18nCreateManyAndReturnArgs>(args?: SelectSubset<T, BuildingTypeI18nCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingTypeI18nPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BuildingTypeI18n.
     * @param {BuildingTypeI18nDeleteArgs} args - Arguments to delete one BuildingTypeI18n.
     * @example
     * // Delete one BuildingTypeI18n
     * const BuildingTypeI18n = await prisma.buildingTypeI18n.delete({
     *   where: {
     *     // ... filter to delete one BuildingTypeI18n
     *   }
     * })
     * 
     */
    delete<T extends BuildingTypeI18nDeleteArgs>(args: SelectSubset<T, BuildingTypeI18nDeleteArgs<ExtArgs>>): Prisma__BuildingTypeI18nClient<$Result.GetResult<Prisma.$BuildingTypeI18nPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BuildingTypeI18n.
     * @param {BuildingTypeI18nUpdateArgs} args - Arguments to update one BuildingTypeI18n.
     * @example
     * // Update one BuildingTypeI18n
     * const buildingTypeI18n = await prisma.buildingTypeI18n.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuildingTypeI18nUpdateArgs>(args: SelectSubset<T, BuildingTypeI18nUpdateArgs<ExtArgs>>): Prisma__BuildingTypeI18nClient<$Result.GetResult<Prisma.$BuildingTypeI18nPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BuildingTypeI18ns.
     * @param {BuildingTypeI18nDeleteManyArgs} args - Arguments to filter BuildingTypeI18ns to delete.
     * @example
     * // Delete a few BuildingTypeI18ns
     * const { count } = await prisma.buildingTypeI18n.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuildingTypeI18nDeleteManyArgs>(args?: SelectSubset<T, BuildingTypeI18nDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BuildingTypeI18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeI18nUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BuildingTypeI18ns
     * const buildingTypeI18n = await prisma.buildingTypeI18n.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuildingTypeI18nUpdateManyArgs>(args: SelectSubset<T, BuildingTypeI18nUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BuildingTypeI18ns and returns the data updated in the database.
     * @param {BuildingTypeI18nUpdateManyAndReturnArgs} args - Arguments to update many BuildingTypeI18ns.
     * @example
     * // Update many BuildingTypeI18ns
     * const buildingTypeI18n = await prisma.buildingTypeI18n.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BuildingTypeI18ns and only return the `id`
     * const buildingTypeI18nWithIdOnly = await prisma.buildingTypeI18n.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BuildingTypeI18nUpdateManyAndReturnArgs>(args: SelectSubset<T, BuildingTypeI18nUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingTypeI18nPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BuildingTypeI18n.
     * @param {BuildingTypeI18nUpsertArgs} args - Arguments to update or create a BuildingTypeI18n.
     * @example
     * // Update or create a BuildingTypeI18n
     * const buildingTypeI18n = await prisma.buildingTypeI18n.upsert({
     *   create: {
     *     // ... data to create a BuildingTypeI18n
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BuildingTypeI18n we want to update
     *   }
     * })
     */
    upsert<T extends BuildingTypeI18nUpsertArgs>(args: SelectSubset<T, BuildingTypeI18nUpsertArgs<ExtArgs>>): Prisma__BuildingTypeI18nClient<$Result.GetResult<Prisma.$BuildingTypeI18nPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BuildingTypeI18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeI18nCountArgs} args - Arguments to filter BuildingTypeI18ns to count.
     * @example
     * // Count the number of BuildingTypeI18ns
     * const count = await prisma.buildingTypeI18n.count({
     *   where: {
     *     // ... the filter for the BuildingTypeI18ns we want to count
     *   }
     * })
    **/
    count<T extends BuildingTypeI18nCountArgs>(
      args?: Subset<T, BuildingTypeI18nCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuildingTypeI18nCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BuildingTypeI18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeI18nAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuildingTypeI18nAggregateArgs>(args: Subset<T, BuildingTypeI18nAggregateArgs>): Prisma.PrismaPromise<GetBuildingTypeI18nAggregateType<T>>

    /**
     * Group by BuildingTypeI18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingTypeI18nGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuildingTypeI18nGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuildingTypeI18nGroupByArgs['orderBy'] }
        : { orderBy?: BuildingTypeI18nGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuildingTypeI18nGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuildingTypeI18nGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BuildingTypeI18n model
   */
  readonly fields: BuildingTypeI18nFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BuildingTypeI18n.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuildingTypeI18nClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    buildingType<T extends BuildingTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BuildingTypeDefaultArgs<ExtArgs>>): Prisma__BuildingTypeClient<$Result.GetResult<Prisma.$BuildingTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BuildingTypeI18n model
   */
  interface BuildingTypeI18nFieldRefs {
    readonly id: FieldRef<"BuildingTypeI18n", 'String'>
    readonly buildingTypeId: FieldRef<"BuildingTypeI18n", 'String'>
    readonly language: FieldRef<"BuildingTypeI18n", 'String'>
    readonly name: FieldRef<"BuildingTypeI18n", 'String'>
    readonly updatedAt: FieldRef<"BuildingTypeI18n", 'DateTime'>
    readonly createdAt: FieldRef<"BuildingTypeI18n", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BuildingTypeI18n findUnique
   */
  export type BuildingTypeI18nFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeI18n
     */
    select?: BuildingTypeI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingTypeI18n
     */
    omit?: BuildingTypeI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeI18nInclude<ExtArgs> | null
    /**
     * Filter, which BuildingTypeI18n to fetch.
     */
    where: BuildingTypeI18nWhereUniqueInput
  }

  /**
   * BuildingTypeI18n findUniqueOrThrow
   */
  export type BuildingTypeI18nFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeI18n
     */
    select?: BuildingTypeI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingTypeI18n
     */
    omit?: BuildingTypeI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeI18nInclude<ExtArgs> | null
    /**
     * Filter, which BuildingTypeI18n to fetch.
     */
    where: BuildingTypeI18nWhereUniqueInput
  }

  /**
   * BuildingTypeI18n findFirst
   */
  export type BuildingTypeI18nFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeI18n
     */
    select?: BuildingTypeI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingTypeI18n
     */
    omit?: BuildingTypeI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeI18nInclude<ExtArgs> | null
    /**
     * Filter, which BuildingTypeI18n to fetch.
     */
    where?: BuildingTypeI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildingTypeI18ns to fetch.
     */
    orderBy?: BuildingTypeI18nOrderByWithRelationInput | BuildingTypeI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuildingTypeI18ns.
     */
    cursor?: BuildingTypeI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildingTypeI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildingTypeI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuildingTypeI18ns.
     */
    distinct?: BuildingTypeI18nScalarFieldEnum | BuildingTypeI18nScalarFieldEnum[]
  }

  /**
   * BuildingTypeI18n findFirstOrThrow
   */
  export type BuildingTypeI18nFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeI18n
     */
    select?: BuildingTypeI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingTypeI18n
     */
    omit?: BuildingTypeI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeI18nInclude<ExtArgs> | null
    /**
     * Filter, which BuildingTypeI18n to fetch.
     */
    where?: BuildingTypeI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildingTypeI18ns to fetch.
     */
    orderBy?: BuildingTypeI18nOrderByWithRelationInput | BuildingTypeI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuildingTypeI18ns.
     */
    cursor?: BuildingTypeI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildingTypeI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildingTypeI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuildingTypeI18ns.
     */
    distinct?: BuildingTypeI18nScalarFieldEnum | BuildingTypeI18nScalarFieldEnum[]
  }

  /**
   * BuildingTypeI18n findMany
   */
  export type BuildingTypeI18nFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeI18n
     */
    select?: BuildingTypeI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingTypeI18n
     */
    omit?: BuildingTypeI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeI18nInclude<ExtArgs> | null
    /**
     * Filter, which BuildingTypeI18ns to fetch.
     */
    where?: BuildingTypeI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildingTypeI18ns to fetch.
     */
    orderBy?: BuildingTypeI18nOrderByWithRelationInput | BuildingTypeI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BuildingTypeI18ns.
     */
    cursor?: BuildingTypeI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildingTypeI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildingTypeI18ns.
     */
    skip?: number
    distinct?: BuildingTypeI18nScalarFieldEnum | BuildingTypeI18nScalarFieldEnum[]
  }

  /**
   * BuildingTypeI18n create
   */
  export type BuildingTypeI18nCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeI18n
     */
    select?: BuildingTypeI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingTypeI18n
     */
    omit?: BuildingTypeI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeI18nInclude<ExtArgs> | null
    /**
     * The data needed to create a BuildingTypeI18n.
     */
    data: XOR<BuildingTypeI18nCreateInput, BuildingTypeI18nUncheckedCreateInput>
  }

  /**
   * BuildingTypeI18n createMany
   */
  export type BuildingTypeI18nCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BuildingTypeI18ns.
     */
    data: BuildingTypeI18nCreateManyInput | BuildingTypeI18nCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BuildingTypeI18n createManyAndReturn
   */
  export type BuildingTypeI18nCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeI18n
     */
    select?: BuildingTypeI18nSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingTypeI18n
     */
    omit?: BuildingTypeI18nOmit<ExtArgs> | null
    /**
     * The data used to create many BuildingTypeI18ns.
     */
    data: BuildingTypeI18nCreateManyInput | BuildingTypeI18nCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeI18nIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BuildingTypeI18n update
   */
  export type BuildingTypeI18nUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeI18n
     */
    select?: BuildingTypeI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingTypeI18n
     */
    omit?: BuildingTypeI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeI18nInclude<ExtArgs> | null
    /**
     * The data needed to update a BuildingTypeI18n.
     */
    data: XOR<BuildingTypeI18nUpdateInput, BuildingTypeI18nUncheckedUpdateInput>
    /**
     * Choose, which BuildingTypeI18n to update.
     */
    where: BuildingTypeI18nWhereUniqueInput
  }

  /**
   * BuildingTypeI18n updateMany
   */
  export type BuildingTypeI18nUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BuildingTypeI18ns.
     */
    data: XOR<BuildingTypeI18nUpdateManyMutationInput, BuildingTypeI18nUncheckedUpdateManyInput>
    /**
     * Filter which BuildingTypeI18ns to update
     */
    where?: BuildingTypeI18nWhereInput
    /**
     * Limit how many BuildingTypeI18ns to update.
     */
    limit?: number
  }

  /**
   * BuildingTypeI18n updateManyAndReturn
   */
  export type BuildingTypeI18nUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeI18n
     */
    select?: BuildingTypeI18nSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingTypeI18n
     */
    omit?: BuildingTypeI18nOmit<ExtArgs> | null
    /**
     * The data used to update BuildingTypeI18ns.
     */
    data: XOR<BuildingTypeI18nUpdateManyMutationInput, BuildingTypeI18nUncheckedUpdateManyInput>
    /**
     * Filter which BuildingTypeI18ns to update
     */
    where?: BuildingTypeI18nWhereInput
    /**
     * Limit how many BuildingTypeI18ns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeI18nIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BuildingTypeI18n upsert
   */
  export type BuildingTypeI18nUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeI18n
     */
    select?: BuildingTypeI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingTypeI18n
     */
    omit?: BuildingTypeI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeI18nInclude<ExtArgs> | null
    /**
     * The filter to search for the BuildingTypeI18n to update in case it exists.
     */
    where: BuildingTypeI18nWhereUniqueInput
    /**
     * In case the BuildingTypeI18n found by the `where` argument doesn't exist, create a new BuildingTypeI18n with this data.
     */
    create: XOR<BuildingTypeI18nCreateInput, BuildingTypeI18nUncheckedCreateInput>
    /**
     * In case the BuildingTypeI18n was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuildingTypeI18nUpdateInput, BuildingTypeI18nUncheckedUpdateInput>
  }

  /**
   * BuildingTypeI18n delete
   */
  export type BuildingTypeI18nDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeI18n
     */
    select?: BuildingTypeI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingTypeI18n
     */
    omit?: BuildingTypeI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeI18nInclude<ExtArgs> | null
    /**
     * Filter which BuildingTypeI18n to delete.
     */
    where: BuildingTypeI18nWhereUniqueInput
  }

  /**
   * BuildingTypeI18n deleteMany
   */
  export type BuildingTypeI18nDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuildingTypeI18ns to delete
     */
    where?: BuildingTypeI18nWhereInput
    /**
     * Limit how many BuildingTypeI18ns to delete.
     */
    limit?: number
  }

  /**
   * BuildingTypeI18n without action
   */
  export type BuildingTypeI18nDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingTypeI18n
     */
    select?: BuildingTypeI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingTypeI18n
     */
    omit?: BuildingTypeI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingTypeI18nInclude<ExtArgs> | null
  }


  /**
   * Model Building
   */

  export type AggregateBuilding = {
    _count: BuildingCountAggregateOutputType | null
    _min: BuildingMinAggregateOutputType | null
    _max: BuildingMaxAggregateOutputType | null
  }

  export type BuildingMinAggregateOutputType = {
    id: string | null
    buildingTypeId: string | null
    locationId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type BuildingMaxAggregateOutputType = {
    id: string | null
    buildingTypeId: string | null
    locationId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type BuildingCountAggregateOutputType = {
    id: number
    buildingTypeId: number
    locationId: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type BuildingMinAggregateInputType = {
    id?: true
    buildingTypeId?: true
    locationId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type BuildingMaxAggregateInputType = {
    id?: true
    buildingTypeId?: true
    locationId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type BuildingCountAggregateInputType = {
    id?: true
    buildingTypeId?: true
    locationId?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type BuildingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Building to aggregate.
     */
    where?: BuildingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buildings to fetch.
     */
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuildingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buildings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buildings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Buildings
    **/
    _count?: true | BuildingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuildingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuildingMaxAggregateInputType
  }

  export type GetBuildingAggregateType<T extends BuildingAggregateArgs> = {
        [P in keyof T & keyof AggregateBuilding]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuilding[P]>
      : GetScalarType<T[P], AggregateBuilding[P]>
  }




  export type BuildingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildingWhereInput
    orderBy?: BuildingOrderByWithAggregationInput | BuildingOrderByWithAggregationInput[]
    by: BuildingScalarFieldEnum[] | BuildingScalarFieldEnum
    having?: BuildingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuildingCountAggregateInputType | true
    _min?: BuildingMinAggregateInputType
    _max?: BuildingMaxAggregateInputType
  }

  export type BuildingGroupByOutputType = {
    id: string
    buildingTypeId: string
    locationId: string
    updatedAt: Date
    createdAt: Date
    _count: BuildingCountAggregateOutputType | null
    _min: BuildingMinAggregateOutputType | null
    _max: BuildingMaxAggregateOutputType | null
  }

  type GetBuildingGroupByPayload<T extends BuildingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuildingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuildingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuildingGroupByOutputType[P]>
            : GetScalarType<T[P], BuildingGroupByOutputType[P]>
        }
      >
    >


  export type BuildingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingTypeId?: boolean
    locationId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    buildingType?: boolean | BuildingTypeDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    i18n?: boolean | Building$i18nArgs<ExtArgs>
    stadiumInfo?: boolean | Building$stadiumInfoArgs<ExtArgs>
    _count?: boolean | BuildingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["building"]>

  export type BuildingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingTypeId?: boolean
    locationId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    buildingType?: boolean | BuildingTypeDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["building"]>

  export type BuildingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingTypeId?: boolean
    locationId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    buildingType?: boolean | BuildingTypeDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["building"]>

  export type BuildingSelectScalar = {
    id?: boolean
    buildingTypeId?: boolean
    locationId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type BuildingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "buildingTypeId" | "locationId" | "updatedAt" | "createdAt", ExtArgs["result"]["building"]>
  export type BuildingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buildingType?: boolean | BuildingTypeDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    i18n?: boolean | Building$i18nArgs<ExtArgs>
    stadiumInfo?: boolean | Building$stadiumInfoArgs<ExtArgs>
    _count?: boolean | BuildingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BuildingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buildingType?: boolean | BuildingTypeDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type BuildingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buildingType?: boolean | BuildingTypeDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $BuildingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Building"
    objects: {
      buildingType: Prisma.$BuildingTypePayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs>
      i18n: Prisma.$BuildingI18nPayload<ExtArgs>[]
      stadiumInfo: Prisma.$StadiumInfoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      buildingTypeId: string
      locationId: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["building"]>
    composites: {}
  }

  type BuildingGetPayload<S extends boolean | null | undefined | BuildingDefaultArgs> = $Result.GetResult<Prisma.$BuildingPayload, S>

  type BuildingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuildingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuildingCountAggregateInputType | true
    }

  export interface BuildingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Building'], meta: { name: 'Building' } }
    /**
     * Find zero or one Building that matches the filter.
     * @param {BuildingFindUniqueArgs} args - Arguments to find a Building
     * @example
     * // Get one Building
     * const building = await prisma.building.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuildingFindUniqueArgs>(args: SelectSubset<T, BuildingFindUniqueArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Building that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuildingFindUniqueOrThrowArgs} args - Arguments to find a Building
     * @example
     * // Get one Building
     * const building = await prisma.building.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuildingFindUniqueOrThrowArgs>(args: SelectSubset<T, BuildingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Building that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingFindFirstArgs} args - Arguments to find a Building
     * @example
     * // Get one Building
     * const building = await prisma.building.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuildingFindFirstArgs>(args?: SelectSubset<T, BuildingFindFirstArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Building that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingFindFirstOrThrowArgs} args - Arguments to find a Building
     * @example
     * // Get one Building
     * const building = await prisma.building.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuildingFindFirstOrThrowArgs>(args?: SelectSubset<T, BuildingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Buildings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Buildings
     * const buildings = await prisma.building.findMany()
     * 
     * // Get first 10 Buildings
     * const buildings = await prisma.building.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buildingWithIdOnly = await prisma.building.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuildingFindManyArgs>(args?: SelectSubset<T, BuildingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Building.
     * @param {BuildingCreateArgs} args - Arguments to create a Building.
     * @example
     * // Create one Building
     * const Building = await prisma.building.create({
     *   data: {
     *     // ... data to create a Building
     *   }
     * })
     * 
     */
    create<T extends BuildingCreateArgs>(args: SelectSubset<T, BuildingCreateArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Buildings.
     * @param {BuildingCreateManyArgs} args - Arguments to create many Buildings.
     * @example
     * // Create many Buildings
     * const building = await prisma.building.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuildingCreateManyArgs>(args?: SelectSubset<T, BuildingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Buildings and returns the data saved in the database.
     * @param {BuildingCreateManyAndReturnArgs} args - Arguments to create many Buildings.
     * @example
     * // Create many Buildings
     * const building = await prisma.building.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Buildings and only return the `id`
     * const buildingWithIdOnly = await prisma.building.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BuildingCreateManyAndReturnArgs>(args?: SelectSubset<T, BuildingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Building.
     * @param {BuildingDeleteArgs} args - Arguments to delete one Building.
     * @example
     * // Delete one Building
     * const Building = await prisma.building.delete({
     *   where: {
     *     // ... filter to delete one Building
     *   }
     * })
     * 
     */
    delete<T extends BuildingDeleteArgs>(args: SelectSubset<T, BuildingDeleteArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Building.
     * @param {BuildingUpdateArgs} args - Arguments to update one Building.
     * @example
     * // Update one Building
     * const building = await prisma.building.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuildingUpdateArgs>(args: SelectSubset<T, BuildingUpdateArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Buildings.
     * @param {BuildingDeleteManyArgs} args - Arguments to filter Buildings to delete.
     * @example
     * // Delete a few Buildings
     * const { count } = await prisma.building.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuildingDeleteManyArgs>(args?: SelectSubset<T, BuildingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buildings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Buildings
     * const building = await prisma.building.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuildingUpdateManyArgs>(args: SelectSubset<T, BuildingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buildings and returns the data updated in the database.
     * @param {BuildingUpdateManyAndReturnArgs} args - Arguments to update many Buildings.
     * @example
     * // Update many Buildings
     * const building = await prisma.building.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Buildings and only return the `id`
     * const buildingWithIdOnly = await prisma.building.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BuildingUpdateManyAndReturnArgs>(args: SelectSubset<T, BuildingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Building.
     * @param {BuildingUpsertArgs} args - Arguments to update or create a Building.
     * @example
     * // Update or create a Building
     * const building = await prisma.building.upsert({
     *   create: {
     *     // ... data to create a Building
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Building we want to update
     *   }
     * })
     */
    upsert<T extends BuildingUpsertArgs>(args: SelectSubset<T, BuildingUpsertArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Buildings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingCountArgs} args - Arguments to filter Buildings to count.
     * @example
     * // Count the number of Buildings
     * const count = await prisma.building.count({
     *   where: {
     *     // ... the filter for the Buildings we want to count
     *   }
     * })
    **/
    count<T extends BuildingCountArgs>(
      args?: Subset<T, BuildingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuildingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Building.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuildingAggregateArgs>(args: Subset<T, BuildingAggregateArgs>): Prisma.PrismaPromise<GetBuildingAggregateType<T>>

    /**
     * Group by Building.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuildingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuildingGroupByArgs['orderBy'] }
        : { orderBy?: BuildingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuildingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuildingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Building model
   */
  readonly fields: BuildingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Building.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuildingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    buildingType<T extends BuildingTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BuildingTypeDefaultArgs<ExtArgs>>): Prisma__BuildingTypeClient<$Result.GetResult<Prisma.$BuildingTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    i18n<T extends Building$i18nArgs<ExtArgs> = {}>(args?: Subset<T, Building$i18nArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingI18nPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stadiumInfo<T extends Building$stadiumInfoArgs<ExtArgs> = {}>(args?: Subset<T, Building$stadiumInfoArgs<ExtArgs>>): Prisma__StadiumInfoClient<$Result.GetResult<Prisma.$StadiumInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Building model
   */
  interface BuildingFieldRefs {
    readonly id: FieldRef<"Building", 'String'>
    readonly buildingTypeId: FieldRef<"Building", 'String'>
    readonly locationId: FieldRef<"Building", 'String'>
    readonly updatedAt: FieldRef<"Building", 'DateTime'>
    readonly createdAt: FieldRef<"Building", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Building findUnique
   */
  export type BuildingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Building to fetch.
     */
    where: BuildingWhereUniqueInput
  }

  /**
   * Building findUniqueOrThrow
   */
  export type BuildingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Building to fetch.
     */
    where: BuildingWhereUniqueInput
  }

  /**
   * Building findFirst
   */
  export type BuildingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Building to fetch.
     */
    where?: BuildingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buildings to fetch.
     */
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buildings.
     */
    cursor?: BuildingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buildings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buildings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buildings.
     */
    distinct?: BuildingScalarFieldEnum | BuildingScalarFieldEnum[]
  }

  /**
   * Building findFirstOrThrow
   */
  export type BuildingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Building to fetch.
     */
    where?: BuildingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buildings to fetch.
     */
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buildings.
     */
    cursor?: BuildingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buildings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buildings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buildings.
     */
    distinct?: BuildingScalarFieldEnum | BuildingScalarFieldEnum[]
  }

  /**
   * Building findMany
   */
  export type BuildingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Buildings to fetch.
     */
    where?: BuildingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buildings to fetch.
     */
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Buildings.
     */
    cursor?: BuildingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buildings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buildings.
     */
    skip?: number
    distinct?: BuildingScalarFieldEnum | BuildingScalarFieldEnum[]
  }

  /**
   * Building create
   */
  export type BuildingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * The data needed to create a Building.
     */
    data: XOR<BuildingCreateInput, BuildingUncheckedCreateInput>
  }

  /**
   * Building createMany
   */
  export type BuildingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Buildings.
     */
    data: BuildingCreateManyInput | BuildingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Building createManyAndReturn
   */
  export type BuildingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * The data used to create many Buildings.
     */
    data: BuildingCreateManyInput | BuildingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Building update
   */
  export type BuildingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * The data needed to update a Building.
     */
    data: XOR<BuildingUpdateInput, BuildingUncheckedUpdateInput>
    /**
     * Choose, which Building to update.
     */
    where: BuildingWhereUniqueInput
  }

  /**
   * Building updateMany
   */
  export type BuildingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Buildings.
     */
    data: XOR<BuildingUpdateManyMutationInput, BuildingUncheckedUpdateManyInput>
    /**
     * Filter which Buildings to update
     */
    where?: BuildingWhereInput
    /**
     * Limit how many Buildings to update.
     */
    limit?: number
  }

  /**
   * Building updateManyAndReturn
   */
  export type BuildingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * The data used to update Buildings.
     */
    data: XOR<BuildingUpdateManyMutationInput, BuildingUncheckedUpdateManyInput>
    /**
     * Filter which Buildings to update
     */
    where?: BuildingWhereInput
    /**
     * Limit how many Buildings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Building upsert
   */
  export type BuildingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * The filter to search for the Building to update in case it exists.
     */
    where: BuildingWhereUniqueInput
    /**
     * In case the Building found by the `where` argument doesn't exist, create a new Building with this data.
     */
    create: XOR<BuildingCreateInput, BuildingUncheckedCreateInput>
    /**
     * In case the Building was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuildingUpdateInput, BuildingUncheckedUpdateInput>
  }

  /**
   * Building delete
   */
  export type BuildingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter which Building to delete.
     */
    where: BuildingWhereUniqueInput
  }

  /**
   * Building deleteMany
   */
  export type BuildingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buildings to delete
     */
    where?: BuildingWhereInput
    /**
     * Limit how many Buildings to delete.
     */
    limit?: number
  }

  /**
   * Building.i18n
   */
  export type Building$i18nArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingI18n
     */
    select?: BuildingI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingI18n
     */
    omit?: BuildingI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingI18nInclude<ExtArgs> | null
    where?: BuildingI18nWhereInput
    orderBy?: BuildingI18nOrderByWithRelationInput | BuildingI18nOrderByWithRelationInput[]
    cursor?: BuildingI18nWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuildingI18nScalarFieldEnum | BuildingI18nScalarFieldEnum[]
  }

  /**
   * Building.stadiumInfo
   */
  export type Building$stadiumInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumInfo
     */
    select?: StadiumInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StadiumInfo
     */
    omit?: StadiumInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInfoInclude<ExtArgs> | null
    where?: StadiumInfoWhereInput
  }

  /**
   * Building without action
   */
  export type BuildingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
  }


  /**
   * Model BuildingI18n
   */

  export type AggregateBuildingI18n = {
    _count: BuildingI18nCountAggregateOutputType | null
    _min: BuildingI18nMinAggregateOutputType | null
    _max: BuildingI18nMaxAggregateOutputType | null
  }

  export type BuildingI18nMinAggregateOutputType = {
    id: string | null
    buildingId: string | null
    language: string | null
    name: string | null
    description: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type BuildingI18nMaxAggregateOutputType = {
    id: string | null
    buildingId: string | null
    language: string | null
    name: string | null
    description: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type BuildingI18nCountAggregateOutputType = {
    id: number
    buildingId: number
    language: number
    name: number
    description: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type BuildingI18nMinAggregateInputType = {
    id?: true
    buildingId?: true
    language?: true
    name?: true
    description?: true
    updatedAt?: true
    createdAt?: true
  }

  export type BuildingI18nMaxAggregateInputType = {
    id?: true
    buildingId?: true
    language?: true
    name?: true
    description?: true
    updatedAt?: true
    createdAt?: true
  }

  export type BuildingI18nCountAggregateInputType = {
    id?: true
    buildingId?: true
    language?: true
    name?: true
    description?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type BuildingI18nAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuildingI18n to aggregate.
     */
    where?: BuildingI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildingI18ns to fetch.
     */
    orderBy?: BuildingI18nOrderByWithRelationInput | BuildingI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuildingI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildingI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildingI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BuildingI18ns
    **/
    _count?: true | BuildingI18nCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuildingI18nMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuildingI18nMaxAggregateInputType
  }

  export type GetBuildingI18nAggregateType<T extends BuildingI18nAggregateArgs> = {
        [P in keyof T & keyof AggregateBuildingI18n]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuildingI18n[P]>
      : GetScalarType<T[P], AggregateBuildingI18n[P]>
  }




  export type BuildingI18nGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildingI18nWhereInput
    orderBy?: BuildingI18nOrderByWithAggregationInput | BuildingI18nOrderByWithAggregationInput[]
    by: BuildingI18nScalarFieldEnum[] | BuildingI18nScalarFieldEnum
    having?: BuildingI18nScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuildingI18nCountAggregateInputType | true
    _min?: BuildingI18nMinAggregateInputType
    _max?: BuildingI18nMaxAggregateInputType
  }

  export type BuildingI18nGroupByOutputType = {
    id: string
    buildingId: string
    language: string
    name: string
    description: string | null
    updatedAt: Date
    createdAt: Date
    _count: BuildingI18nCountAggregateOutputType | null
    _min: BuildingI18nMinAggregateOutputType | null
    _max: BuildingI18nMaxAggregateOutputType | null
  }

  type GetBuildingI18nGroupByPayload<T extends BuildingI18nGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuildingI18nGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuildingI18nGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuildingI18nGroupByOutputType[P]>
            : GetScalarType<T[P], BuildingI18nGroupByOutputType[P]>
        }
      >
    >


  export type BuildingI18nSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingId?: boolean
    language?: boolean
    name?: boolean
    description?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buildingI18n"]>

  export type BuildingI18nSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingId?: boolean
    language?: boolean
    name?: boolean
    description?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buildingI18n"]>

  export type BuildingI18nSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingId?: boolean
    language?: boolean
    name?: boolean
    description?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buildingI18n"]>

  export type BuildingI18nSelectScalar = {
    id?: boolean
    buildingId?: boolean
    language?: boolean
    name?: boolean
    description?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type BuildingI18nOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "buildingId" | "language" | "name" | "description" | "updatedAt" | "createdAt", ExtArgs["result"]["buildingI18n"]>
  export type BuildingI18nInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }
  export type BuildingI18nIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }
  export type BuildingI18nIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }

  export type $BuildingI18nPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BuildingI18n"
    objects: {
      building: Prisma.$BuildingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      buildingId: string
      language: string
      name: string
      description: string | null
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["buildingI18n"]>
    composites: {}
  }

  type BuildingI18nGetPayload<S extends boolean | null | undefined | BuildingI18nDefaultArgs> = $Result.GetResult<Prisma.$BuildingI18nPayload, S>

  type BuildingI18nCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuildingI18nFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuildingI18nCountAggregateInputType | true
    }

  export interface BuildingI18nDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BuildingI18n'], meta: { name: 'BuildingI18n' } }
    /**
     * Find zero or one BuildingI18n that matches the filter.
     * @param {BuildingI18nFindUniqueArgs} args - Arguments to find a BuildingI18n
     * @example
     * // Get one BuildingI18n
     * const buildingI18n = await prisma.buildingI18n.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuildingI18nFindUniqueArgs>(args: SelectSubset<T, BuildingI18nFindUniqueArgs<ExtArgs>>): Prisma__BuildingI18nClient<$Result.GetResult<Prisma.$BuildingI18nPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BuildingI18n that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuildingI18nFindUniqueOrThrowArgs} args - Arguments to find a BuildingI18n
     * @example
     * // Get one BuildingI18n
     * const buildingI18n = await prisma.buildingI18n.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuildingI18nFindUniqueOrThrowArgs>(args: SelectSubset<T, BuildingI18nFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuildingI18nClient<$Result.GetResult<Prisma.$BuildingI18nPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuildingI18n that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingI18nFindFirstArgs} args - Arguments to find a BuildingI18n
     * @example
     * // Get one BuildingI18n
     * const buildingI18n = await prisma.buildingI18n.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuildingI18nFindFirstArgs>(args?: SelectSubset<T, BuildingI18nFindFirstArgs<ExtArgs>>): Prisma__BuildingI18nClient<$Result.GetResult<Prisma.$BuildingI18nPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuildingI18n that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingI18nFindFirstOrThrowArgs} args - Arguments to find a BuildingI18n
     * @example
     * // Get one BuildingI18n
     * const buildingI18n = await prisma.buildingI18n.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuildingI18nFindFirstOrThrowArgs>(args?: SelectSubset<T, BuildingI18nFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuildingI18nClient<$Result.GetResult<Prisma.$BuildingI18nPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BuildingI18ns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingI18nFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BuildingI18ns
     * const buildingI18ns = await prisma.buildingI18n.findMany()
     * 
     * // Get first 10 BuildingI18ns
     * const buildingI18ns = await prisma.buildingI18n.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buildingI18nWithIdOnly = await prisma.buildingI18n.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuildingI18nFindManyArgs>(args?: SelectSubset<T, BuildingI18nFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingI18nPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BuildingI18n.
     * @param {BuildingI18nCreateArgs} args - Arguments to create a BuildingI18n.
     * @example
     * // Create one BuildingI18n
     * const BuildingI18n = await prisma.buildingI18n.create({
     *   data: {
     *     // ... data to create a BuildingI18n
     *   }
     * })
     * 
     */
    create<T extends BuildingI18nCreateArgs>(args: SelectSubset<T, BuildingI18nCreateArgs<ExtArgs>>): Prisma__BuildingI18nClient<$Result.GetResult<Prisma.$BuildingI18nPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BuildingI18ns.
     * @param {BuildingI18nCreateManyArgs} args - Arguments to create many BuildingI18ns.
     * @example
     * // Create many BuildingI18ns
     * const buildingI18n = await prisma.buildingI18n.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuildingI18nCreateManyArgs>(args?: SelectSubset<T, BuildingI18nCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BuildingI18ns and returns the data saved in the database.
     * @param {BuildingI18nCreateManyAndReturnArgs} args - Arguments to create many BuildingI18ns.
     * @example
     * // Create many BuildingI18ns
     * const buildingI18n = await prisma.buildingI18n.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BuildingI18ns and only return the `id`
     * const buildingI18nWithIdOnly = await prisma.buildingI18n.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BuildingI18nCreateManyAndReturnArgs>(args?: SelectSubset<T, BuildingI18nCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingI18nPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BuildingI18n.
     * @param {BuildingI18nDeleteArgs} args - Arguments to delete one BuildingI18n.
     * @example
     * // Delete one BuildingI18n
     * const BuildingI18n = await prisma.buildingI18n.delete({
     *   where: {
     *     // ... filter to delete one BuildingI18n
     *   }
     * })
     * 
     */
    delete<T extends BuildingI18nDeleteArgs>(args: SelectSubset<T, BuildingI18nDeleteArgs<ExtArgs>>): Prisma__BuildingI18nClient<$Result.GetResult<Prisma.$BuildingI18nPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BuildingI18n.
     * @param {BuildingI18nUpdateArgs} args - Arguments to update one BuildingI18n.
     * @example
     * // Update one BuildingI18n
     * const buildingI18n = await prisma.buildingI18n.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuildingI18nUpdateArgs>(args: SelectSubset<T, BuildingI18nUpdateArgs<ExtArgs>>): Prisma__BuildingI18nClient<$Result.GetResult<Prisma.$BuildingI18nPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BuildingI18ns.
     * @param {BuildingI18nDeleteManyArgs} args - Arguments to filter BuildingI18ns to delete.
     * @example
     * // Delete a few BuildingI18ns
     * const { count } = await prisma.buildingI18n.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuildingI18nDeleteManyArgs>(args?: SelectSubset<T, BuildingI18nDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BuildingI18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingI18nUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BuildingI18ns
     * const buildingI18n = await prisma.buildingI18n.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuildingI18nUpdateManyArgs>(args: SelectSubset<T, BuildingI18nUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BuildingI18ns and returns the data updated in the database.
     * @param {BuildingI18nUpdateManyAndReturnArgs} args - Arguments to update many BuildingI18ns.
     * @example
     * // Update many BuildingI18ns
     * const buildingI18n = await prisma.buildingI18n.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BuildingI18ns and only return the `id`
     * const buildingI18nWithIdOnly = await prisma.buildingI18n.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BuildingI18nUpdateManyAndReturnArgs>(args: SelectSubset<T, BuildingI18nUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingI18nPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BuildingI18n.
     * @param {BuildingI18nUpsertArgs} args - Arguments to update or create a BuildingI18n.
     * @example
     * // Update or create a BuildingI18n
     * const buildingI18n = await prisma.buildingI18n.upsert({
     *   create: {
     *     // ... data to create a BuildingI18n
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BuildingI18n we want to update
     *   }
     * })
     */
    upsert<T extends BuildingI18nUpsertArgs>(args: SelectSubset<T, BuildingI18nUpsertArgs<ExtArgs>>): Prisma__BuildingI18nClient<$Result.GetResult<Prisma.$BuildingI18nPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BuildingI18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingI18nCountArgs} args - Arguments to filter BuildingI18ns to count.
     * @example
     * // Count the number of BuildingI18ns
     * const count = await prisma.buildingI18n.count({
     *   where: {
     *     // ... the filter for the BuildingI18ns we want to count
     *   }
     * })
    **/
    count<T extends BuildingI18nCountArgs>(
      args?: Subset<T, BuildingI18nCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuildingI18nCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BuildingI18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingI18nAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuildingI18nAggregateArgs>(args: Subset<T, BuildingI18nAggregateArgs>): Prisma.PrismaPromise<GetBuildingI18nAggregateType<T>>

    /**
     * Group by BuildingI18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingI18nGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuildingI18nGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuildingI18nGroupByArgs['orderBy'] }
        : { orderBy?: BuildingI18nGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuildingI18nGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuildingI18nGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BuildingI18n model
   */
  readonly fields: BuildingI18nFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BuildingI18n.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuildingI18nClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    building<T extends BuildingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BuildingDefaultArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BuildingI18n model
   */
  interface BuildingI18nFieldRefs {
    readonly id: FieldRef<"BuildingI18n", 'String'>
    readonly buildingId: FieldRef<"BuildingI18n", 'String'>
    readonly language: FieldRef<"BuildingI18n", 'String'>
    readonly name: FieldRef<"BuildingI18n", 'String'>
    readonly description: FieldRef<"BuildingI18n", 'String'>
    readonly updatedAt: FieldRef<"BuildingI18n", 'DateTime'>
    readonly createdAt: FieldRef<"BuildingI18n", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BuildingI18n findUnique
   */
  export type BuildingI18nFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingI18n
     */
    select?: BuildingI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingI18n
     */
    omit?: BuildingI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingI18nInclude<ExtArgs> | null
    /**
     * Filter, which BuildingI18n to fetch.
     */
    where: BuildingI18nWhereUniqueInput
  }

  /**
   * BuildingI18n findUniqueOrThrow
   */
  export type BuildingI18nFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingI18n
     */
    select?: BuildingI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingI18n
     */
    omit?: BuildingI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingI18nInclude<ExtArgs> | null
    /**
     * Filter, which BuildingI18n to fetch.
     */
    where: BuildingI18nWhereUniqueInput
  }

  /**
   * BuildingI18n findFirst
   */
  export type BuildingI18nFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingI18n
     */
    select?: BuildingI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingI18n
     */
    omit?: BuildingI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingI18nInclude<ExtArgs> | null
    /**
     * Filter, which BuildingI18n to fetch.
     */
    where?: BuildingI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildingI18ns to fetch.
     */
    orderBy?: BuildingI18nOrderByWithRelationInput | BuildingI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuildingI18ns.
     */
    cursor?: BuildingI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildingI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildingI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuildingI18ns.
     */
    distinct?: BuildingI18nScalarFieldEnum | BuildingI18nScalarFieldEnum[]
  }

  /**
   * BuildingI18n findFirstOrThrow
   */
  export type BuildingI18nFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingI18n
     */
    select?: BuildingI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingI18n
     */
    omit?: BuildingI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingI18nInclude<ExtArgs> | null
    /**
     * Filter, which BuildingI18n to fetch.
     */
    where?: BuildingI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildingI18ns to fetch.
     */
    orderBy?: BuildingI18nOrderByWithRelationInput | BuildingI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuildingI18ns.
     */
    cursor?: BuildingI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildingI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildingI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuildingI18ns.
     */
    distinct?: BuildingI18nScalarFieldEnum | BuildingI18nScalarFieldEnum[]
  }

  /**
   * BuildingI18n findMany
   */
  export type BuildingI18nFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingI18n
     */
    select?: BuildingI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingI18n
     */
    omit?: BuildingI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingI18nInclude<ExtArgs> | null
    /**
     * Filter, which BuildingI18ns to fetch.
     */
    where?: BuildingI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildingI18ns to fetch.
     */
    orderBy?: BuildingI18nOrderByWithRelationInput | BuildingI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BuildingI18ns.
     */
    cursor?: BuildingI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildingI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildingI18ns.
     */
    skip?: number
    distinct?: BuildingI18nScalarFieldEnum | BuildingI18nScalarFieldEnum[]
  }

  /**
   * BuildingI18n create
   */
  export type BuildingI18nCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingI18n
     */
    select?: BuildingI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingI18n
     */
    omit?: BuildingI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingI18nInclude<ExtArgs> | null
    /**
     * The data needed to create a BuildingI18n.
     */
    data: XOR<BuildingI18nCreateInput, BuildingI18nUncheckedCreateInput>
  }

  /**
   * BuildingI18n createMany
   */
  export type BuildingI18nCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BuildingI18ns.
     */
    data: BuildingI18nCreateManyInput | BuildingI18nCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BuildingI18n createManyAndReturn
   */
  export type BuildingI18nCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingI18n
     */
    select?: BuildingI18nSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingI18n
     */
    omit?: BuildingI18nOmit<ExtArgs> | null
    /**
     * The data used to create many BuildingI18ns.
     */
    data: BuildingI18nCreateManyInput | BuildingI18nCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingI18nIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BuildingI18n update
   */
  export type BuildingI18nUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingI18n
     */
    select?: BuildingI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingI18n
     */
    omit?: BuildingI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingI18nInclude<ExtArgs> | null
    /**
     * The data needed to update a BuildingI18n.
     */
    data: XOR<BuildingI18nUpdateInput, BuildingI18nUncheckedUpdateInput>
    /**
     * Choose, which BuildingI18n to update.
     */
    where: BuildingI18nWhereUniqueInput
  }

  /**
   * BuildingI18n updateMany
   */
  export type BuildingI18nUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BuildingI18ns.
     */
    data: XOR<BuildingI18nUpdateManyMutationInput, BuildingI18nUncheckedUpdateManyInput>
    /**
     * Filter which BuildingI18ns to update
     */
    where?: BuildingI18nWhereInput
    /**
     * Limit how many BuildingI18ns to update.
     */
    limit?: number
  }

  /**
   * BuildingI18n updateManyAndReturn
   */
  export type BuildingI18nUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingI18n
     */
    select?: BuildingI18nSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingI18n
     */
    omit?: BuildingI18nOmit<ExtArgs> | null
    /**
     * The data used to update BuildingI18ns.
     */
    data: XOR<BuildingI18nUpdateManyMutationInput, BuildingI18nUncheckedUpdateManyInput>
    /**
     * Filter which BuildingI18ns to update
     */
    where?: BuildingI18nWhereInput
    /**
     * Limit how many BuildingI18ns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingI18nIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BuildingI18n upsert
   */
  export type BuildingI18nUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingI18n
     */
    select?: BuildingI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingI18n
     */
    omit?: BuildingI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingI18nInclude<ExtArgs> | null
    /**
     * The filter to search for the BuildingI18n to update in case it exists.
     */
    where: BuildingI18nWhereUniqueInput
    /**
     * In case the BuildingI18n found by the `where` argument doesn't exist, create a new BuildingI18n with this data.
     */
    create: XOR<BuildingI18nCreateInput, BuildingI18nUncheckedCreateInput>
    /**
     * In case the BuildingI18n was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuildingI18nUpdateInput, BuildingI18nUncheckedUpdateInput>
  }

  /**
   * BuildingI18n delete
   */
  export type BuildingI18nDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingI18n
     */
    select?: BuildingI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingI18n
     */
    omit?: BuildingI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingI18nInclude<ExtArgs> | null
    /**
     * Filter which BuildingI18n to delete.
     */
    where: BuildingI18nWhereUniqueInput
  }

  /**
   * BuildingI18n deleteMany
   */
  export type BuildingI18nDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuildingI18ns to delete
     */
    where?: BuildingI18nWhereInput
    /**
     * Limit how many BuildingI18ns to delete.
     */
    limit?: number
  }

  /**
   * BuildingI18n without action
   */
  export type BuildingI18nDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingI18n
     */
    select?: BuildingI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildingI18n
     */
    omit?: BuildingI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingI18nInclude<ExtArgs> | null
  }


  /**
   * Model StadiumInfo
   */

  export type AggregateStadiumInfo = {
    _count: StadiumInfoCountAggregateOutputType | null
    _avg: StadiumInfoAvgAggregateOutputType | null
    _sum: StadiumInfoSumAggregateOutputType | null
    _min: StadiumInfoMinAggregateOutputType | null
    _max: StadiumInfoMaxAggregateOutputType | null
  }

  export type StadiumInfoAvgAggregateOutputType = {
    capacity: number | null
  }

  export type StadiumInfoSumAggregateOutputType = {
    capacity: number | null
  }

  export type StadiumInfoMinAggregateOutputType = {
    id: string | null
    buildingId: string | null
    capacity: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type StadiumInfoMaxAggregateOutputType = {
    id: string | null
    buildingId: string | null
    capacity: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type StadiumInfoCountAggregateOutputType = {
    id: number
    buildingId: number
    capacity: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type StadiumInfoAvgAggregateInputType = {
    capacity?: true
  }

  export type StadiumInfoSumAggregateInputType = {
    capacity?: true
  }

  export type StadiumInfoMinAggregateInputType = {
    id?: true
    buildingId?: true
    capacity?: true
    updatedAt?: true
    createdAt?: true
  }

  export type StadiumInfoMaxAggregateInputType = {
    id?: true
    buildingId?: true
    capacity?: true
    updatedAt?: true
    createdAt?: true
  }

  export type StadiumInfoCountAggregateInputType = {
    id?: true
    buildingId?: true
    capacity?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type StadiumInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StadiumInfo to aggregate.
     */
    where?: StadiumInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StadiumInfos to fetch.
     */
    orderBy?: StadiumInfoOrderByWithRelationInput | StadiumInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StadiumInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StadiumInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StadiumInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StadiumInfos
    **/
    _count?: true | StadiumInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StadiumInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StadiumInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StadiumInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StadiumInfoMaxAggregateInputType
  }

  export type GetStadiumInfoAggregateType<T extends StadiumInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateStadiumInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStadiumInfo[P]>
      : GetScalarType<T[P], AggregateStadiumInfo[P]>
  }




  export type StadiumInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StadiumInfoWhereInput
    orderBy?: StadiumInfoOrderByWithAggregationInput | StadiumInfoOrderByWithAggregationInput[]
    by: StadiumInfoScalarFieldEnum[] | StadiumInfoScalarFieldEnum
    having?: StadiumInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StadiumInfoCountAggregateInputType | true
    _avg?: StadiumInfoAvgAggregateInputType
    _sum?: StadiumInfoSumAggregateInputType
    _min?: StadiumInfoMinAggregateInputType
    _max?: StadiumInfoMaxAggregateInputType
  }

  export type StadiumInfoGroupByOutputType = {
    id: string
    buildingId: string
    capacity: number
    updatedAt: Date
    createdAt: Date
    _count: StadiumInfoCountAggregateOutputType | null
    _avg: StadiumInfoAvgAggregateOutputType | null
    _sum: StadiumInfoSumAggregateOutputType | null
    _min: StadiumInfoMinAggregateOutputType | null
    _max: StadiumInfoMaxAggregateOutputType | null
  }

  type GetStadiumInfoGroupByPayload<T extends StadiumInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StadiumInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StadiumInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StadiumInfoGroupByOutputType[P]>
            : GetScalarType<T[P], StadiumInfoGroupByOutputType[P]>
        }
      >
    >


  export type StadiumInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingId?: boolean
    capacity?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stadiumInfo"]>

  export type StadiumInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingId?: boolean
    capacity?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stadiumInfo"]>

  export type StadiumInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingId?: boolean
    capacity?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stadiumInfo"]>

  export type StadiumInfoSelectScalar = {
    id?: boolean
    buildingId?: boolean
    capacity?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type StadiumInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "buildingId" | "capacity" | "updatedAt" | "createdAt", ExtArgs["result"]["stadiumInfo"]>
  export type StadiumInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }
  export type StadiumInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }
  export type StadiumInfoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }

  export type $StadiumInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StadiumInfo"
    objects: {
      building: Prisma.$BuildingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      buildingId: string
      capacity: number
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["stadiumInfo"]>
    composites: {}
  }

  type StadiumInfoGetPayload<S extends boolean | null | undefined | StadiumInfoDefaultArgs> = $Result.GetResult<Prisma.$StadiumInfoPayload, S>

  type StadiumInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StadiumInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StadiumInfoCountAggregateInputType | true
    }

  export interface StadiumInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StadiumInfo'], meta: { name: 'StadiumInfo' } }
    /**
     * Find zero or one StadiumInfo that matches the filter.
     * @param {StadiumInfoFindUniqueArgs} args - Arguments to find a StadiumInfo
     * @example
     * // Get one StadiumInfo
     * const stadiumInfo = await prisma.stadiumInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StadiumInfoFindUniqueArgs>(args: SelectSubset<T, StadiumInfoFindUniqueArgs<ExtArgs>>): Prisma__StadiumInfoClient<$Result.GetResult<Prisma.$StadiumInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StadiumInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StadiumInfoFindUniqueOrThrowArgs} args - Arguments to find a StadiumInfo
     * @example
     * // Get one StadiumInfo
     * const stadiumInfo = await prisma.stadiumInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StadiumInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, StadiumInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StadiumInfoClient<$Result.GetResult<Prisma.$StadiumInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StadiumInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumInfoFindFirstArgs} args - Arguments to find a StadiumInfo
     * @example
     * // Get one StadiumInfo
     * const stadiumInfo = await prisma.stadiumInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StadiumInfoFindFirstArgs>(args?: SelectSubset<T, StadiumInfoFindFirstArgs<ExtArgs>>): Prisma__StadiumInfoClient<$Result.GetResult<Prisma.$StadiumInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StadiumInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumInfoFindFirstOrThrowArgs} args - Arguments to find a StadiumInfo
     * @example
     * // Get one StadiumInfo
     * const stadiumInfo = await prisma.stadiumInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StadiumInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, StadiumInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__StadiumInfoClient<$Result.GetResult<Prisma.$StadiumInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StadiumInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StadiumInfos
     * const stadiumInfos = await prisma.stadiumInfo.findMany()
     * 
     * // Get first 10 StadiumInfos
     * const stadiumInfos = await prisma.stadiumInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stadiumInfoWithIdOnly = await prisma.stadiumInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StadiumInfoFindManyArgs>(args?: SelectSubset<T, StadiumInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StadiumInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StadiumInfo.
     * @param {StadiumInfoCreateArgs} args - Arguments to create a StadiumInfo.
     * @example
     * // Create one StadiumInfo
     * const StadiumInfo = await prisma.stadiumInfo.create({
     *   data: {
     *     // ... data to create a StadiumInfo
     *   }
     * })
     * 
     */
    create<T extends StadiumInfoCreateArgs>(args: SelectSubset<T, StadiumInfoCreateArgs<ExtArgs>>): Prisma__StadiumInfoClient<$Result.GetResult<Prisma.$StadiumInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StadiumInfos.
     * @param {StadiumInfoCreateManyArgs} args - Arguments to create many StadiumInfos.
     * @example
     * // Create many StadiumInfos
     * const stadiumInfo = await prisma.stadiumInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StadiumInfoCreateManyArgs>(args?: SelectSubset<T, StadiumInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StadiumInfos and returns the data saved in the database.
     * @param {StadiumInfoCreateManyAndReturnArgs} args - Arguments to create many StadiumInfos.
     * @example
     * // Create many StadiumInfos
     * const stadiumInfo = await prisma.stadiumInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StadiumInfos and only return the `id`
     * const stadiumInfoWithIdOnly = await prisma.stadiumInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StadiumInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, StadiumInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StadiumInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StadiumInfo.
     * @param {StadiumInfoDeleteArgs} args - Arguments to delete one StadiumInfo.
     * @example
     * // Delete one StadiumInfo
     * const StadiumInfo = await prisma.stadiumInfo.delete({
     *   where: {
     *     // ... filter to delete one StadiumInfo
     *   }
     * })
     * 
     */
    delete<T extends StadiumInfoDeleteArgs>(args: SelectSubset<T, StadiumInfoDeleteArgs<ExtArgs>>): Prisma__StadiumInfoClient<$Result.GetResult<Prisma.$StadiumInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StadiumInfo.
     * @param {StadiumInfoUpdateArgs} args - Arguments to update one StadiumInfo.
     * @example
     * // Update one StadiumInfo
     * const stadiumInfo = await prisma.stadiumInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StadiumInfoUpdateArgs>(args: SelectSubset<T, StadiumInfoUpdateArgs<ExtArgs>>): Prisma__StadiumInfoClient<$Result.GetResult<Prisma.$StadiumInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StadiumInfos.
     * @param {StadiumInfoDeleteManyArgs} args - Arguments to filter StadiumInfos to delete.
     * @example
     * // Delete a few StadiumInfos
     * const { count } = await prisma.stadiumInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StadiumInfoDeleteManyArgs>(args?: SelectSubset<T, StadiumInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StadiumInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StadiumInfos
     * const stadiumInfo = await prisma.stadiumInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StadiumInfoUpdateManyArgs>(args: SelectSubset<T, StadiumInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StadiumInfos and returns the data updated in the database.
     * @param {StadiumInfoUpdateManyAndReturnArgs} args - Arguments to update many StadiumInfos.
     * @example
     * // Update many StadiumInfos
     * const stadiumInfo = await prisma.stadiumInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StadiumInfos and only return the `id`
     * const stadiumInfoWithIdOnly = await prisma.stadiumInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StadiumInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, StadiumInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StadiumInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StadiumInfo.
     * @param {StadiumInfoUpsertArgs} args - Arguments to update or create a StadiumInfo.
     * @example
     * // Update or create a StadiumInfo
     * const stadiumInfo = await prisma.stadiumInfo.upsert({
     *   create: {
     *     // ... data to create a StadiumInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StadiumInfo we want to update
     *   }
     * })
     */
    upsert<T extends StadiumInfoUpsertArgs>(args: SelectSubset<T, StadiumInfoUpsertArgs<ExtArgs>>): Prisma__StadiumInfoClient<$Result.GetResult<Prisma.$StadiumInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StadiumInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumInfoCountArgs} args - Arguments to filter StadiumInfos to count.
     * @example
     * // Count the number of StadiumInfos
     * const count = await prisma.stadiumInfo.count({
     *   where: {
     *     // ... the filter for the StadiumInfos we want to count
     *   }
     * })
    **/
    count<T extends StadiumInfoCountArgs>(
      args?: Subset<T, StadiumInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StadiumInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StadiumInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StadiumInfoAggregateArgs>(args: Subset<T, StadiumInfoAggregateArgs>): Prisma.PrismaPromise<GetStadiumInfoAggregateType<T>>

    /**
     * Group by StadiumInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StadiumInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StadiumInfoGroupByArgs['orderBy'] }
        : { orderBy?: StadiumInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StadiumInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStadiumInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StadiumInfo model
   */
  readonly fields: StadiumInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StadiumInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StadiumInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    building<T extends BuildingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BuildingDefaultArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StadiumInfo model
   */
  interface StadiumInfoFieldRefs {
    readonly id: FieldRef<"StadiumInfo", 'String'>
    readonly buildingId: FieldRef<"StadiumInfo", 'String'>
    readonly capacity: FieldRef<"StadiumInfo", 'Int'>
    readonly updatedAt: FieldRef<"StadiumInfo", 'DateTime'>
    readonly createdAt: FieldRef<"StadiumInfo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StadiumInfo findUnique
   */
  export type StadiumInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumInfo
     */
    select?: StadiumInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StadiumInfo
     */
    omit?: StadiumInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInfoInclude<ExtArgs> | null
    /**
     * Filter, which StadiumInfo to fetch.
     */
    where: StadiumInfoWhereUniqueInput
  }

  /**
   * StadiumInfo findUniqueOrThrow
   */
  export type StadiumInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumInfo
     */
    select?: StadiumInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StadiumInfo
     */
    omit?: StadiumInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInfoInclude<ExtArgs> | null
    /**
     * Filter, which StadiumInfo to fetch.
     */
    where: StadiumInfoWhereUniqueInput
  }

  /**
   * StadiumInfo findFirst
   */
  export type StadiumInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumInfo
     */
    select?: StadiumInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StadiumInfo
     */
    omit?: StadiumInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInfoInclude<ExtArgs> | null
    /**
     * Filter, which StadiumInfo to fetch.
     */
    where?: StadiumInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StadiumInfos to fetch.
     */
    orderBy?: StadiumInfoOrderByWithRelationInput | StadiumInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StadiumInfos.
     */
    cursor?: StadiumInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StadiumInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StadiumInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StadiumInfos.
     */
    distinct?: StadiumInfoScalarFieldEnum | StadiumInfoScalarFieldEnum[]
  }

  /**
   * StadiumInfo findFirstOrThrow
   */
  export type StadiumInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumInfo
     */
    select?: StadiumInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StadiumInfo
     */
    omit?: StadiumInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInfoInclude<ExtArgs> | null
    /**
     * Filter, which StadiumInfo to fetch.
     */
    where?: StadiumInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StadiumInfos to fetch.
     */
    orderBy?: StadiumInfoOrderByWithRelationInput | StadiumInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StadiumInfos.
     */
    cursor?: StadiumInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StadiumInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StadiumInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StadiumInfos.
     */
    distinct?: StadiumInfoScalarFieldEnum | StadiumInfoScalarFieldEnum[]
  }

  /**
   * StadiumInfo findMany
   */
  export type StadiumInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumInfo
     */
    select?: StadiumInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StadiumInfo
     */
    omit?: StadiumInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInfoInclude<ExtArgs> | null
    /**
     * Filter, which StadiumInfos to fetch.
     */
    where?: StadiumInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StadiumInfos to fetch.
     */
    orderBy?: StadiumInfoOrderByWithRelationInput | StadiumInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StadiumInfos.
     */
    cursor?: StadiumInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StadiumInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StadiumInfos.
     */
    skip?: number
    distinct?: StadiumInfoScalarFieldEnum | StadiumInfoScalarFieldEnum[]
  }

  /**
   * StadiumInfo create
   */
  export type StadiumInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumInfo
     */
    select?: StadiumInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StadiumInfo
     */
    omit?: StadiumInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a StadiumInfo.
     */
    data: XOR<StadiumInfoCreateInput, StadiumInfoUncheckedCreateInput>
  }

  /**
   * StadiumInfo createMany
   */
  export type StadiumInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StadiumInfos.
     */
    data: StadiumInfoCreateManyInput | StadiumInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StadiumInfo createManyAndReturn
   */
  export type StadiumInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumInfo
     */
    select?: StadiumInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StadiumInfo
     */
    omit?: StadiumInfoOmit<ExtArgs> | null
    /**
     * The data used to create many StadiumInfos.
     */
    data: StadiumInfoCreateManyInput | StadiumInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StadiumInfo update
   */
  export type StadiumInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumInfo
     */
    select?: StadiumInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StadiumInfo
     */
    omit?: StadiumInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a StadiumInfo.
     */
    data: XOR<StadiumInfoUpdateInput, StadiumInfoUncheckedUpdateInput>
    /**
     * Choose, which StadiumInfo to update.
     */
    where: StadiumInfoWhereUniqueInput
  }

  /**
   * StadiumInfo updateMany
   */
  export type StadiumInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StadiumInfos.
     */
    data: XOR<StadiumInfoUpdateManyMutationInput, StadiumInfoUncheckedUpdateManyInput>
    /**
     * Filter which StadiumInfos to update
     */
    where?: StadiumInfoWhereInput
    /**
     * Limit how many StadiumInfos to update.
     */
    limit?: number
  }

  /**
   * StadiumInfo updateManyAndReturn
   */
  export type StadiumInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumInfo
     */
    select?: StadiumInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StadiumInfo
     */
    omit?: StadiumInfoOmit<ExtArgs> | null
    /**
     * The data used to update StadiumInfos.
     */
    data: XOR<StadiumInfoUpdateManyMutationInput, StadiumInfoUncheckedUpdateManyInput>
    /**
     * Filter which StadiumInfos to update
     */
    where?: StadiumInfoWhereInput
    /**
     * Limit how many StadiumInfos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInfoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StadiumInfo upsert
   */
  export type StadiumInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumInfo
     */
    select?: StadiumInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StadiumInfo
     */
    omit?: StadiumInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the StadiumInfo to update in case it exists.
     */
    where: StadiumInfoWhereUniqueInput
    /**
     * In case the StadiumInfo found by the `where` argument doesn't exist, create a new StadiumInfo with this data.
     */
    create: XOR<StadiumInfoCreateInput, StadiumInfoUncheckedCreateInput>
    /**
     * In case the StadiumInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StadiumInfoUpdateInput, StadiumInfoUncheckedUpdateInput>
  }

  /**
   * StadiumInfo delete
   */
  export type StadiumInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumInfo
     */
    select?: StadiumInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StadiumInfo
     */
    omit?: StadiumInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInfoInclude<ExtArgs> | null
    /**
     * Filter which StadiumInfo to delete.
     */
    where: StadiumInfoWhereUniqueInput
  }

  /**
   * StadiumInfo deleteMany
   */
  export type StadiumInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StadiumInfos to delete
     */
    where?: StadiumInfoWhereInput
    /**
     * Limit how many StadiumInfos to delete.
     */
    limit?: number
  }

  /**
   * StadiumInfo without action
   */
  export type StadiumInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumInfo
     */
    select?: StadiumInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StadiumInfo
     */
    omit?: StadiumInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInfoInclude<ExtArgs> | null
  }


  /**
   * Model Race
   */

  export type AggregateRace = {
    _count: RaceCountAggregateOutputType | null
    _min: RaceMinAggregateOutputType | null
    _max: RaceMaxAggregateOutputType | null
  }

  export type RaceMinAggregateOutputType = {
    id: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type RaceMaxAggregateOutputType = {
    id: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type RaceCountAggregateOutputType = {
    id: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type RaceMinAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
  }

  export type RaceMaxAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
  }

  export type RaceCountAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type RaceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Race to aggregate.
     */
    where?: RaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Races to fetch.
     */
    orderBy?: RaceOrderByWithRelationInput | RaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Races from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Races.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Races
    **/
    _count?: true | RaceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RaceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RaceMaxAggregateInputType
  }

  export type GetRaceAggregateType<T extends RaceAggregateArgs> = {
        [P in keyof T & keyof AggregateRace]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRace[P]>
      : GetScalarType<T[P], AggregateRace[P]>
  }




  export type RaceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RaceWhereInput
    orderBy?: RaceOrderByWithAggregationInput | RaceOrderByWithAggregationInput[]
    by: RaceScalarFieldEnum[] | RaceScalarFieldEnum
    having?: RaceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RaceCountAggregateInputType | true
    _min?: RaceMinAggregateInputType
    _max?: RaceMaxAggregateInputType
  }

  export type RaceGroupByOutputType = {
    id: string
    updatedAt: Date
    createdAt: Date
    _count: RaceCountAggregateOutputType | null
    _min: RaceMinAggregateOutputType | null
    _max: RaceMaxAggregateOutputType | null
  }

  type GetRaceGroupByPayload<T extends RaceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RaceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RaceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RaceGroupByOutputType[P]>
            : GetScalarType<T[P], RaceGroupByOutputType[P]>
        }
      >
    >


  export type RaceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    i18n?: boolean | Race$i18nArgs<ExtArgs>
    cultures?: boolean | Race$culturesArgs<ExtArgs>
    persons?: boolean | Race$personsArgs<ExtArgs>
    _count?: boolean | RaceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["race"]>

  export type RaceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["race"]>

  export type RaceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["race"]>

  export type RaceSelectScalar = {
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type RaceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "updatedAt" | "createdAt", ExtArgs["result"]["race"]>
  export type RaceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    i18n?: boolean | Race$i18nArgs<ExtArgs>
    cultures?: boolean | Race$culturesArgs<ExtArgs>
    persons?: boolean | Race$personsArgs<ExtArgs>
    _count?: boolean | RaceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RaceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RaceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RacePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Race"
    objects: {
      i18n: Prisma.$RaceI18nPayload<ExtArgs>[]
      cultures: Prisma.$CulturePayload<ExtArgs>[]
      persons: Prisma.$PersonPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["race"]>
    composites: {}
  }

  type RaceGetPayload<S extends boolean | null | undefined | RaceDefaultArgs> = $Result.GetResult<Prisma.$RacePayload, S>

  type RaceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RaceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RaceCountAggregateInputType | true
    }

  export interface RaceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Race'], meta: { name: 'Race' } }
    /**
     * Find zero or one Race that matches the filter.
     * @param {RaceFindUniqueArgs} args - Arguments to find a Race
     * @example
     * // Get one Race
     * const race = await prisma.race.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RaceFindUniqueArgs>(args: SelectSubset<T, RaceFindUniqueArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Race that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RaceFindUniqueOrThrowArgs} args - Arguments to find a Race
     * @example
     * // Get one Race
     * const race = await prisma.race.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RaceFindUniqueOrThrowArgs>(args: SelectSubset<T, RaceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Race that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceFindFirstArgs} args - Arguments to find a Race
     * @example
     * // Get one Race
     * const race = await prisma.race.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RaceFindFirstArgs>(args?: SelectSubset<T, RaceFindFirstArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Race that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceFindFirstOrThrowArgs} args - Arguments to find a Race
     * @example
     * // Get one Race
     * const race = await prisma.race.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RaceFindFirstOrThrowArgs>(args?: SelectSubset<T, RaceFindFirstOrThrowArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Races that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Races
     * const races = await prisma.race.findMany()
     * 
     * // Get first 10 Races
     * const races = await prisma.race.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const raceWithIdOnly = await prisma.race.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RaceFindManyArgs>(args?: SelectSubset<T, RaceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Race.
     * @param {RaceCreateArgs} args - Arguments to create a Race.
     * @example
     * // Create one Race
     * const Race = await prisma.race.create({
     *   data: {
     *     // ... data to create a Race
     *   }
     * })
     * 
     */
    create<T extends RaceCreateArgs>(args: SelectSubset<T, RaceCreateArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Races.
     * @param {RaceCreateManyArgs} args - Arguments to create many Races.
     * @example
     * // Create many Races
     * const race = await prisma.race.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RaceCreateManyArgs>(args?: SelectSubset<T, RaceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Races and returns the data saved in the database.
     * @param {RaceCreateManyAndReturnArgs} args - Arguments to create many Races.
     * @example
     * // Create many Races
     * const race = await prisma.race.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Races and only return the `id`
     * const raceWithIdOnly = await prisma.race.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RaceCreateManyAndReturnArgs>(args?: SelectSubset<T, RaceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Race.
     * @param {RaceDeleteArgs} args - Arguments to delete one Race.
     * @example
     * // Delete one Race
     * const Race = await prisma.race.delete({
     *   where: {
     *     // ... filter to delete one Race
     *   }
     * })
     * 
     */
    delete<T extends RaceDeleteArgs>(args: SelectSubset<T, RaceDeleteArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Race.
     * @param {RaceUpdateArgs} args - Arguments to update one Race.
     * @example
     * // Update one Race
     * const race = await prisma.race.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RaceUpdateArgs>(args: SelectSubset<T, RaceUpdateArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Races.
     * @param {RaceDeleteManyArgs} args - Arguments to filter Races to delete.
     * @example
     * // Delete a few Races
     * const { count } = await prisma.race.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RaceDeleteManyArgs>(args?: SelectSubset<T, RaceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Races.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Races
     * const race = await prisma.race.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RaceUpdateManyArgs>(args: SelectSubset<T, RaceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Races and returns the data updated in the database.
     * @param {RaceUpdateManyAndReturnArgs} args - Arguments to update many Races.
     * @example
     * // Update many Races
     * const race = await prisma.race.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Races and only return the `id`
     * const raceWithIdOnly = await prisma.race.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RaceUpdateManyAndReturnArgs>(args: SelectSubset<T, RaceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Race.
     * @param {RaceUpsertArgs} args - Arguments to update or create a Race.
     * @example
     * // Update or create a Race
     * const race = await prisma.race.upsert({
     *   create: {
     *     // ... data to create a Race
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Race we want to update
     *   }
     * })
     */
    upsert<T extends RaceUpsertArgs>(args: SelectSubset<T, RaceUpsertArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Races.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceCountArgs} args - Arguments to filter Races to count.
     * @example
     * // Count the number of Races
     * const count = await prisma.race.count({
     *   where: {
     *     // ... the filter for the Races we want to count
     *   }
     * })
    **/
    count<T extends RaceCountArgs>(
      args?: Subset<T, RaceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RaceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Race.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RaceAggregateArgs>(args: Subset<T, RaceAggregateArgs>): Prisma.PrismaPromise<GetRaceAggregateType<T>>

    /**
     * Group by Race.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RaceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RaceGroupByArgs['orderBy'] }
        : { orderBy?: RaceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Race model
   */
  readonly fields: RaceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Race.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RaceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    i18n<T extends Race$i18nArgs<ExtArgs> = {}>(args?: Subset<T, Race$i18nArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RaceI18nPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cultures<T extends Race$culturesArgs<ExtArgs> = {}>(args?: Subset<T, Race$culturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    persons<T extends Race$personsArgs<ExtArgs> = {}>(args?: Subset<T, Race$personsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Race model
   */
  interface RaceFieldRefs {
    readonly id: FieldRef<"Race", 'String'>
    readonly updatedAt: FieldRef<"Race", 'DateTime'>
    readonly createdAt: FieldRef<"Race", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Race findUnique
   */
  export type RaceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * Filter, which Race to fetch.
     */
    where: RaceWhereUniqueInput
  }

  /**
   * Race findUniqueOrThrow
   */
  export type RaceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * Filter, which Race to fetch.
     */
    where: RaceWhereUniqueInput
  }

  /**
   * Race findFirst
   */
  export type RaceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * Filter, which Race to fetch.
     */
    where?: RaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Races to fetch.
     */
    orderBy?: RaceOrderByWithRelationInput | RaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Races.
     */
    cursor?: RaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Races from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Races.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Races.
     */
    distinct?: RaceScalarFieldEnum | RaceScalarFieldEnum[]
  }

  /**
   * Race findFirstOrThrow
   */
  export type RaceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * Filter, which Race to fetch.
     */
    where?: RaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Races to fetch.
     */
    orderBy?: RaceOrderByWithRelationInput | RaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Races.
     */
    cursor?: RaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Races from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Races.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Races.
     */
    distinct?: RaceScalarFieldEnum | RaceScalarFieldEnum[]
  }

  /**
   * Race findMany
   */
  export type RaceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * Filter, which Races to fetch.
     */
    where?: RaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Races to fetch.
     */
    orderBy?: RaceOrderByWithRelationInput | RaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Races.
     */
    cursor?: RaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Races from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Races.
     */
    skip?: number
    distinct?: RaceScalarFieldEnum | RaceScalarFieldEnum[]
  }

  /**
   * Race create
   */
  export type RaceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * The data needed to create a Race.
     */
    data: XOR<RaceCreateInput, RaceUncheckedCreateInput>
  }

  /**
   * Race createMany
   */
  export type RaceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Races.
     */
    data: RaceCreateManyInput | RaceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Race createManyAndReturn
   */
  export type RaceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * The data used to create many Races.
     */
    data: RaceCreateManyInput | RaceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Race update
   */
  export type RaceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * The data needed to update a Race.
     */
    data: XOR<RaceUpdateInput, RaceUncheckedUpdateInput>
    /**
     * Choose, which Race to update.
     */
    where: RaceWhereUniqueInput
  }

  /**
   * Race updateMany
   */
  export type RaceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Races.
     */
    data: XOR<RaceUpdateManyMutationInput, RaceUncheckedUpdateManyInput>
    /**
     * Filter which Races to update
     */
    where?: RaceWhereInput
    /**
     * Limit how many Races to update.
     */
    limit?: number
  }

  /**
   * Race updateManyAndReturn
   */
  export type RaceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * The data used to update Races.
     */
    data: XOR<RaceUpdateManyMutationInput, RaceUncheckedUpdateManyInput>
    /**
     * Filter which Races to update
     */
    where?: RaceWhereInput
    /**
     * Limit how many Races to update.
     */
    limit?: number
  }

  /**
   * Race upsert
   */
  export type RaceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * The filter to search for the Race to update in case it exists.
     */
    where: RaceWhereUniqueInput
    /**
     * In case the Race found by the `where` argument doesn't exist, create a new Race with this data.
     */
    create: XOR<RaceCreateInput, RaceUncheckedCreateInput>
    /**
     * In case the Race was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RaceUpdateInput, RaceUncheckedUpdateInput>
  }

  /**
   * Race delete
   */
  export type RaceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * Filter which Race to delete.
     */
    where: RaceWhereUniqueInput
  }

  /**
   * Race deleteMany
   */
  export type RaceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Races to delete
     */
    where?: RaceWhereInput
    /**
     * Limit how many Races to delete.
     */
    limit?: number
  }

  /**
   * Race.i18n
   */
  export type Race$i18nArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceI18n
     */
    select?: RaceI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RaceI18n
     */
    omit?: RaceI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceI18nInclude<ExtArgs> | null
    where?: RaceI18nWhereInput
    orderBy?: RaceI18nOrderByWithRelationInput | RaceI18nOrderByWithRelationInput[]
    cursor?: RaceI18nWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RaceI18nScalarFieldEnum | RaceI18nScalarFieldEnum[]
  }

  /**
   * Race.cultures
   */
  export type Race$culturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Culture
     */
    select?: CultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Culture
     */
    omit?: CultureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureInclude<ExtArgs> | null
    where?: CultureWhereInput
    orderBy?: CultureOrderByWithRelationInput | CultureOrderByWithRelationInput[]
    cursor?: CultureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CultureScalarFieldEnum | CultureScalarFieldEnum[]
  }

  /**
   * Race.persons
   */
  export type Race$personsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    where?: PersonWhereInput
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    cursor?: PersonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Race without action
   */
  export type RaceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
  }


  /**
   * Model RaceI18n
   */

  export type AggregateRaceI18n = {
    _count: RaceI18nCountAggregateOutputType | null
    _min: RaceI18nMinAggregateOutputType | null
    _max: RaceI18nMaxAggregateOutputType | null
  }

  export type RaceI18nMinAggregateOutputType = {
    id: string | null
    raceId: string | null
    language: string | null
    name: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type RaceI18nMaxAggregateOutputType = {
    id: string | null
    raceId: string | null
    language: string | null
    name: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type RaceI18nCountAggregateOutputType = {
    id: number
    raceId: number
    language: number
    name: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type RaceI18nMinAggregateInputType = {
    id?: true
    raceId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
  }

  export type RaceI18nMaxAggregateInputType = {
    id?: true
    raceId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
  }

  export type RaceI18nCountAggregateInputType = {
    id?: true
    raceId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type RaceI18nAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RaceI18n to aggregate.
     */
    where?: RaceI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RaceI18ns to fetch.
     */
    orderBy?: RaceI18nOrderByWithRelationInput | RaceI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RaceI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RaceI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RaceI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RaceI18ns
    **/
    _count?: true | RaceI18nCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RaceI18nMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RaceI18nMaxAggregateInputType
  }

  export type GetRaceI18nAggregateType<T extends RaceI18nAggregateArgs> = {
        [P in keyof T & keyof AggregateRaceI18n]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRaceI18n[P]>
      : GetScalarType<T[P], AggregateRaceI18n[P]>
  }




  export type RaceI18nGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RaceI18nWhereInput
    orderBy?: RaceI18nOrderByWithAggregationInput | RaceI18nOrderByWithAggregationInput[]
    by: RaceI18nScalarFieldEnum[] | RaceI18nScalarFieldEnum
    having?: RaceI18nScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RaceI18nCountAggregateInputType | true
    _min?: RaceI18nMinAggregateInputType
    _max?: RaceI18nMaxAggregateInputType
  }

  export type RaceI18nGroupByOutputType = {
    id: string
    raceId: string
    language: string
    name: string
    updatedAt: Date
    createdAt: Date
    _count: RaceI18nCountAggregateOutputType | null
    _min: RaceI18nMinAggregateOutputType | null
    _max: RaceI18nMaxAggregateOutputType | null
  }

  type GetRaceI18nGroupByPayload<T extends RaceI18nGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RaceI18nGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RaceI18nGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RaceI18nGroupByOutputType[P]>
            : GetScalarType<T[P], RaceI18nGroupByOutputType[P]>
        }
      >
    >


  export type RaceI18nSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    raceId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["raceI18n"]>

  export type RaceI18nSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    raceId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["raceI18n"]>

  export type RaceI18nSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    raceId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["raceI18n"]>

  export type RaceI18nSelectScalar = {
    id?: boolean
    raceId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type RaceI18nOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "raceId" | "language" | "name" | "updatedAt" | "createdAt", ExtArgs["result"]["raceI18n"]>
  export type RaceI18nInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }
  export type RaceI18nIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }
  export type RaceI18nIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }

  export type $RaceI18nPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RaceI18n"
    objects: {
      race: Prisma.$RacePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      raceId: string
      language: string
      name: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["raceI18n"]>
    composites: {}
  }

  type RaceI18nGetPayload<S extends boolean | null | undefined | RaceI18nDefaultArgs> = $Result.GetResult<Prisma.$RaceI18nPayload, S>

  type RaceI18nCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RaceI18nFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RaceI18nCountAggregateInputType | true
    }

  export interface RaceI18nDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RaceI18n'], meta: { name: 'RaceI18n' } }
    /**
     * Find zero or one RaceI18n that matches the filter.
     * @param {RaceI18nFindUniqueArgs} args - Arguments to find a RaceI18n
     * @example
     * // Get one RaceI18n
     * const raceI18n = await prisma.raceI18n.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RaceI18nFindUniqueArgs>(args: SelectSubset<T, RaceI18nFindUniqueArgs<ExtArgs>>): Prisma__RaceI18nClient<$Result.GetResult<Prisma.$RaceI18nPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RaceI18n that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RaceI18nFindUniqueOrThrowArgs} args - Arguments to find a RaceI18n
     * @example
     * // Get one RaceI18n
     * const raceI18n = await prisma.raceI18n.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RaceI18nFindUniqueOrThrowArgs>(args: SelectSubset<T, RaceI18nFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RaceI18nClient<$Result.GetResult<Prisma.$RaceI18nPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RaceI18n that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceI18nFindFirstArgs} args - Arguments to find a RaceI18n
     * @example
     * // Get one RaceI18n
     * const raceI18n = await prisma.raceI18n.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RaceI18nFindFirstArgs>(args?: SelectSubset<T, RaceI18nFindFirstArgs<ExtArgs>>): Prisma__RaceI18nClient<$Result.GetResult<Prisma.$RaceI18nPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RaceI18n that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceI18nFindFirstOrThrowArgs} args - Arguments to find a RaceI18n
     * @example
     * // Get one RaceI18n
     * const raceI18n = await prisma.raceI18n.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RaceI18nFindFirstOrThrowArgs>(args?: SelectSubset<T, RaceI18nFindFirstOrThrowArgs<ExtArgs>>): Prisma__RaceI18nClient<$Result.GetResult<Prisma.$RaceI18nPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RaceI18ns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceI18nFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RaceI18ns
     * const raceI18ns = await prisma.raceI18n.findMany()
     * 
     * // Get first 10 RaceI18ns
     * const raceI18ns = await prisma.raceI18n.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const raceI18nWithIdOnly = await prisma.raceI18n.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RaceI18nFindManyArgs>(args?: SelectSubset<T, RaceI18nFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RaceI18nPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RaceI18n.
     * @param {RaceI18nCreateArgs} args - Arguments to create a RaceI18n.
     * @example
     * // Create one RaceI18n
     * const RaceI18n = await prisma.raceI18n.create({
     *   data: {
     *     // ... data to create a RaceI18n
     *   }
     * })
     * 
     */
    create<T extends RaceI18nCreateArgs>(args: SelectSubset<T, RaceI18nCreateArgs<ExtArgs>>): Prisma__RaceI18nClient<$Result.GetResult<Prisma.$RaceI18nPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RaceI18ns.
     * @param {RaceI18nCreateManyArgs} args - Arguments to create many RaceI18ns.
     * @example
     * // Create many RaceI18ns
     * const raceI18n = await prisma.raceI18n.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RaceI18nCreateManyArgs>(args?: SelectSubset<T, RaceI18nCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RaceI18ns and returns the data saved in the database.
     * @param {RaceI18nCreateManyAndReturnArgs} args - Arguments to create many RaceI18ns.
     * @example
     * // Create many RaceI18ns
     * const raceI18n = await prisma.raceI18n.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RaceI18ns and only return the `id`
     * const raceI18nWithIdOnly = await prisma.raceI18n.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RaceI18nCreateManyAndReturnArgs>(args?: SelectSubset<T, RaceI18nCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RaceI18nPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RaceI18n.
     * @param {RaceI18nDeleteArgs} args - Arguments to delete one RaceI18n.
     * @example
     * // Delete one RaceI18n
     * const RaceI18n = await prisma.raceI18n.delete({
     *   where: {
     *     // ... filter to delete one RaceI18n
     *   }
     * })
     * 
     */
    delete<T extends RaceI18nDeleteArgs>(args: SelectSubset<T, RaceI18nDeleteArgs<ExtArgs>>): Prisma__RaceI18nClient<$Result.GetResult<Prisma.$RaceI18nPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RaceI18n.
     * @param {RaceI18nUpdateArgs} args - Arguments to update one RaceI18n.
     * @example
     * // Update one RaceI18n
     * const raceI18n = await prisma.raceI18n.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RaceI18nUpdateArgs>(args: SelectSubset<T, RaceI18nUpdateArgs<ExtArgs>>): Prisma__RaceI18nClient<$Result.GetResult<Prisma.$RaceI18nPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RaceI18ns.
     * @param {RaceI18nDeleteManyArgs} args - Arguments to filter RaceI18ns to delete.
     * @example
     * // Delete a few RaceI18ns
     * const { count } = await prisma.raceI18n.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RaceI18nDeleteManyArgs>(args?: SelectSubset<T, RaceI18nDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RaceI18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceI18nUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RaceI18ns
     * const raceI18n = await prisma.raceI18n.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RaceI18nUpdateManyArgs>(args: SelectSubset<T, RaceI18nUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RaceI18ns and returns the data updated in the database.
     * @param {RaceI18nUpdateManyAndReturnArgs} args - Arguments to update many RaceI18ns.
     * @example
     * // Update many RaceI18ns
     * const raceI18n = await prisma.raceI18n.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RaceI18ns and only return the `id`
     * const raceI18nWithIdOnly = await prisma.raceI18n.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RaceI18nUpdateManyAndReturnArgs>(args: SelectSubset<T, RaceI18nUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RaceI18nPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RaceI18n.
     * @param {RaceI18nUpsertArgs} args - Arguments to update or create a RaceI18n.
     * @example
     * // Update or create a RaceI18n
     * const raceI18n = await prisma.raceI18n.upsert({
     *   create: {
     *     // ... data to create a RaceI18n
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RaceI18n we want to update
     *   }
     * })
     */
    upsert<T extends RaceI18nUpsertArgs>(args: SelectSubset<T, RaceI18nUpsertArgs<ExtArgs>>): Prisma__RaceI18nClient<$Result.GetResult<Prisma.$RaceI18nPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RaceI18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceI18nCountArgs} args - Arguments to filter RaceI18ns to count.
     * @example
     * // Count the number of RaceI18ns
     * const count = await prisma.raceI18n.count({
     *   where: {
     *     // ... the filter for the RaceI18ns we want to count
     *   }
     * })
    **/
    count<T extends RaceI18nCountArgs>(
      args?: Subset<T, RaceI18nCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RaceI18nCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RaceI18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceI18nAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RaceI18nAggregateArgs>(args: Subset<T, RaceI18nAggregateArgs>): Prisma.PrismaPromise<GetRaceI18nAggregateType<T>>

    /**
     * Group by RaceI18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceI18nGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RaceI18nGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RaceI18nGroupByArgs['orderBy'] }
        : { orderBy?: RaceI18nGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RaceI18nGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRaceI18nGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RaceI18n model
   */
  readonly fields: RaceI18nFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RaceI18n.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RaceI18nClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    race<T extends RaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RaceDefaultArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RaceI18n model
   */
  interface RaceI18nFieldRefs {
    readonly id: FieldRef<"RaceI18n", 'String'>
    readonly raceId: FieldRef<"RaceI18n", 'String'>
    readonly language: FieldRef<"RaceI18n", 'String'>
    readonly name: FieldRef<"RaceI18n", 'String'>
    readonly updatedAt: FieldRef<"RaceI18n", 'DateTime'>
    readonly createdAt: FieldRef<"RaceI18n", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RaceI18n findUnique
   */
  export type RaceI18nFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceI18n
     */
    select?: RaceI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RaceI18n
     */
    omit?: RaceI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceI18nInclude<ExtArgs> | null
    /**
     * Filter, which RaceI18n to fetch.
     */
    where: RaceI18nWhereUniqueInput
  }

  /**
   * RaceI18n findUniqueOrThrow
   */
  export type RaceI18nFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceI18n
     */
    select?: RaceI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RaceI18n
     */
    omit?: RaceI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceI18nInclude<ExtArgs> | null
    /**
     * Filter, which RaceI18n to fetch.
     */
    where: RaceI18nWhereUniqueInput
  }

  /**
   * RaceI18n findFirst
   */
  export type RaceI18nFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceI18n
     */
    select?: RaceI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RaceI18n
     */
    omit?: RaceI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceI18nInclude<ExtArgs> | null
    /**
     * Filter, which RaceI18n to fetch.
     */
    where?: RaceI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RaceI18ns to fetch.
     */
    orderBy?: RaceI18nOrderByWithRelationInput | RaceI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RaceI18ns.
     */
    cursor?: RaceI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RaceI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RaceI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RaceI18ns.
     */
    distinct?: RaceI18nScalarFieldEnum | RaceI18nScalarFieldEnum[]
  }

  /**
   * RaceI18n findFirstOrThrow
   */
  export type RaceI18nFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceI18n
     */
    select?: RaceI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RaceI18n
     */
    omit?: RaceI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceI18nInclude<ExtArgs> | null
    /**
     * Filter, which RaceI18n to fetch.
     */
    where?: RaceI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RaceI18ns to fetch.
     */
    orderBy?: RaceI18nOrderByWithRelationInput | RaceI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RaceI18ns.
     */
    cursor?: RaceI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RaceI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RaceI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RaceI18ns.
     */
    distinct?: RaceI18nScalarFieldEnum | RaceI18nScalarFieldEnum[]
  }

  /**
   * RaceI18n findMany
   */
  export type RaceI18nFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceI18n
     */
    select?: RaceI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RaceI18n
     */
    omit?: RaceI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceI18nInclude<ExtArgs> | null
    /**
     * Filter, which RaceI18ns to fetch.
     */
    where?: RaceI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RaceI18ns to fetch.
     */
    orderBy?: RaceI18nOrderByWithRelationInput | RaceI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RaceI18ns.
     */
    cursor?: RaceI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RaceI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RaceI18ns.
     */
    skip?: number
    distinct?: RaceI18nScalarFieldEnum | RaceI18nScalarFieldEnum[]
  }

  /**
   * RaceI18n create
   */
  export type RaceI18nCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceI18n
     */
    select?: RaceI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RaceI18n
     */
    omit?: RaceI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceI18nInclude<ExtArgs> | null
    /**
     * The data needed to create a RaceI18n.
     */
    data: XOR<RaceI18nCreateInput, RaceI18nUncheckedCreateInput>
  }

  /**
   * RaceI18n createMany
   */
  export type RaceI18nCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RaceI18ns.
     */
    data: RaceI18nCreateManyInput | RaceI18nCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RaceI18n createManyAndReturn
   */
  export type RaceI18nCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceI18n
     */
    select?: RaceI18nSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RaceI18n
     */
    omit?: RaceI18nOmit<ExtArgs> | null
    /**
     * The data used to create many RaceI18ns.
     */
    data: RaceI18nCreateManyInput | RaceI18nCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceI18nIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RaceI18n update
   */
  export type RaceI18nUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceI18n
     */
    select?: RaceI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RaceI18n
     */
    omit?: RaceI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceI18nInclude<ExtArgs> | null
    /**
     * The data needed to update a RaceI18n.
     */
    data: XOR<RaceI18nUpdateInput, RaceI18nUncheckedUpdateInput>
    /**
     * Choose, which RaceI18n to update.
     */
    where: RaceI18nWhereUniqueInput
  }

  /**
   * RaceI18n updateMany
   */
  export type RaceI18nUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RaceI18ns.
     */
    data: XOR<RaceI18nUpdateManyMutationInput, RaceI18nUncheckedUpdateManyInput>
    /**
     * Filter which RaceI18ns to update
     */
    where?: RaceI18nWhereInput
    /**
     * Limit how many RaceI18ns to update.
     */
    limit?: number
  }

  /**
   * RaceI18n updateManyAndReturn
   */
  export type RaceI18nUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceI18n
     */
    select?: RaceI18nSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RaceI18n
     */
    omit?: RaceI18nOmit<ExtArgs> | null
    /**
     * The data used to update RaceI18ns.
     */
    data: XOR<RaceI18nUpdateManyMutationInput, RaceI18nUncheckedUpdateManyInput>
    /**
     * Filter which RaceI18ns to update
     */
    where?: RaceI18nWhereInput
    /**
     * Limit how many RaceI18ns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceI18nIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RaceI18n upsert
   */
  export type RaceI18nUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceI18n
     */
    select?: RaceI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RaceI18n
     */
    omit?: RaceI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceI18nInclude<ExtArgs> | null
    /**
     * The filter to search for the RaceI18n to update in case it exists.
     */
    where: RaceI18nWhereUniqueInput
    /**
     * In case the RaceI18n found by the `where` argument doesn't exist, create a new RaceI18n with this data.
     */
    create: XOR<RaceI18nCreateInput, RaceI18nUncheckedCreateInput>
    /**
     * In case the RaceI18n was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RaceI18nUpdateInput, RaceI18nUncheckedUpdateInput>
  }

  /**
   * RaceI18n delete
   */
  export type RaceI18nDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceI18n
     */
    select?: RaceI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RaceI18n
     */
    omit?: RaceI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceI18nInclude<ExtArgs> | null
    /**
     * Filter which RaceI18n to delete.
     */
    where: RaceI18nWhereUniqueInput
  }

  /**
   * RaceI18n deleteMany
   */
  export type RaceI18nDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RaceI18ns to delete
     */
    where?: RaceI18nWhereInput
    /**
     * Limit how many RaceI18ns to delete.
     */
    limit?: number
  }

  /**
   * RaceI18n without action
   */
  export type RaceI18nDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceI18n
     */
    select?: RaceI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RaceI18n
     */
    omit?: RaceI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceI18nInclude<ExtArgs> | null
  }


  /**
   * Model Culture
   */

  export type AggregateCulture = {
    _count: CultureCountAggregateOutputType | null
    _min: CultureMinAggregateOutputType | null
    _max: CultureMaxAggregateOutputType | null
  }

  export type CultureMinAggregateOutputType = {
    id: string | null
    raceId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type CultureMaxAggregateOutputType = {
    id: string | null
    raceId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type CultureCountAggregateOutputType = {
    id: number
    raceId: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type CultureMinAggregateInputType = {
    id?: true
    raceId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type CultureMaxAggregateInputType = {
    id?: true
    raceId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type CultureCountAggregateInputType = {
    id?: true
    raceId?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type CultureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Culture to aggregate.
     */
    where?: CultureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cultures to fetch.
     */
    orderBy?: CultureOrderByWithRelationInput | CultureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CultureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cultures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cultures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cultures
    **/
    _count?: true | CultureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CultureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CultureMaxAggregateInputType
  }

  export type GetCultureAggregateType<T extends CultureAggregateArgs> = {
        [P in keyof T & keyof AggregateCulture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCulture[P]>
      : GetScalarType<T[P], AggregateCulture[P]>
  }




  export type CultureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CultureWhereInput
    orderBy?: CultureOrderByWithAggregationInput | CultureOrderByWithAggregationInput[]
    by: CultureScalarFieldEnum[] | CultureScalarFieldEnum
    having?: CultureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CultureCountAggregateInputType | true
    _min?: CultureMinAggregateInputType
    _max?: CultureMaxAggregateInputType
  }

  export type CultureGroupByOutputType = {
    id: string
    raceId: string
    updatedAt: Date
    createdAt: Date
    _count: CultureCountAggregateOutputType | null
    _min: CultureMinAggregateOutputType | null
    _max: CultureMaxAggregateOutputType | null
  }

  type GetCultureGroupByPayload<T extends CultureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CultureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CultureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CultureGroupByOutputType[P]>
            : GetScalarType<T[P], CultureGroupByOutputType[P]>
        }
      >
    >


  export type CultureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    raceId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    race?: boolean | RaceDefaultArgs<ExtArgs>
    i18n?: boolean | Culture$i18nArgs<ExtArgs>
    nameModels?: boolean | Culture$nameModelsArgs<ExtArgs>
    regionPopulations?: boolean | Culture$regionPopulationsArgs<ExtArgs>
    _count?: boolean | CultureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["culture"]>

  export type CultureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    raceId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["culture"]>

  export type CultureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    raceId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["culture"]>

  export type CultureSelectScalar = {
    id?: boolean
    raceId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type CultureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "raceId" | "updatedAt" | "createdAt", ExtArgs["result"]["culture"]>
  export type CultureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | RaceDefaultArgs<ExtArgs>
    i18n?: boolean | Culture$i18nArgs<ExtArgs>
    nameModels?: boolean | Culture$nameModelsArgs<ExtArgs>
    regionPopulations?: boolean | Culture$regionPopulationsArgs<ExtArgs>
    _count?: boolean | CultureCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CultureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }
  export type CultureIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }

  export type $CulturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Culture"
    objects: {
      race: Prisma.$RacePayload<ExtArgs>
      i18n: Prisma.$CultureI18nPayload<ExtArgs>[]
      nameModels: Prisma.$NameModelPayload<ExtArgs>[]
      regionPopulations: Prisma.$RegionPopulationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      raceId: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["culture"]>
    composites: {}
  }

  type CultureGetPayload<S extends boolean | null | undefined | CultureDefaultArgs> = $Result.GetResult<Prisma.$CulturePayload, S>

  type CultureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CultureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CultureCountAggregateInputType | true
    }

  export interface CultureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Culture'], meta: { name: 'Culture' } }
    /**
     * Find zero or one Culture that matches the filter.
     * @param {CultureFindUniqueArgs} args - Arguments to find a Culture
     * @example
     * // Get one Culture
     * const culture = await prisma.culture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CultureFindUniqueArgs>(args: SelectSubset<T, CultureFindUniqueArgs<ExtArgs>>): Prisma__CultureClient<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Culture that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CultureFindUniqueOrThrowArgs} args - Arguments to find a Culture
     * @example
     * // Get one Culture
     * const culture = await prisma.culture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CultureFindUniqueOrThrowArgs>(args: SelectSubset<T, CultureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CultureClient<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Culture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureFindFirstArgs} args - Arguments to find a Culture
     * @example
     * // Get one Culture
     * const culture = await prisma.culture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CultureFindFirstArgs>(args?: SelectSubset<T, CultureFindFirstArgs<ExtArgs>>): Prisma__CultureClient<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Culture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureFindFirstOrThrowArgs} args - Arguments to find a Culture
     * @example
     * // Get one Culture
     * const culture = await prisma.culture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CultureFindFirstOrThrowArgs>(args?: SelectSubset<T, CultureFindFirstOrThrowArgs<ExtArgs>>): Prisma__CultureClient<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cultures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cultures
     * const cultures = await prisma.culture.findMany()
     * 
     * // Get first 10 Cultures
     * const cultures = await prisma.culture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cultureWithIdOnly = await prisma.culture.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CultureFindManyArgs>(args?: SelectSubset<T, CultureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Culture.
     * @param {CultureCreateArgs} args - Arguments to create a Culture.
     * @example
     * // Create one Culture
     * const Culture = await prisma.culture.create({
     *   data: {
     *     // ... data to create a Culture
     *   }
     * })
     * 
     */
    create<T extends CultureCreateArgs>(args: SelectSubset<T, CultureCreateArgs<ExtArgs>>): Prisma__CultureClient<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cultures.
     * @param {CultureCreateManyArgs} args - Arguments to create many Cultures.
     * @example
     * // Create many Cultures
     * const culture = await prisma.culture.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CultureCreateManyArgs>(args?: SelectSubset<T, CultureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cultures and returns the data saved in the database.
     * @param {CultureCreateManyAndReturnArgs} args - Arguments to create many Cultures.
     * @example
     * // Create many Cultures
     * const culture = await prisma.culture.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cultures and only return the `id`
     * const cultureWithIdOnly = await prisma.culture.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CultureCreateManyAndReturnArgs>(args?: SelectSubset<T, CultureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Culture.
     * @param {CultureDeleteArgs} args - Arguments to delete one Culture.
     * @example
     * // Delete one Culture
     * const Culture = await prisma.culture.delete({
     *   where: {
     *     // ... filter to delete one Culture
     *   }
     * })
     * 
     */
    delete<T extends CultureDeleteArgs>(args: SelectSubset<T, CultureDeleteArgs<ExtArgs>>): Prisma__CultureClient<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Culture.
     * @param {CultureUpdateArgs} args - Arguments to update one Culture.
     * @example
     * // Update one Culture
     * const culture = await prisma.culture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CultureUpdateArgs>(args: SelectSubset<T, CultureUpdateArgs<ExtArgs>>): Prisma__CultureClient<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cultures.
     * @param {CultureDeleteManyArgs} args - Arguments to filter Cultures to delete.
     * @example
     * // Delete a few Cultures
     * const { count } = await prisma.culture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CultureDeleteManyArgs>(args?: SelectSubset<T, CultureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cultures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cultures
     * const culture = await prisma.culture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CultureUpdateManyArgs>(args: SelectSubset<T, CultureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cultures and returns the data updated in the database.
     * @param {CultureUpdateManyAndReturnArgs} args - Arguments to update many Cultures.
     * @example
     * // Update many Cultures
     * const culture = await prisma.culture.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cultures and only return the `id`
     * const cultureWithIdOnly = await prisma.culture.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CultureUpdateManyAndReturnArgs>(args: SelectSubset<T, CultureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Culture.
     * @param {CultureUpsertArgs} args - Arguments to update or create a Culture.
     * @example
     * // Update or create a Culture
     * const culture = await prisma.culture.upsert({
     *   create: {
     *     // ... data to create a Culture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Culture we want to update
     *   }
     * })
     */
    upsert<T extends CultureUpsertArgs>(args: SelectSubset<T, CultureUpsertArgs<ExtArgs>>): Prisma__CultureClient<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cultures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureCountArgs} args - Arguments to filter Cultures to count.
     * @example
     * // Count the number of Cultures
     * const count = await prisma.culture.count({
     *   where: {
     *     // ... the filter for the Cultures we want to count
     *   }
     * })
    **/
    count<T extends CultureCountArgs>(
      args?: Subset<T, CultureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CultureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Culture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CultureAggregateArgs>(args: Subset<T, CultureAggregateArgs>): Prisma.PrismaPromise<GetCultureAggregateType<T>>

    /**
     * Group by Culture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CultureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CultureGroupByArgs['orderBy'] }
        : { orderBy?: CultureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CultureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCultureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Culture model
   */
  readonly fields: CultureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Culture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CultureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    race<T extends RaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RaceDefaultArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    i18n<T extends Culture$i18nArgs<ExtArgs> = {}>(args?: Subset<T, Culture$i18nArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CultureI18nPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    nameModels<T extends Culture$nameModelsArgs<ExtArgs> = {}>(args?: Subset<T, Culture$nameModelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    regionPopulations<T extends Culture$regionPopulationsArgs<ExtArgs> = {}>(args?: Subset<T, Culture$regionPopulationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPopulationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Culture model
   */
  interface CultureFieldRefs {
    readonly id: FieldRef<"Culture", 'String'>
    readonly raceId: FieldRef<"Culture", 'String'>
    readonly updatedAt: FieldRef<"Culture", 'DateTime'>
    readonly createdAt: FieldRef<"Culture", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Culture findUnique
   */
  export type CultureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Culture
     */
    select?: CultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Culture
     */
    omit?: CultureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureInclude<ExtArgs> | null
    /**
     * Filter, which Culture to fetch.
     */
    where: CultureWhereUniqueInput
  }

  /**
   * Culture findUniqueOrThrow
   */
  export type CultureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Culture
     */
    select?: CultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Culture
     */
    omit?: CultureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureInclude<ExtArgs> | null
    /**
     * Filter, which Culture to fetch.
     */
    where: CultureWhereUniqueInput
  }

  /**
   * Culture findFirst
   */
  export type CultureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Culture
     */
    select?: CultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Culture
     */
    omit?: CultureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureInclude<ExtArgs> | null
    /**
     * Filter, which Culture to fetch.
     */
    where?: CultureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cultures to fetch.
     */
    orderBy?: CultureOrderByWithRelationInput | CultureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cultures.
     */
    cursor?: CultureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cultures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cultures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cultures.
     */
    distinct?: CultureScalarFieldEnum | CultureScalarFieldEnum[]
  }

  /**
   * Culture findFirstOrThrow
   */
  export type CultureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Culture
     */
    select?: CultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Culture
     */
    omit?: CultureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureInclude<ExtArgs> | null
    /**
     * Filter, which Culture to fetch.
     */
    where?: CultureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cultures to fetch.
     */
    orderBy?: CultureOrderByWithRelationInput | CultureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cultures.
     */
    cursor?: CultureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cultures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cultures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cultures.
     */
    distinct?: CultureScalarFieldEnum | CultureScalarFieldEnum[]
  }

  /**
   * Culture findMany
   */
  export type CultureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Culture
     */
    select?: CultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Culture
     */
    omit?: CultureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureInclude<ExtArgs> | null
    /**
     * Filter, which Cultures to fetch.
     */
    where?: CultureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cultures to fetch.
     */
    orderBy?: CultureOrderByWithRelationInput | CultureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cultures.
     */
    cursor?: CultureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cultures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cultures.
     */
    skip?: number
    distinct?: CultureScalarFieldEnum | CultureScalarFieldEnum[]
  }

  /**
   * Culture create
   */
  export type CultureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Culture
     */
    select?: CultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Culture
     */
    omit?: CultureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureInclude<ExtArgs> | null
    /**
     * The data needed to create a Culture.
     */
    data: XOR<CultureCreateInput, CultureUncheckedCreateInput>
  }

  /**
   * Culture createMany
   */
  export type CultureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cultures.
     */
    data: CultureCreateManyInput | CultureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Culture createManyAndReturn
   */
  export type CultureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Culture
     */
    select?: CultureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Culture
     */
    omit?: CultureOmit<ExtArgs> | null
    /**
     * The data used to create many Cultures.
     */
    data: CultureCreateManyInput | CultureCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Culture update
   */
  export type CultureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Culture
     */
    select?: CultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Culture
     */
    omit?: CultureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureInclude<ExtArgs> | null
    /**
     * The data needed to update a Culture.
     */
    data: XOR<CultureUpdateInput, CultureUncheckedUpdateInput>
    /**
     * Choose, which Culture to update.
     */
    where: CultureWhereUniqueInput
  }

  /**
   * Culture updateMany
   */
  export type CultureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cultures.
     */
    data: XOR<CultureUpdateManyMutationInput, CultureUncheckedUpdateManyInput>
    /**
     * Filter which Cultures to update
     */
    where?: CultureWhereInput
    /**
     * Limit how many Cultures to update.
     */
    limit?: number
  }

  /**
   * Culture updateManyAndReturn
   */
  export type CultureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Culture
     */
    select?: CultureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Culture
     */
    omit?: CultureOmit<ExtArgs> | null
    /**
     * The data used to update Cultures.
     */
    data: XOR<CultureUpdateManyMutationInput, CultureUncheckedUpdateManyInput>
    /**
     * Filter which Cultures to update
     */
    where?: CultureWhereInput
    /**
     * Limit how many Cultures to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Culture upsert
   */
  export type CultureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Culture
     */
    select?: CultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Culture
     */
    omit?: CultureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureInclude<ExtArgs> | null
    /**
     * The filter to search for the Culture to update in case it exists.
     */
    where: CultureWhereUniqueInput
    /**
     * In case the Culture found by the `where` argument doesn't exist, create a new Culture with this data.
     */
    create: XOR<CultureCreateInput, CultureUncheckedCreateInput>
    /**
     * In case the Culture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CultureUpdateInput, CultureUncheckedUpdateInput>
  }

  /**
   * Culture delete
   */
  export type CultureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Culture
     */
    select?: CultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Culture
     */
    omit?: CultureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureInclude<ExtArgs> | null
    /**
     * Filter which Culture to delete.
     */
    where: CultureWhereUniqueInput
  }

  /**
   * Culture deleteMany
   */
  export type CultureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cultures to delete
     */
    where?: CultureWhereInput
    /**
     * Limit how many Cultures to delete.
     */
    limit?: number
  }

  /**
   * Culture.i18n
   */
  export type Culture$i18nArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureI18n
     */
    select?: CultureI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CultureI18n
     */
    omit?: CultureI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureI18nInclude<ExtArgs> | null
    where?: CultureI18nWhereInput
    orderBy?: CultureI18nOrderByWithRelationInput | CultureI18nOrderByWithRelationInput[]
    cursor?: CultureI18nWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CultureI18nScalarFieldEnum | CultureI18nScalarFieldEnum[]
  }

  /**
   * Culture.nameModels
   */
  export type Culture$nameModelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameModel
     */
    select?: NameModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameModel
     */
    omit?: NameModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameModelInclude<ExtArgs> | null
    where?: NameModelWhereInput
    orderBy?: NameModelOrderByWithRelationInput | NameModelOrderByWithRelationInput[]
    cursor?: NameModelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NameModelScalarFieldEnum | NameModelScalarFieldEnum[]
  }

  /**
   * Culture.regionPopulations
   */
  export type Culture$regionPopulationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationInclude<ExtArgs> | null
    where?: RegionPopulationWhereInput
    orderBy?: RegionPopulationOrderByWithRelationInput | RegionPopulationOrderByWithRelationInput[]
    cursor?: RegionPopulationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegionPopulationScalarFieldEnum | RegionPopulationScalarFieldEnum[]
  }

  /**
   * Culture without action
   */
  export type CultureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Culture
     */
    select?: CultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Culture
     */
    omit?: CultureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureInclude<ExtArgs> | null
  }


  /**
   * Model CultureI18n
   */

  export type AggregateCultureI18n = {
    _count: CultureI18nCountAggregateOutputType | null
    _min: CultureI18nMinAggregateOutputType | null
    _max: CultureI18nMaxAggregateOutputType | null
  }

  export type CultureI18nMinAggregateOutputType = {
    id: string | null
    cultureId: string | null
    language: string | null
    name: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type CultureI18nMaxAggregateOutputType = {
    id: string | null
    cultureId: string | null
    language: string | null
    name: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type CultureI18nCountAggregateOutputType = {
    id: number
    cultureId: number
    language: number
    name: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type CultureI18nMinAggregateInputType = {
    id?: true
    cultureId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
  }

  export type CultureI18nMaxAggregateInputType = {
    id?: true
    cultureId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
  }

  export type CultureI18nCountAggregateInputType = {
    id?: true
    cultureId?: true
    language?: true
    name?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type CultureI18nAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CultureI18n to aggregate.
     */
    where?: CultureI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CultureI18ns to fetch.
     */
    orderBy?: CultureI18nOrderByWithRelationInput | CultureI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CultureI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CultureI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CultureI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CultureI18ns
    **/
    _count?: true | CultureI18nCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CultureI18nMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CultureI18nMaxAggregateInputType
  }

  export type GetCultureI18nAggregateType<T extends CultureI18nAggregateArgs> = {
        [P in keyof T & keyof AggregateCultureI18n]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCultureI18n[P]>
      : GetScalarType<T[P], AggregateCultureI18n[P]>
  }




  export type CultureI18nGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CultureI18nWhereInput
    orderBy?: CultureI18nOrderByWithAggregationInput | CultureI18nOrderByWithAggregationInput[]
    by: CultureI18nScalarFieldEnum[] | CultureI18nScalarFieldEnum
    having?: CultureI18nScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CultureI18nCountAggregateInputType | true
    _min?: CultureI18nMinAggregateInputType
    _max?: CultureI18nMaxAggregateInputType
  }

  export type CultureI18nGroupByOutputType = {
    id: string
    cultureId: string
    language: string
    name: string
    updatedAt: Date
    createdAt: Date
    _count: CultureI18nCountAggregateOutputType | null
    _min: CultureI18nMinAggregateOutputType | null
    _max: CultureI18nMaxAggregateOutputType | null
  }

  type GetCultureI18nGroupByPayload<T extends CultureI18nGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CultureI18nGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CultureI18nGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CultureI18nGroupByOutputType[P]>
            : GetScalarType<T[P], CultureI18nGroupByOutputType[P]>
        }
      >
    >


  export type CultureI18nSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cultureId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cultureI18n"]>

  export type CultureI18nSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cultureId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cultureI18n"]>

  export type CultureI18nSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cultureId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cultureI18n"]>

  export type CultureI18nSelectScalar = {
    id?: boolean
    cultureId?: boolean
    language?: boolean
    name?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type CultureI18nOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cultureId" | "language" | "name" | "updatedAt" | "createdAt", ExtArgs["result"]["cultureI18n"]>
  export type CultureI18nInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }
  export type CultureI18nIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }
  export type CultureI18nIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }

  export type $CultureI18nPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CultureI18n"
    objects: {
      culture: Prisma.$CulturePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cultureId: string
      language: string
      name: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["cultureI18n"]>
    composites: {}
  }

  type CultureI18nGetPayload<S extends boolean | null | undefined | CultureI18nDefaultArgs> = $Result.GetResult<Prisma.$CultureI18nPayload, S>

  type CultureI18nCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CultureI18nFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CultureI18nCountAggregateInputType | true
    }

  export interface CultureI18nDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CultureI18n'], meta: { name: 'CultureI18n' } }
    /**
     * Find zero or one CultureI18n that matches the filter.
     * @param {CultureI18nFindUniqueArgs} args - Arguments to find a CultureI18n
     * @example
     * // Get one CultureI18n
     * const cultureI18n = await prisma.cultureI18n.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CultureI18nFindUniqueArgs>(args: SelectSubset<T, CultureI18nFindUniqueArgs<ExtArgs>>): Prisma__CultureI18nClient<$Result.GetResult<Prisma.$CultureI18nPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CultureI18n that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CultureI18nFindUniqueOrThrowArgs} args - Arguments to find a CultureI18n
     * @example
     * // Get one CultureI18n
     * const cultureI18n = await prisma.cultureI18n.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CultureI18nFindUniqueOrThrowArgs>(args: SelectSubset<T, CultureI18nFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CultureI18nClient<$Result.GetResult<Prisma.$CultureI18nPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CultureI18n that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureI18nFindFirstArgs} args - Arguments to find a CultureI18n
     * @example
     * // Get one CultureI18n
     * const cultureI18n = await prisma.cultureI18n.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CultureI18nFindFirstArgs>(args?: SelectSubset<T, CultureI18nFindFirstArgs<ExtArgs>>): Prisma__CultureI18nClient<$Result.GetResult<Prisma.$CultureI18nPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CultureI18n that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureI18nFindFirstOrThrowArgs} args - Arguments to find a CultureI18n
     * @example
     * // Get one CultureI18n
     * const cultureI18n = await prisma.cultureI18n.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CultureI18nFindFirstOrThrowArgs>(args?: SelectSubset<T, CultureI18nFindFirstOrThrowArgs<ExtArgs>>): Prisma__CultureI18nClient<$Result.GetResult<Prisma.$CultureI18nPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CultureI18ns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureI18nFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CultureI18ns
     * const cultureI18ns = await prisma.cultureI18n.findMany()
     * 
     * // Get first 10 CultureI18ns
     * const cultureI18ns = await prisma.cultureI18n.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cultureI18nWithIdOnly = await prisma.cultureI18n.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CultureI18nFindManyArgs>(args?: SelectSubset<T, CultureI18nFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CultureI18nPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CultureI18n.
     * @param {CultureI18nCreateArgs} args - Arguments to create a CultureI18n.
     * @example
     * // Create one CultureI18n
     * const CultureI18n = await prisma.cultureI18n.create({
     *   data: {
     *     // ... data to create a CultureI18n
     *   }
     * })
     * 
     */
    create<T extends CultureI18nCreateArgs>(args: SelectSubset<T, CultureI18nCreateArgs<ExtArgs>>): Prisma__CultureI18nClient<$Result.GetResult<Prisma.$CultureI18nPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CultureI18ns.
     * @param {CultureI18nCreateManyArgs} args - Arguments to create many CultureI18ns.
     * @example
     * // Create many CultureI18ns
     * const cultureI18n = await prisma.cultureI18n.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CultureI18nCreateManyArgs>(args?: SelectSubset<T, CultureI18nCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CultureI18ns and returns the data saved in the database.
     * @param {CultureI18nCreateManyAndReturnArgs} args - Arguments to create many CultureI18ns.
     * @example
     * // Create many CultureI18ns
     * const cultureI18n = await prisma.cultureI18n.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CultureI18ns and only return the `id`
     * const cultureI18nWithIdOnly = await prisma.cultureI18n.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CultureI18nCreateManyAndReturnArgs>(args?: SelectSubset<T, CultureI18nCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CultureI18nPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CultureI18n.
     * @param {CultureI18nDeleteArgs} args - Arguments to delete one CultureI18n.
     * @example
     * // Delete one CultureI18n
     * const CultureI18n = await prisma.cultureI18n.delete({
     *   where: {
     *     // ... filter to delete one CultureI18n
     *   }
     * })
     * 
     */
    delete<T extends CultureI18nDeleteArgs>(args: SelectSubset<T, CultureI18nDeleteArgs<ExtArgs>>): Prisma__CultureI18nClient<$Result.GetResult<Prisma.$CultureI18nPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CultureI18n.
     * @param {CultureI18nUpdateArgs} args - Arguments to update one CultureI18n.
     * @example
     * // Update one CultureI18n
     * const cultureI18n = await prisma.cultureI18n.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CultureI18nUpdateArgs>(args: SelectSubset<T, CultureI18nUpdateArgs<ExtArgs>>): Prisma__CultureI18nClient<$Result.GetResult<Prisma.$CultureI18nPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CultureI18ns.
     * @param {CultureI18nDeleteManyArgs} args - Arguments to filter CultureI18ns to delete.
     * @example
     * // Delete a few CultureI18ns
     * const { count } = await prisma.cultureI18n.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CultureI18nDeleteManyArgs>(args?: SelectSubset<T, CultureI18nDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CultureI18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureI18nUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CultureI18ns
     * const cultureI18n = await prisma.cultureI18n.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CultureI18nUpdateManyArgs>(args: SelectSubset<T, CultureI18nUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CultureI18ns and returns the data updated in the database.
     * @param {CultureI18nUpdateManyAndReturnArgs} args - Arguments to update many CultureI18ns.
     * @example
     * // Update many CultureI18ns
     * const cultureI18n = await prisma.cultureI18n.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CultureI18ns and only return the `id`
     * const cultureI18nWithIdOnly = await prisma.cultureI18n.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CultureI18nUpdateManyAndReturnArgs>(args: SelectSubset<T, CultureI18nUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CultureI18nPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CultureI18n.
     * @param {CultureI18nUpsertArgs} args - Arguments to update or create a CultureI18n.
     * @example
     * // Update or create a CultureI18n
     * const cultureI18n = await prisma.cultureI18n.upsert({
     *   create: {
     *     // ... data to create a CultureI18n
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CultureI18n we want to update
     *   }
     * })
     */
    upsert<T extends CultureI18nUpsertArgs>(args: SelectSubset<T, CultureI18nUpsertArgs<ExtArgs>>): Prisma__CultureI18nClient<$Result.GetResult<Prisma.$CultureI18nPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CultureI18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureI18nCountArgs} args - Arguments to filter CultureI18ns to count.
     * @example
     * // Count the number of CultureI18ns
     * const count = await prisma.cultureI18n.count({
     *   where: {
     *     // ... the filter for the CultureI18ns we want to count
     *   }
     * })
    **/
    count<T extends CultureI18nCountArgs>(
      args?: Subset<T, CultureI18nCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CultureI18nCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CultureI18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureI18nAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CultureI18nAggregateArgs>(args: Subset<T, CultureI18nAggregateArgs>): Prisma.PrismaPromise<GetCultureI18nAggregateType<T>>

    /**
     * Group by CultureI18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CultureI18nGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CultureI18nGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CultureI18nGroupByArgs['orderBy'] }
        : { orderBy?: CultureI18nGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CultureI18nGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCultureI18nGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CultureI18n model
   */
  readonly fields: CultureI18nFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CultureI18n.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CultureI18nClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    culture<T extends CultureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CultureDefaultArgs<ExtArgs>>): Prisma__CultureClient<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CultureI18n model
   */
  interface CultureI18nFieldRefs {
    readonly id: FieldRef<"CultureI18n", 'String'>
    readonly cultureId: FieldRef<"CultureI18n", 'String'>
    readonly language: FieldRef<"CultureI18n", 'String'>
    readonly name: FieldRef<"CultureI18n", 'String'>
    readonly updatedAt: FieldRef<"CultureI18n", 'DateTime'>
    readonly createdAt: FieldRef<"CultureI18n", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CultureI18n findUnique
   */
  export type CultureI18nFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureI18n
     */
    select?: CultureI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CultureI18n
     */
    omit?: CultureI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureI18nInclude<ExtArgs> | null
    /**
     * Filter, which CultureI18n to fetch.
     */
    where: CultureI18nWhereUniqueInput
  }

  /**
   * CultureI18n findUniqueOrThrow
   */
  export type CultureI18nFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureI18n
     */
    select?: CultureI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CultureI18n
     */
    omit?: CultureI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureI18nInclude<ExtArgs> | null
    /**
     * Filter, which CultureI18n to fetch.
     */
    where: CultureI18nWhereUniqueInput
  }

  /**
   * CultureI18n findFirst
   */
  export type CultureI18nFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureI18n
     */
    select?: CultureI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CultureI18n
     */
    omit?: CultureI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureI18nInclude<ExtArgs> | null
    /**
     * Filter, which CultureI18n to fetch.
     */
    where?: CultureI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CultureI18ns to fetch.
     */
    orderBy?: CultureI18nOrderByWithRelationInput | CultureI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CultureI18ns.
     */
    cursor?: CultureI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CultureI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CultureI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CultureI18ns.
     */
    distinct?: CultureI18nScalarFieldEnum | CultureI18nScalarFieldEnum[]
  }

  /**
   * CultureI18n findFirstOrThrow
   */
  export type CultureI18nFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureI18n
     */
    select?: CultureI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CultureI18n
     */
    omit?: CultureI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureI18nInclude<ExtArgs> | null
    /**
     * Filter, which CultureI18n to fetch.
     */
    where?: CultureI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CultureI18ns to fetch.
     */
    orderBy?: CultureI18nOrderByWithRelationInput | CultureI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CultureI18ns.
     */
    cursor?: CultureI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CultureI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CultureI18ns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CultureI18ns.
     */
    distinct?: CultureI18nScalarFieldEnum | CultureI18nScalarFieldEnum[]
  }

  /**
   * CultureI18n findMany
   */
  export type CultureI18nFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureI18n
     */
    select?: CultureI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CultureI18n
     */
    omit?: CultureI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureI18nInclude<ExtArgs> | null
    /**
     * Filter, which CultureI18ns to fetch.
     */
    where?: CultureI18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CultureI18ns to fetch.
     */
    orderBy?: CultureI18nOrderByWithRelationInput | CultureI18nOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CultureI18ns.
     */
    cursor?: CultureI18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CultureI18ns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CultureI18ns.
     */
    skip?: number
    distinct?: CultureI18nScalarFieldEnum | CultureI18nScalarFieldEnum[]
  }

  /**
   * CultureI18n create
   */
  export type CultureI18nCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureI18n
     */
    select?: CultureI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CultureI18n
     */
    omit?: CultureI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureI18nInclude<ExtArgs> | null
    /**
     * The data needed to create a CultureI18n.
     */
    data: XOR<CultureI18nCreateInput, CultureI18nUncheckedCreateInput>
  }

  /**
   * CultureI18n createMany
   */
  export type CultureI18nCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CultureI18ns.
     */
    data: CultureI18nCreateManyInput | CultureI18nCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CultureI18n createManyAndReturn
   */
  export type CultureI18nCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureI18n
     */
    select?: CultureI18nSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CultureI18n
     */
    omit?: CultureI18nOmit<ExtArgs> | null
    /**
     * The data used to create many CultureI18ns.
     */
    data: CultureI18nCreateManyInput | CultureI18nCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureI18nIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CultureI18n update
   */
  export type CultureI18nUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureI18n
     */
    select?: CultureI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CultureI18n
     */
    omit?: CultureI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureI18nInclude<ExtArgs> | null
    /**
     * The data needed to update a CultureI18n.
     */
    data: XOR<CultureI18nUpdateInput, CultureI18nUncheckedUpdateInput>
    /**
     * Choose, which CultureI18n to update.
     */
    where: CultureI18nWhereUniqueInput
  }

  /**
   * CultureI18n updateMany
   */
  export type CultureI18nUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CultureI18ns.
     */
    data: XOR<CultureI18nUpdateManyMutationInput, CultureI18nUncheckedUpdateManyInput>
    /**
     * Filter which CultureI18ns to update
     */
    where?: CultureI18nWhereInput
    /**
     * Limit how many CultureI18ns to update.
     */
    limit?: number
  }

  /**
   * CultureI18n updateManyAndReturn
   */
  export type CultureI18nUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureI18n
     */
    select?: CultureI18nSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CultureI18n
     */
    omit?: CultureI18nOmit<ExtArgs> | null
    /**
     * The data used to update CultureI18ns.
     */
    data: XOR<CultureI18nUpdateManyMutationInput, CultureI18nUncheckedUpdateManyInput>
    /**
     * Filter which CultureI18ns to update
     */
    where?: CultureI18nWhereInput
    /**
     * Limit how many CultureI18ns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureI18nIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CultureI18n upsert
   */
  export type CultureI18nUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureI18n
     */
    select?: CultureI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CultureI18n
     */
    omit?: CultureI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureI18nInclude<ExtArgs> | null
    /**
     * The filter to search for the CultureI18n to update in case it exists.
     */
    where: CultureI18nWhereUniqueInput
    /**
     * In case the CultureI18n found by the `where` argument doesn't exist, create a new CultureI18n with this data.
     */
    create: XOR<CultureI18nCreateInput, CultureI18nUncheckedCreateInput>
    /**
     * In case the CultureI18n was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CultureI18nUpdateInput, CultureI18nUncheckedUpdateInput>
  }

  /**
   * CultureI18n delete
   */
  export type CultureI18nDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureI18n
     */
    select?: CultureI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CultureI18n
     */
    omit?: CultureI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureI18nInclude<ExtArgs> | null
    /**
     * Filter which CultureI18n to delete.
     */
    where: CultureI18nWhereUniqueInput
  }

  /**
   * CultureI18n deleteMany
   */
  export type CultureI18nDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CultureI18ns to delete
     */
    where?: CultureI18nWhereInput
    /**
     * Limit how many CultureI18ns to delete.
     */
    limit?: number
  }

  /**
   * CultureI18n without action
   */
  export type CultureI18nDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CultureI18n
     */
    select?: CultureI18nSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CultureI18n
     */
    omit?: CultureI18nOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CultureI18nInclude<ExtArgs> | null
  }


  /**
   * Model RegionPopulation
   */

  export type AggregateRegionPopulation = {
    _count: RegionPopulationCountAggregateOutputType | null
    _avg: RegionPopulationAvgAggregateOutputType | null
    _sum: RegionPopulationSumAggregateOutputType | null
    _min: RegionPopulationMinAggregateOutputType | null
    _max: RegionPopulationMaxAggregateOutputType | null
  }

  export type RegionPopulationAvgAggregateOutputType = {
    percentage: number | null
  }

  export type RegionPopulationSumAggregateOutputType = {
    percentage: number | null
  }

  export type RegionPopulationMinAggregateOutputType = {
    id: string | null
    regionId: string | null
    cultureId: string | null
    percentage: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type RegionPopulationMaxAggregateOutputType = {
    id: string | null
    regionId: string | null
    cultureId: string | null
    percentage: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type RegionPopulationCountAggregateOutputType = {
    id: number
    regionId: number
    cultureId: number
    percentage: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type RegionPopulationAvgAggregateInputType = {
    percentage?: true
  }

  export type RegionPopulationSumAggregateInputType = {
    percentage?: true
  }

  export type RegionPopulationMinAggregateInputType = {
    id?: true
    regionId?: true
    cultureId?: true
    percentage?: true
    updatedAt?: true
    createdAt?: true
  }

  export type RegionPopulationMaxAggregateInputType = {
    id?: true
    regionId?: true
    cultureId?: true
    percentage?: true
    updatedAt?: true
    createdAt?: true
  }

  export type RegionPopulationCountAggregateInputType = {
    id?: true
    regionId?: true
    cultureId?: true
    percentage?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type RegionPopulationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegionPopulation to aggregate.
     */
    where?: RegionPopulationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegionPopulations to fetch.
     */
    orderBy?: RegionPopulationOrderByWithRelationInput | RegionPopulationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionPopulationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegionPopulations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegionPopulations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RegionPopulations
    **/
    _count?: true | RegionPopulationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegionPopulationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegionPopulationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionPopulationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionPopulationMaxAggregateInputType
  }

  export type GetRegionPopulationAggregateType<T extends RegionPopulationAggregateArgs> = {
        [P in keyof T & keyof AggregateRegionPopulation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegionPopulation[P]>
      : GetScalarType<T[P], AggregateRegionPopulation[P]>
  }




  export type RegionPopulationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionPopulationWhereInput
    orderBy?: RegionPopulationOrderByWithAggregationInput | RegionPopulationOrderByWithAggregationInput[]
    by: RegionPopulationScalarFieldEnum[] | RegionPopulationScalarFieldEnum
    having?: RegionPopulationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionPopulationCountAggregateInputType | true
    _avg?: RegionPopulationAvgAggregateInputType
    _sum?: RegionPopulationSumAggregateInputType
    _min?: RegionPopulationMinAggregateInputType
    _max?: RegionPopulationMaxAggregateInputType
  }

  export type RegionPopulationGroupByOutputType = {
    id: string
    regionId: string
    cultureId: string
    percentage: number
    updatedAt: Date
    createdAt: Date
    _count: RegionPopulationCountAggregateOutputType | null
    _avg: RegionPopulationAvgAggregateOutputType | null
    _sum: RegionPopulationSumAggregateOutputType | null
    _min: RegionPopulationMinAggregateOutputType | null
    _max: RegionPopulationMaxAggregateOutputType | null
  }

  type GetRegionPopulationGroupByPayload<T extends RegionPopulationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionPopulationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionPopulationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionPopulationGroupByOutputType[P]>
            : GetScalarType<T[P], RegionPopulationGroupByOutputType[P]>
        }
      >
    >


  export type RegionPopulationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    regionId?: boolean
    cultureId?: boolean
    percentage?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["regionPopulation"]>

  export type RegionPopulationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    regionId?: boolean
    cultureId?: boolean
    percentage?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["regionPopulation"]>

  export type RegionPopulationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    regionId?: boolean
    cultureId?: boolean
    percentage?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["regionPopulation"]>

  export type RegionPopulationSelectScalar = {
    id?: boolean
    regionId?: boolean
    cultureId?: boolean
    percentage?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type RegionPopulationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "regionId" | "cultureId" | "percentage" | "updatedAt" | "createdAt", ExtArgs["result"]["regionPopulation"]>
  export type RegionPopulationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }
  export type RegionPopulationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }
  export type RegionPopulationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }

  export type $RegionPopulationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RegionPopulation"
    objects: {
      region: Prisma.$RegionPayload<ExtArgs>
      culture: Prisma.$CulturePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      regionId: string
      cultureId: string
      percentage: number
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["regionPopulation"]>
    composites: {}
  }

  type RegionPopulationGetPayload<S extends boolean | null | undefined | RegionPopulationDefaultArgs> = $Result.GetResult<Prisma.$RegionPopulationPayload, S>

  type RegionPopulationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegionPopulationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegionPopulationCountAggregateInputType | true
    }

  export interface RegionPopulationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RegionPopulation'], meta: { name: 'RegionPopulation' } }
    /**
     * Find zero or one RegionPopulation that matches the filter.
     * @param {RegionPopulationFindUniqueArgs} args - Arguments to find a RegionPopulation
     * @example
     * // Get one RegionPopulation
     * const regionPopulation = await prisma.regionPopulation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionPopulationFindUniqueArgs>(args: SelectSubset<T, RegionPopulationFindUniqueArgs<ExtArgs>>): Prisma__RegionPopulationClient<$Result.GetResult<Prisma.$RegionPopulationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RegionPopulation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegionPopulationFindUniqueOrThrowArgs} args - Arguments to find a RegionPopulation
     * @example
     * // Get one RegionPopulation
     * const regionPopulation = await prisma.regionPopulation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionPopulationFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionPopulationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionPopulationClient<$Result.GetResult<Prisma.$RegionPopulationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RegionPopulation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionPopulationFindFirstArgs} args - Arguments to find a RegionPopulation
     * @example
     * // Get one RegionPopulation
     * const regionPopulation = await prisma.regionPopulation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionPopulationFindFirstArgs>(args?: SelectSubset<T, RegionPopulationFindFirstArgs<ExtArgs>>): Prisma__RegionPopulationClient<$Result.GetResult<Prisma.$RegionPopulationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RegionPopulation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionPopulationFindFirstOrThrowArgs} args - Arguments to find a RegionPopulation
     * @example
     * // Get one RegionPopulation
     * const regionPopulation = await prisma.regionPopulation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionPopulationFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionPopulationFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionPopulationClient<$Result.GetResult<Prisma.$RegionPopulationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RegionPopulations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionPopulationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RegionPopulations
     * const regionPopulations = await prisma.regionPopulation.findMany()
     * 
     * // Get first 10 RegionPopulations
     * const regionPopulations = await prisma.regionPopulation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionPopulationWithIdOnly = await prisma.regionPopulation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegionPopulationFindManyArgs>(args?: SelectSubset<T, RegionPopulationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPopulationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RegionPopulation.
     * @param {RegionPopulationCreateArgs} args - Arguments to create a RegionPopulation.
     * @example
     * // Create one RegionPopulation
     * const RegionPopulation = await prisma.regionPopulation.create({
     *   data: {
     *     // ... data to create a RegionPopulation
     *   }
     * })
     * 
     */
    create<T extends RegionPopulationCreateArgs>(args: SelectSubset<T, RegionPopulationCreateArgs<ExtArgs>>): Prisma__RegionPopulationClient<$Result.GetResult<Prisma.$RegionPopulationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RegionPopulations.
     * @param {RegionPopulationCreateManyArgs} args - Arguments to create many RegionPopulations.
     * @example
     * // Create many RegionPopulations
     * const regionPopulation = await prisma.regionPopulation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionPopulationCreateManyArgs>(args?: SelectSubset<T, RegionPopulationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RegionPopulations and returns the data saved in the database.
     * @param {RegionPopulationCreateManyAndReturnArgs} args - Arguments to create many RegionPopulations.
     * @example
     * // Create many RegionPopulations
     * const regionPopulation = await prisma.regionPopulation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RegionPopulations and only return the `id`
     * const regionPopulationWithIdOnly = await prisma.regionPopulation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegionPopulationCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionPopulationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPopulationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RegionPopulation.
     * @param {RegionPopulationDeleteArgs} args - Arguments to delete one RegionPopulation.
     * @example
     * // Delete one RegionPopulation
     * const RegionPopulation = await prisma.regionPopulation.delete({
     *   where: {
     *     // ... filter to delete one RegionPopulation
     *   }
     * })
     * 
     */
    delete<T extends RegionPopulationDeleteArgs>(args: SelectSubset<T, RegionPopulationDeleteArgs<ExtArgs>>): Prisma__RegionPopulationClient<$Result.GetResult<Prisma.$RegionPopulationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RegionPopulation.
     * @param {RegionPopulationUpdateArgs} args - Arguments to update one RegionPopulation.
     * @example
     * // Update one RegionPopulation
     * const regionPopulation = await prisma.regionPopulation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionPopulationUpdateArgs>(args: SelectSubset<T, RegionPopulationUpdateArgs<ExtArgs>>): Prisma__RegionPopulationClient<$Result.GetResult<Prisma.$RegionPopulationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RegionPopulations.
     * @param {RegionPopulationDeleteManyArgs} args - Arguments to filter RegionPopulations to delete.
     * @example
     * // Delete a few RegionPopulations
     * const { count } = await prisma.regionPopulation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionPopulationDeleteManyArgs>(args?: SelectSubset<T, RegionPopulationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegionPopulations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionPopulationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RegionPopulations
     * const regionPopulation = await prisma.regionPopulation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionPopulationUpdateManyArgs>(args: SelectSubset<T, RegionPopulationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegionPopulations and returns the data updated in the database.
     * @param {RegionPopulationUpdateManyAndReturnArgs} args - Arguments to update many RegionPopulations.
     * @example
     * // Update many RegionPopulations
     * const regionPopulation = await prisma.regionPopulation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RegionPopulations and only return the `id`
     * const regionPopulationWithIdOnly = await prisma.regionPopulation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegionPopulationUpdateManyAndReturnArgs>(args: SelectSubset<T, RegionPopulationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPopulationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RegionPopulation.
     * @param {RegionPopulationUpsertArgs} args - Arguments to update or create a RegionPopulation.
     * @example
     * // Update or create a RegionPopulation
     * const regionPopulation = await prisma.regionPopulation.upsert({
     *   create: {
     *     // ... data to create a RegionPopulation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RegionPopulation we want to update
     *   }
     * })
     */
    upsert<T extends RegionPopulationUpsertArgs>(args: SelectSubset<T, RegionPopulationUpsertArgs<ExtArgs>>): Prisma__RegionPopulationClient<$Result.GetResult<Prisma.$RegionPopulationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RegionPopulations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionPopulationCountArgs} args - Arguments to filter RegionPopulations to count.
     * @example
     * // Count the number of RegionPopulations
     * const count = await prisma.regionPopulation.count({
     *   where: {
     *     // ... the filter for the RegionPopulations we want to count
     *   }
     * })
    **/
    count<T extends RegionPopulationCountArgs>(
      args?: Subset<T, RegionPopulationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionPopulationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RegionPopulation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionPopulationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionPopulationAggregateArgs>(args: Subset<T, RegionPopulationAggregateArgs>): Prisma.PrismaPromise<GetRegionPopulationAggregateType<T>>

    /**
     * Group by RegionPopulation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionPopulationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionPopulationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionPopulationGroupByArgs['orderBy'] }
        : { orderBy?: RegionPopulationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionPopulationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionPopulationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RegionPopulation model
   */
  readonly fields: RegionPopulationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RegionPopulation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionPopulationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    region<T extends RegionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegionDefaultArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    culture<T extends CultureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CultureDefaultArgs<ExtArgs>>): Prisma__CultureClient<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RegionPopulation model
   */
  interface RegionPopulationFieldRefs {
    readonly id: FieldRef<"RegionPopulation", 'String'>
    readonly regionId: FieldRef<"RegionPopulation", 'String'>
    readonly cultureId: FieldRef<"RegionPopulation", 'String'>
    readonly percentage: FieldRef<"RegionPopulation", 'Int'>
    readonly updatedAt: FieldRef<"RegionPopulation", 'DateTime'>
    readonly createdAt: FieldRef<"RegionPopulation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RegionPopulation findUnique
   */
  export type RegionPopulationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationInclude<ExtArgs> | null
    /**
     * Filter, which RegionPopulation to fetch.
     */
    where: RegionPopulationWhereUniqueInput
  }

  /**
   * RegionPopulation findUniqueOrThrow
   */
  export type RegionPopulationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationInclude<ExtArgs> | null
    /**
     * Filter, which RegionPopulation to fetch.
     */
    where: RegionPopulationWhereUniqueInput
  }

  /**
   * RegionPopulation findFirst
   */
  export type RegionPopulationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationInclude<ExtArgs> | null
    /**
     * Filter, which RegionPopulation to fetch.
     */
    where?: RegionPopulationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegionPopulations to fetch.
     */
    orderBy?: RegionPopulationOrderByWithRelationInput | RegionPopulationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegionPopulations.
     */
    cursor?: RegionPopulationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegionPopulations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegionPopulations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegionPopulations.
     */
    distinct?: RegionPopulationScalarFieldEnum | RegionPopulationScalarFieldEnum[]
  }

  /**
   * RegionPopulation findFirstOrThrow
   */
  export type RegionPopulationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationInclude<ExtArgs> | null
    /**
     * Filter, which RegionPopulation to fetch.
     */
    where?: RegionPopulationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegionPopulations to fetch.
     */
    orderBy?: RegionPopulationOrderByWithRelationInput | RegionPopulationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegionPopulations.
     */
    cursor?: RegionPopulationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegionPopulations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegionPopulations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegionPopulations.
     */
    distinct?: RegionPopulationScalarFieldEnum | RegionPopulationScalarFieldEnum[]
  }

  /**
   * RegionPopulation findMany
   */
  export type RegionPopulationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationInclude<ExtArgs> | null
    /**
     * Filter, which RegionPopulations to fetch.
     */
    where?: RegionPopulationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegionPopulations to fetch.
     */
    orderBy?: RegionPopulationOrderByWithRelationInput | RegionPopulationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RegionPopulations.
     */
    cursor?: RegionPopulationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegionPopulations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegionPopulations.
     */
    skip?: number
    distinct?: RegionPopulationScalarFieldEnum | RegionPopulationScalarFieldEnum[]
  }

  /**
   * RegionPopulation create
   */
  export type RegionPopulationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationInclude<ExtArgs> | null
    /**
     * The data needed to create a RegionPopulation.
     */
    data: XOR<RegionPopulationCreateInput, RegionPopulationUncheckedCreateInput>
  }

  /**
   * RegionPopulation createMany
   */
  export type RegionPopulationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RegionPopulations.
     */
    data: RegionPopulationCreateManyInput | RegionPopulationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RegionPopulation createManyAndReturn
   */
  export type RegionPopulationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * The data used to create many RegionPopulations.
     */
    data: RegionPopulationCreateManyInput | RegionPopulationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RegionPopulation update
   */
  export type RegionPopulationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationInclude<ExtArgs> | null
    /**
     * The data needed to update a RegionPopulation.
     */
    data: XOR<RegionPopulationUpdateInput, RegionPopulationUncheckedUpdateInput>
    /**
     * Choose, which RegionPopulation to update.
     */
    where: RegionPopulationWhereUniqueInput
  }

  /**
   * RegionPopulation updateMany
   */
  export type RegionPopulationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RegionPopulations.
     */
    data: XOR<RegionPopulationUpdateManyMutationInput, RegionPopulationUncheckedUpdateManyInput>
    /**
     * Filter which RegionPopulations to update
     */
    where?: RegionPopulationWhereInput
    /**
     * Limit how many RegionPopulations to update.
     */
    limit?: number
  }

  /**
   * RegionPopulation updateManyAndReturn
   */
  export type RegionPopulationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * The data used to update RegionPopulations.
     */
    data: XOR<RegionPopulationUpdateManyMutationInput, RegionPopulationUncheckedUpdateManyInput>
    /**
     * Filter which RegionPopulations to update
     */
    where?: RegionPopulationWhereInput
    /**
     * Limit how many RegionPopulations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RegionPopulation upsert
   */
  export type RegionPopulationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationInclude<ExtArgs> | null
    /**
     * The filter to search for the RegionPopulation to update in case it exists.
     */
    where: RegionPopulationWhereUniqueInput
    /**
     * In case the RegionPopulation found by the `where` argument doesn't exist, create a new RegionPopulation with this data.
     */
    create: XOR<RegionPopulationCreateInput, RegionPopulationUncheckedCreateInput>
    /**
     * In case the RegionPopulation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionPopulationUpdateInput, RegionPopulationUncheckedUpdateInput>
  }

  /**
   * RegionPopulation delete
   */
  export type RegionPopulationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationInclude<ExtArgs> | null
    /**
     * Filter which RegionPopulation to delete.
     */
    where: RegionPopulationWhereUniqueInput
  }

  /**
   * RegionPopulation deleteMany
   */
  export type RegionPopulationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegionPopulations to delete
     */
    where?: RegionPopulationWhereInput
    /**
     * Limit how many RegionPopulations to delete.
     */
    limit?: number
  }

  /**
   * RegionPopulation without action
   */
  export type RegionPopulationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionPopulation
     */
    select?: RegionPopulationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionPopulation
     */
    omit?: RegionPopulationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionPopulationInclude<ExtArgs> | null
  }


  /**
   * Model NameModel
   */

  export type AggregateNameModel = {
    _count: NameModelCountAggregateOutputType | null
    _min: NameModelMinAggregateOutputType | null
    _max: NameModelMaxAggregateOutputType | null
  }

  export type NameModelMinAggregateOutputType = {
    id: string | null
    cultureId: string | null
    sex: $Enums.SexType | null
    firstnameTemplate: string | null
    lastnameTemplate: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type NameModelMaxAggregateOutputType = {
    id: string | null
    cultureId: string | null
    sex: $Enums.SexType | null
    firstnameTemplate: string | null
    lastnameTemplate: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type NameModelCountAggregateOutputType = {
    id: number
    cultureId: number
    sex: number
    firstnameTemplate: number
    lastnameTemplate: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type NameModelMinAggregateInputType = {
    id?: true
    cultureId?: true
    sex?: true
    firstnameTemplate?: true
    lastnameTemplate?: true
    updatedAt?: true
    createdAt?: true
  }

  export type NameModelMaxAggregateInputType = {
    id?: true
    cultureId?: true
    sex?: true
    firstnameTemplate?: true
    lastnameTemplate?: true
    updatedAt?: true
    createdAt?: true
  }

  export type NameModelCountAggregateInputType = {
    id?: true
    cultureId?: true
    sex?: true
    firstnameTemplate?: true
    lastnameTemplate?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type NameModelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NameModel to aggregate.
     */
    where?: NameModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NameModels to fetch.
     */
    orderBy?: NameModelOrderByWithRelationInput | NameModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NameModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NameModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NameModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NameModels
    **/
    _count?: true | NameModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NameModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NameModelMaxAggregateInputType
  }

  export type GetNameModelAggregateType<T extends NameModelAggregateArgs> = {
        [P in keyof T & keyof AggregateNameModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNameModel[P]>
      : GetScalarType<T[P], AggregateNameModel[P]>
  }




  export type NameModelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NameModelWhereInput
    orderBy?: NameModelOrderByWithAggregationInput | NameModelOrderByWithAggregationInput[]
    by: NameModelScalarFieldEnum[] | NameModelScalarFieldEnum
    having?: NameModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NameModelCountAggregateInputType | true
    _min?: NameModelMinAggregateInputType
    _max?: NameModelMaxAggregateInputType
  }

  export type NameModelGroupByOutputType = {
    id: string
    cultureId: string
    sex: $Enums.SexType
    firstnameTemplate: string
    lastnameTemplate: string
    updatedAt: Date
    createdAt: Date
    _count: NameModelCountAggregateOutputType | null
    _min: NameModelMinAggregateOutputType | null
    _max: NameModelMaxAggregateOutputType | null
  }

  type GetNameModelGroupByPayload<T extends NameModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NameModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NameModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NameModelGroupByOutputType[P]>
            : GetScalarType<T[P], NameModelGroupByOutputType[P]>
        }
      >
    >


  export type NameModelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cultureId?: boolean
    sex?: boolean
    firstnameTemplate?: boolean
    lastnameTemplate?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nameModel"]>

  export type NameModelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cultureId?: boolean
    sex?: boolean
    firstnameTemplate?: boolean
    lastnameTemplate?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nameModel"]>

  export type NameModelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cultureId?: boolean
    sex?: boolean
    firstnameTemplate?: boolean
    lastnameTemplate?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nameModel"]>

  export type NameModelSelectScalar = {
    id?: boolean
    cultureId?: boolean
    sex?: boolean
    firstnameTemplate?: boolean
    lastnameTemplate?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type NameModelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cultureId" | "sex" | "firstnameTemplate" | "lastnameTemplate" | "updatedAt" | "createdAt", ExtArgs["result"]["nameModel"]>
  export type NameModelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }
  export type NameModelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }
  export type NameModelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    culture?: boolean | CultureDefaultArgs<ExtArgs>
  }

  export type $NameModelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NameModel"
    objects: {
      culture: Prisma.$CulturePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cultureId: string
      sex: $Enums.SexType
      firstnameTemplate: string
      lastnameTemplate: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["nameModel"]>
    composites: {}
  }

  type NameModelGetPayload<S extends boolean | null | undefined | NameModelDefaultArgs> = $Result.GetResult<Prisma.$NameModelPayload, S>

  type NameModelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NameModelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NameModelCountAggregateInputType | true
    }

  export interface NameModelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NameModel'], meta: { name: 'NameModel' } }
    /**
     * Find zero or one NameModel that matches the filter.
     * @param {NameModelFindUniqueArgs} args - Arguments to find a NameModel
     * @example
     * // Get one NameModel
     * const nameModel = await prisma.nameModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NameModelFindUniqueArgs>(args: SelectSubset<T, NameModelFindUniqueArgs<ExtArgs>>): Prisma__NameModelClient<$Result.GetResult<Prisma.$NameModelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NameModel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NameModelFindUniqueOrThrowArgs} args - Arguments to find a NameModel
     * @example
     * // Get one NameModel
     * const nameModel = await prisma.nameModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NameModelFindUniqueOrThrowArgs>(args: SelectSubset<T, NameModelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NameModelClient<$Result.GetResult<Prisma.$NameModelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NameModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameModelFindFirstArgs} args - Arguments to find a NameModel
     * @example
     * // Get one NameModel
     * const nameModel = await prisma.nameModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NameModelFindFirstArgs>(args?: SelectSubset<T, NameModelFindFirstArgs<ExtArgs>>): Prisma__NameModelClient<$Result.GetResult<Prisma.$NameModelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NameModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameModelFindFirstOrThrowArgs} args - Arguments to find a NameModel
     * @example
     * // Get one NameModel
     * const nameModel = await prisma.nameModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NameModelFindFirstOrThrowArgs>(args?: SelectSubset<T, NameModelFindFirstOrThrowArgs<ExtArgs>>): Prisma__NameModelClient<$Result.GetResult<Prisma.$NameModelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NameModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameModelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NameModels
     * const nameModels = await prisma.nameModel.findMany()
     * 
     * // Get first 10 NameModels
     * const nameModels = await prisma.nameModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nameModelWithIdOnly = await prisma.nameModel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NameModelFindManyArgs>(args?: SelectSubset<T, NameModelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NameModel.
     * @param {NameModelCreateArgs} args - Arguments to create a NameModel.
     * @example
     * // Create one NameModel
     * const NameModel = await prisma.nameModel.create({
     *   data: {
     *     // ... data to create a NameModel
     *   }
     * })
     * 
     */
    create<T extends NameModelCreateArgs>(args: SelectSubset<T, NameModelCreateArgs<ExtArgs>>): Prisma__NameModelClient<$Result.GetResult<Prisma.$NameModelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NameModels.
     * @param {NameModelCreateManyArgs} args - Arguments to create many NameModels.
     * @example
     * // Create many NameModels
     * const nameModel = await prisma.nameModel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NameModelCreateManyArgs>(args?: SelectSubset<T, NameModelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NameModels and returns the data saved in the database.
     * @param {NameModelCreateManyAndReturnArgs} args - Arguments to create many NameModels.
     * @example
     * // Create many NameModels
     * const nameModel = await prisma.nameModel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NameModels and only return the `id`
     * const nameModelWithIdOnly = await prisma.nameModel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NameModelCreateManyAndReturnArgs>(args?: SelectSubset<T, NameModelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameModelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NameModel.
     * @param {NameModelDeleteArgs} args - Arguments to delete one NameModel.
     * @example
     * // Delete one NameModel
     * const NameModel = await prisma.nameModel.delete({
     *   where: {
     *     // ... filter to delete one NameModel
     *   }
     * })
     * 
     */
    delete<T extends NameModelDeleteArgs>(args: SelectSubset<T, NameModelDeleteArgs<ExtArgs>>): Prisma__NameModelClient<$Result.GetResult<Prisma.$NameModelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NameModel.
     * @param {NameModelUpdateArgs} args - Arguments to update one NameModel.
     * @example
     * // Update one NameModel
     * const nameModel = await prisma.nameModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NameModelUpdateArgs>(args: SelectSubset<T, NameModelUpdateArgs<ExtArgs>>): Prisma__NameModelClient<$Result.GetResult<Prisma.$NameModelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NameModels.
     * @param {NameModelDeleteManyArgs} args - Arguments to filter NameModels to delete.
     * @example
     * // Delete a few NameModels
     * const { count } = await prisma.nameModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NameModelDeleteManyArgs>(args?: SelectSubset<T, NameModelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NameModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NameModels
     * const nameModel = await prisma.nameModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NameModelUpdateManyArgs>(args: SelectSubset<T, NameModelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NameModels and returns the data updated in the database.
     * @param {NameModelUpdateManyAndReturnArgs} args - Arguments to update many NameModels.
     * @example
     * // Update many NameModels
     * const nameModel = await prisma.nameModel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NameModels and only return the `id`
     * const nameModelWithIdOnly = await prisma.nameModel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NameModelUpdateManyAndReturnArgs>(args: SelectSubset<T, NameModelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameModelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NameModel.
     * @param {NameModelUpsertArgs} args - Arguments to update or create a NameModel.
     * @example
     * // Update or create a NameModel
     * const nameModel = await prisma.nameModel.upsert({
     *   create: {
     *     // ... data to create a NameModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NameModel we want to update
     *   }
     * })
     */
    upsert<T extends NameModelUpsertArgs>(args: SelectSubset<T, NameModelUpsertArgs<ExtArgs>>): Prisma__NameModelClient<$Result.GetResult<Prisma.$NameModelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NameModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameModelCountArgs} args - Arguments to filter NameModels to count.
     * @example
     * // Count the number of NameModels
     * const count = await prisma.nameModel.count({
     *   where: {
     *     // ... the filter for the NameModels we want to count
     *   }
     * })
    **/
    count<T extends NameModelCountArgs>(
      args?: Subset<T, NameModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NameModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NameModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NameModelAggregateArgs>(args: Subset<T, NameModelAggregateArgs>): Prisma.PrismaPromise<GetNameModelAggregateType<T>>

    /**
     * Group by NameModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NameModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NameModelGroupByArgs['orderBy'] }
        : { orderBy?: NameModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NameModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNameModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NameModel model
   */
  readonly fields: NameModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NameModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NameModelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    culture<T extends CultureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CultureDefaultArgs<ExtArgs>>): Prisma__CultureClient<$Result.GetResult<Prisma.$CulturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NameModel model
   */
  interface NameModelFieldRefs {
    readonly id: FieldRef<"NameModel", 'String'>
    readonly cultureId: FieldRef<"NameModel", 'String'>
    readonly sex: FieldRef<"NameModel", 'SexType'>
    readonly firstnameTemplate: FieldRef<"NameModel", 'String'>
    readonly lastnameTemplate: FieldRef<"NameModel", 'String'>
    readonly updatedAt: FieldRef<"NameModel", 'DateTime'>
    readonly createdAt: FieldRef<"NameModel", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NameModel findUnique
   */
  export type NameModelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameModel
     */
    select?: NameModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameModel
     */
    omit?: NameModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameModelInclude<ExtArgs> | null
    /**
     * Filter, which NameModel to fetch.
     */
    where: NameModelWhereUniqueInput
  }

  /**
   * NameModel findUniqueOrThrow
   */
  export type NameModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameModel
     */
    select?: NameModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameModel
     */
    omit?: NameModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameModelInclude<ExtArgs> | null
    /**
     * Filter, which NameModel to fetch.
     */
    where: NameModelWhereUniqueInput
  }

  /**
   * NameModel findFirst
   */
  export type NameModelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameModel
     */
    select?: NameModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameModel
     */
    omit?: NameModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameModelInclude<ExtArgs> | null
    /**
     * Filter, which NameModel to fetch.
     */
    where?: NameModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NameModels to fetch.
     */
    orderBy?: NameModelOrderByWithRelationInput | NameModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NameModels.
     */
    cursor?: NameModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NameModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NameModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NameModels.
     */
    distinct?: NameModelScalarFieldEnum | NameModelScalarFieldEnum[]
  }

  /**
   * NameModel findFirstOrThrow
   */
  export type NameModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameModel
     */
    select?: NameModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameModel
     */
    omit?: NameModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameModelInclude<ExtArgs> | null
    /**
     * Filter, which NameModel to fetch.
     */
    where?: NameModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NameModels to fetch.
     */
    orderBy?: NameModelOrderByWithRelationInput | NameModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NameModels.
     */
    cursor?: NameModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NameModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NameModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NameModels.
     */
    distinct?: NameModelScalarFieldEnum | NameModelScalarFieldEnum[]
  }

  /**
   * NameModel findMany
   */
  export type NameModelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameModel
     */
    select?: NameModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameModel
     */
    omit?: NameModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameModelInclude<ExtArgs> | null
    /**
     * Filter, which NameModels to fetch.
     */
    where?: NameModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NameModels to fetch.
     */
    orderBy?: NameModelOrderByWithRelationInput | NameModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NameModels.
     */
    cursor?: NameModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NameModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NameModels.
     */
    skip?: number
    distinct?: NameModelScalarFieldEnum | NameModelScalarFieldEnum[]
  }

  /**
   * NameModel create
   */
  export type NameModelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameModel
     */
    select?: NameModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameModel
     */
    omit?: NameModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameModelInclude<ExtArgs> | null
    /**
     * The data needed to create a NameModel.
     */
    data: XOR<NameModelCreateInput, NameModelUncheckedCreateInput>
  }

  /**
   * NameModel createMany
   */
  export type NameModelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NameModels.
     */
    data: NameModelCreateManyInput | NameModelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NameModel createManyAndReturn
   */
  export type NameModelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameModel
     */
    select?: NameModelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NameModel
     */
    omit?: NameModelOmit<ExtArgs> | null
    /**
     * The data used to create many NameModels.
     */
    data: NameModelCreateManyInput | NameModelCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameModelIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NameModel update
   */
  export type NameModelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameModel
     */
    select?: NameModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameModel
     */
    omit?: NameModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameModelInclude<ExtArgs> | null
    /**
     * The data needed to update a NameModel.
     */
    data: XOR<NameModelUpdateInput, NameModelUncheckedUpdateInput>
    /**
     * Choose, which NameModel to update.
     */
    where: NameModelWhereUniqueInput
  }

  /**
   * NameModel updateMany
   */
  export type NameModelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NameModels.
     */
    data: XOR<NameModelUpdateManyMutationInput, NameModelUncheckedUpdateManyInput>
    /**
     * Filter which NameModels to update
     */
    where?: NameModelWhereInput
    /**
     * Limit how many NameModels to update.
     */
    limit?: number
  }

  /**
   * NameModel updateManyAndReturn
   */
  export type NameModelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameModel
     */
    select?: NameModelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NameModel
     */
    omit?: NameModelOmit<ExtArgs> | null
    /**
     * The data used to update NameModels.
     */
    data: XOR<NameModelUpdateManyMutationInput, NameModelUncheckedUpdateManyInput>
    /**
     * Filter which NameModels to update
     */
    where?: NameModelWhereInput
    /**
     * Limit how many NameModels to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameModelIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NameModel upsert
   */
  export type NameModelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameModel
     */
    select?: NameModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameModel
     */
    omit?: NameModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameModelInclude<ExtArgs> | null
    /**
     * The filter to search for the NameModel to update in case it exists.
     */
    where: NameModelWhereUniqueInput
    /**
     * In case the NameModel found by the `where` argument doesn't exist, create a new NameModel with this data.
     */
    create: XOR<NameModelCreateInput, NameModelUncheckedCreateInput>
    /**
     * In case the NameModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NameModelUpdateInput, NameModelUncheckedUpdateInput>
  }

  /**
   * NameModel delete
   */
  export type NameModelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameModel
     */
    select?: NameModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameModel
     */
    omit?: NameModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameModelInclude<ExtArgs> | null
    /**
     * Filter which NameModel to delete.
     */
    where: NameModelWhereUniqueInput
  }

  /**
   * NameModel deleteMany
   */
  export type NameModelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NameModels to delete
     */
    where?: NameModelWhereInput
    /**
     * Limit how many NameModels to delete.
     */
    limit?: number
  }

  /**
   * NameModel without action
   */
  export type NameModelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameModel
     */
    select?: NameModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameModel
     */
    omit?: NameModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameModelInclude<ExtArgs> | null
  }


  /**
   * Model NameComponentKey
   */

  export type AggregateNameComponentKey = {
    _count: NameComponentKeyCountAggregateOutputType | null
    _min: NameComponentKeyMinAggregateOutputType | null
    _max: NameComponentKeyMaxAggregateOutputType | null
  }

  export type NameComponentKeyMinAggregateOutputType = {
    id: string | null
    key: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type NameComponentKeyMaxAggregateOutputType = {
    id: string | null
    key: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type NameComponentKeyCountAggregateOutputType = {
    id: number
    key: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type NameComponentKeyMinAggregateInputType = {
    id?: true
    key?: true
    updatedAt?: true
    createdAt?: true
  }

  export type NameComponentKeyMaxAggregateInputType = {
    id?: true
    key?: true
    updatedAt?: true
    createdAt?: true
  }

  export type NameComponentKeyCountAggregateInputType = {
    id?: true
    key?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type NameComponentKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NameComponentKey to aggregate.
     */
    where?: NameComponentKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NameComponentKeys to fetch.
     */
    orderBy?: NameComponentKeyOrderByWithRelationInput | NameComponentKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NameComponentKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NameComponentKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NameComponentKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NameComponentKeys
    **/
    _count?: true | NameComponentKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NameComponentKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NameComponentKeyMaxAggregateInputType
  }

  export type GetNameComponentKeyAggregateType<T extends NameComponentKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateNameComponentKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNameComponentKey[P]>
      : GetScalarType<T[P], AggregateNameComponentKey[P]>
  }




  export type NameComponentKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NameComponentKeyWhereInput
    orderBy?: NameComponentKeyOrderByWithAggregationInput | NameComponentKeyOrderByWithAggregationInput[]
    by: NameComponentKeyScalarFieldEnum[] | NameComponentKeyScalarFieldEnum
    having?: NameComponentKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NameComponentKeyCountAggregateInputType | true
    _min?: NameComponentKeyMinAggregateInputType
    _max?: NameComponentKeyMaxAggregateInputType
  }

  export type NameComponentKeyGroupByOutputType = {
    id: string
    key: string
    updatedAt: Date
    createdAt: Date
    _count: NameComponentKeyCountAggregateOutputType | null
    _min: NameComponentKeyMinAggregateOutputType | null
    _max: NameComponentKeyMaxAggregateOutputType | null
  }

  type GetNameComponentKeyGroupByPayload<T extends NameComponentKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NameComponentKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NameComponentKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NameComponentKeyGroupByOutputType[P]>
            : GetScalarType<T[P], NameComponentKeyGroupByOutputType[P]>
        }
      >
    >


  export type NameComponentKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    values?: boolean | NameComponentKey$valuesArgs<ExtArgs>
    _count?: boolean | NameComponentKeyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nameComponentKey"]>

  export type NameComponentKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["nameComponentKey"]>

  export type NameComponentKeySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["nameComponentKey"]>

  export type NameComponentKeySelectScalar = {
    id?: boolean
    key?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type NameComponentKeyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "updatedAt" | "createdAt", ExtArgs["result"]["nameComponentKey"]>
  export type NameComponentKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    values?: boolean | NameComponentKey$valuesArgs<ExtArgs>
    _count?: boolean | NameComponentKeyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NameComponentKeyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type NameComponentKeyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $NameComponentKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NameComponentKey"
    objects: {
      values: Prisma.$NameComponentValuePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["nameComponentKey"]>
    composites: {}
  }

  type NameComponentKeyGetPayload<S extends boolean | null | undefined | NameComponentKeyDefaultArgs> = $Result.GetResult<Prisma.$NameComponentKeyPayload, S>

  type NameComponentKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NameComponentKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NameComponentKeyCountAggregateInputType | true
    }

  export interface NameComponentKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NameComponentKey'], meta: { name: 'NameComponentKey' } }
    /**
     * Find zero or one NameComponentKey that matches the filter.
     * @param {NameComponentKeyFindUniqueArgs} args - Arguments to find a NameComponentKey
     * @example
     * // Get one NameComponentKey
     * const nameComponentKey = await prisma.nameComponentKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NameComponentKeyFindUniqueArgs>(args: SelectSubset<T, NameComponentKeyFindUniqueArgs<ExtArgs>>): Prisma__NameComponentKeyClient<$Result.GetResult<Prisma.$NameComponentKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NameComponentKey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NameComponentKeyFindUniqueOrThrowArgs} args - Arguments to find a NameComponentKey
     * @example
     * // Get one NameComponentKey
     * const nameComponentKey = await prisma.nameComponentKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NameComponentKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, NameComponentKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NameComponentKeyClient<$Result.GetResult<Prisma.$NameComponentKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NameComponentKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentKeyFindFirstArgs} args - Arguments to find a NameComponentKey
     * @example
     * // Get one NameComponentKey
     * const nameComponentKey = await prisma.nameComponentKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NameComponentKeyFindFirstArgs>(args?: SelectSubset<T, NameComponentKeyFindFirstArgs<ExtArgs>>): Prisma__NameComponentKeyClient<$Result.GetResult<Prisma.$NameComponentKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NameComponentKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentKeyFindFirstOrThrowArgs} args - Arguments to find a NameComponentKey
     * @example
     * // Get one NameComponentKey
     * const nameComponentKey = await prisma.nameComponentKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NameComponentKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, NameComponentKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__NameComponentKeyClient<$Result.GetResult<Prisma.$NameComponentKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NameComponentKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NameComponentKeys
     * const nameComponentKeys = await prisma.nameComponentKey.findMany()
     * 
     * // Get first 10 NameComponentKeys
     * const nameComponentKeys = await prisma.nameComponentKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nameComponentKeyWithIdOnly = await prisma.nameComponentKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NameComponentKeyFindManyArgs>(args?: SelectSubset<T, NameComponentKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameComponentKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NameComponentKey.
     * @param {NameComponentKeyCreateArgs} args - Arguments to create a NameComponentKey.
     * @example
     * // Create one NameComponentKey
     * const NameComponentKey = await prisma.nameComponentKey.create({
     *   data: {
     *     // ... data to create a NameComponentKey
     *   }
     * })
     * 
     */
    create<T extends NameComponentKeyCreateArgs>(args: SelectSubset<T, NameComponentKeyCreateArgs<ExtArgs>>): Prisma__NameComponentKeyClient<$Result.GetResult<Prisma.$NameComponentKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NameComponentKeys.
     * @param {NameComponentKeyCreateManyArgs} args - Arguments to create many NameComponentKeys.
     * @example
     * // Create many NameComponentKeys
     * const nameComponentKey = await prisma.nameComponentKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NameComponentKeyCreateManyArgs>(args?: SelectSubset<T, NameComponentKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NameComponentKeys and returns the data saved in the database.
     * @param {NameComponentKeyCreateManyAndReturnArgs} args - Arguments to create many NameComponentKeys.
     * @example
     * // Create many NameComponentKeys
     * const nameComponentKey = await prisma.nameComponentKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NameComponentKeys and only return the `id`
     * const nameComponentKeyWithIdOnly = await prisma.nameComponentKey.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NameComponentKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, NameComponentKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameComponentKeyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NameComponentKey.
     * @param {NameComponentKeyDeleteArgs} args - Arguments to delete one NameComponentKey.
     * @example
     * // Delete one NameComponentKey
     * const NameComponentKey = await prisma.nameComponentKey.delete({
     *   where: {
     *     // ... filter to delete one NameComponentKey
     *   }
     * })
     * 
     */
    delete<T extends NameComponentKeyDeleteArgs>(args: SelectSubset<T, NameComponentKeyDeleteArgs<ExtArgs>>): Prisma__NameComponentKeyClient<$Result.GetResult<Prisma.$NameComponentKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NameComponentKey.
     * @param {NameComponentKeyUpdateArgs} args - Arguments to update one NameComponentKey.
     * @example
     * // Update one NameComponentKey
     * const nameComponentKey = await prisma.nameComponentKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NameComponentKeyUpdateArgs>(args: SelectSubset<T, NameComponentKeyUpdateArgs<ExtArgs>>): Prisma__NameComponentKeyClient<$Result.GetResult<Prisma.$NameComponentKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NameComponentKeys.
     * @param {NameComponentKeyDeleteManyArgs} args - Arguments to filter NameComponentKeys to delete.
     * @example
     * // Delete a few NameComponentKeys
     * const { count } = await prisma.nameComponentKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NameComponentKeyDeleteManyArgs>(args?: SelectSubset<T, NameComponentKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NameComponentKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NameComponentKeys
     * const nameComponentKey = await prisma.nameComponentKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NameComponentKeyUpdateManyArgs>(args: SelectSubset<T, NameComponentKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NameComponentKeys and returns the data updated in the database.
     * @param {NameComponentKeyUpdateManyAndReturnArgs} args - Arguments to update many NameComponentKeys.
     * @example
     * // Update many NameComponentKeys
     * const nameComponentKey = await prisma.nameComponentKey.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NameComponentKeys and only return the `id`
     * const nameComponentKeyWithIdOnly = await prisma.nameComponentKey.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NameComponentKeyUpdateManyAndReturnArgs>(args: SelectSubset<T, NameComponentKeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameComponentKeyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NameComponentKey.
     * @param {NameComponentKeyUpsertArgs} args - Arguments to update or create a NameComponentKey.
     * @example
     * // Update or create a NameComponentKey
     * const nameComponentKey = await prisma.nameComponentKey.upsert({
     *   create: {
     *     // ... data to create a NameComponentKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NameComponentKey we want to update
     *   }
     * })
     */
    upsert<T extends NameComponentKeyUpsertArgs>(args: SelectSubset<T, NameComponentKeyUpsertArgs<ExtArgs>>): Prisma__NameComponentKeyClient<$Result.GetResult<Prisma.$NameComponentKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NameComponentKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentKeyCountArgs} args - Arguments to filter NameComponentKeys to count.
     * @example
     * // Count the number of NameComponentKeys
     * const count = await prisma.nameComponentKey.count({
     *   where: {
     *     // ... the filter for the NameComponentKeys we want to count
     *   }
     * })
    **/
    count<T extends NameComponentKeyCountArgs>(
      args?: Subset<T, NameComponentKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NameComponentKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NameComponentKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NameComponentKeyAggregateArgs>(args: Subset<T, NameComponentKeyAggregateArgs>): Prisma.PrismaPromise<GetNameComponentKeyAggregateType<T>>

    /**
     * Group by NameComponentKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NameComponentKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NameComponentKeyGroupByArgs['orderBy'] }
        : { orderBy?: NameComponentKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NameComponentKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNameComponentKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NameComponentKey model
   */
  readonly fields: NameComponentKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NameComponentKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NameComponentKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    values<T extends NameComponentKey$valuesArgs<ExtArgs> = {}>(args?: Subset<T, NameComponentKey$valuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameComponentValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NameComponentKey model
   */
  interface NameComponentKeyFieldRefs {
    readonly id: FieldRef<"NameComponentKey", 'String'>
    readonly key: FieldRef<"NameComponentKey", 'String'>
    readonly updatedAt: FieldRef<"NameComponentKey", 'DateTime'>
    readonly createdAt: FieldRef<"NameComponentKey", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NameComponentKey findUnique
   */
  export type NameComponentKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentKey
     */
    select?: NameComponentKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentKey
     */
    omit?: NameComponentKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentKeyInclude<ExtArgs> | null
    /**
     * Filter, which NameComponentKey to fetch.
     */
    where: NameComponentKeyWhereUniqueInput
  }

  /**
   * NameComponentKey findUniqueOrThrow
   */
  export type NameComponentKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentKey
     */
    select?: NameComponentKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentKey
     */
    omit?: NameComponentKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentKeyInclude<ExtArgs> | null
    /**
     * Filter, which NameComponentKey to fetch.
     */
    where: NameComponentKeyWhereUniqueInput
  }

  /**
   * NameComponentKey findFirst
   */
  export type NameComponentKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentKey
     */
    select?: NameComponentKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentKey
     */
    omit?: NameComponentKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentKeyInclude<ExtArgs> | null
    /**
     * Filter, which NameComponentKey to fetch.
     */
    where?: NameComponentKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NameComponentKeys to fetch.
     */
    orderBy?: NameComponentKeyOrderByWithRelationInput | NameComponentKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NameComponentKeys.
     */
    cursor?: NameComponentKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NameComponentKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NameComponentKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NameComponentKeys.
     */
    distinct?: NameComponentKeyScalarFieldEnum | NameComponentKeyScalarFieldEnum[]
  }

  /**
   * NameComponentKey findFirstOrThrow
   */
  export type NameComponentKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentKey
     */
    select?: NameComponentKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentKey
     */
    omit?: NameComponentKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentKeyInclude<ExtArgs> | null
    /**
     * Filter, which NameComponentKey to fetch.
     */
    where?: NameComponentKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NameComponentKeys to fetch.
     */
    orderBy?: NameComponentKeyOrderByWithRelationInput | NameComponentKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NameComponentKeys.
     */
    cursor?: NameComponentKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NameComponentKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NameComponentKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NameComponentKeys.
     */
    distinct?: NameComponentKeyScalarFieldEnum | NameComponentKeyScalarFieldEnum[]
  }

  /**
   * NameComponentKey findMany
   */
  export type NameComponentKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentKey
     */
    select?: NameComponentKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentKey
     */
    omit?: NameComponentKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentKeyInclude<ExtArgs> | null
    /**
     * Filter, which NameComponentKeys to fetch.
     */
    where?: NameComponentKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NameComponentKeys to fetch.
     */
    orderBy?: NameComponentKeyOrderByWithRelationInput | NameComponentKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NameComponentKeys.
     */
    cursor?: NameComponentKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NameComponentKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NameComponentKeys.
     */
    skip?: number
    distinct?: NameComponentKeyScalarFieldEnum | NameComponentKeyScalarFieldEnum[]
  }

  /**
   * NameComponentKey create
   */
  export type NameComponentKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentKey
     */
    select?: NameComponentKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentKey
     */
    omit?: NameComponentKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a NameComponentKey.
     */
    data: XOR<NameComponentKeyCreateInput, NameComponentKeyUncheckedCreateInput>
  }

  /**
   * NameComponentKey createMany
   */
  export type NameComponentKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NameComponentKeys.
     */
    data: NameComponentKeyCreateManyInput | NameComponentKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NameComponentKey createManyAndReturn
   */
  export type NameComponentKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentKey
     */
    select?: NameComponentKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentKey
     */
    omit?: NameComponentKeyOmit<ExtArgs> | null
    /**
     * The data used to create many NameComponentKeys.
     */
    data: NameComponentKeyCreateManyInput | NameComponentKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NameComponentKey update
   */
  export type NameComponentKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentKey
     */
    select?: NameComponentKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentKey
     */
    omit?: NameComponentKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a NameComponentKey.
     */
    data: XOR<NameComponentKeyUpdateInput, NameComponentKeyUncheckedUpdateInput>
    /**
     * Choose, which NameComponentKey to update.
     */
    where: NameComponentKeyWhereUniqueInput
  }

  /**
   * NameComponentKey updateMany
   */
  export type NameComponentKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NameComponentKeys.
     */
    data: XOR<NameComponentKeyUpdateManyMutationInput, NameComponentKeyUncheckedUpdateManyInput>
    /**
     * Filter which NameComponentKeys to update
     */
    where?: NameComponentKeyWhereInput
    /**
     * Limit how many NameComponentKeys to update.
     */
    limit?: number
  }

  /**
   * NameComponentKey updateManyAndReturn
   */
  export type NameComponentKeyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentKey
     */
    select?: NameComponentKeySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentKey
     */
    omit?: NameComponentKeyOmit<ExtArgs> | null
    /**
     * The data used to update NameComponentKeys.
     */
    data: XOR<NameComponentKeyUpdateManyMutationInput, NameComponentKeyUncheckedUpdateManyInput>
    /**
     * Filter which NameComponentKeys to update
     */
    where?: NameComponentKeyWhereInput
    /**
     * Limit how many NameComponentKeys to update.
     */
    limit?: number
  }

  /**
   * NameComponentKey upsert
   */
  export type NameComponentKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentKey
     */
    select?: NameComponentKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentKey
     */
    omit?: NameComponentKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the NameComponentKey to update in case it exists.
     */
    where: NameComponentKeyWhereUniqueInput
    /**
     * In case the NameComponentKey found by the `where` argument doesn't exist, create a new NameComponentKey with this data.
     */
    create: XOR<NameComponentKeyCreateInput, NameComponentKeyUncheckedCreateInput>
    /**
     * In case the NameComponentKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NameComponentKeyUpdateInput, NameComponentKeyUncheckedUpdateInput>
  }

  /**
   * NameComponentKey delete
   */
  export type NameComponentKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentKey
     */
    select?: NameComponentKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentKey
     */
    omit?: NameComponentKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentKeyInclude<ExtArgs> | null
    /**
     * Filter which NameComponentKey to delete.
     */
    where: NameComponentKeyWhereUniqueInput
  }

  /**
   * NameComponentKey deleteMany
   */
  export type NameComponentKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NameComponentKeys to delete
     */
    where?: NameComponentKeyWhereInput
    /**
     * Limit how many NameComponentKeys to delete.
     */
    limit?: number
  }

  /**
   * NameComponentKey.values
   */
  export type NameComponentKey$valuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentValue
     */
    select?: NameComponentValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentValue
     */
    omit?: NameComponentValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentValueInclude<ExtArgs> | null
    where?: NameComponentValueWhereInput
    orderBy?: NameComponentValueOrderByWithRelationInput | NameComponentValueOrderByWithRelationInput[]
    cursor?: NameComponentValueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NameComponentValueScalarFieldEnum | NameComponentValueScalarFieldEnum[]
  }

  /**
   * NameComponentKey without action
   */
  export type NameComponentKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentKey
     */
    select?: NameComponentKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentKey
     */
    omit?: NameComponentKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentKeyInclude<ExtArgs> | null
  }


  /**
   * Model NameComponentValue
   */

  export type AggregateNameComponentValue = {
    _count: NameComponentValueCountAggregateOutputType | null
    _min: NameComponentValueMinAggregateOutputType | null
    _max: NameComponentValueMaxAggregateOutputType | null
  }

  export type NameComponentValueMinAggregateOutputType = {
    id: string | null
    keyId: string | null
    value: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type NameComponentValueMaxAggregateOutputType = {
    id: string | null
    keyId: string | null
    value: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type NameComponentValueCountAggregateOutputType = {
    id: number
    keyId: number
    value: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type NameComponentValueMinAggregateInputType = {
    id?: true
    keyId?: true
    value?: true
    updatedAt?: true
    createdAt?: true
  }

  export type NameComponentValueMaxAggregateInputType = {
    id?: true
    keyId?: true
    value?: true
    updatedAt?: true
    createdAt?: true
  }

  export type NameComponentValueCountAggregateInputType = {
    id?: true
    keyId?: true
    value?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type NameComponentValueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NameComponentValue to aggregate.
     */
    where?: NameComponentValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NameComponentValues to fetch.
     */
    orderBy?: NameComponentValueOrderByWithRelationInput | NameComponentValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NameComponentValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NameComponentValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NameComponentValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NameComponentValues
    **/
    _count?: true | NameComponentValueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NameComponentValueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NameComponentValueMaxAggregateInputType
  }

  export type GetNameComponentValueAggregateType<T extends NameComponentValueAggregateArgs> = {
        [P in keyof T & keyof AggregateNameComponentValue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNameComponentValue[P]>
      : GetScalarType<T[P], AggregateNameComponentValue[P]>
  }




  export type NameComponentValueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NameComponentValueWhereInput
    orderBy?: NameComponentValueOrderByWithAggregationInput | NameComponentValueOrderByWithAggregationInput[]
    by: NameComponentValueScalarFieldEnum[] | NameComponentValueScalarFieldEnum
    having?: NameComponentValueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NameComponentValueCountAggregateInputType | true
    _min?: NameComponentValueMinAggregateInputType
    _max?: NameComponentValueMaxAggregateInputType
  }

  export type NameComponentValueGroupByOutputType = {
    id: string
    keyId: string
    value: string
    updatedAt: Date
    createdAt: Date
    _count: NameComponentValueCountAggregateOutputType | null
    _min: NameComponentValueMinAggregateOutputType | null
    _max: NameComponentValueMaxAggregateOutputType | null
  }

  type GetNameComponentValueGroupByPayload<T extends NameComponentValueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NameComponentValueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NameComponentValueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NameComponentValueGroupByOutputType[P]>
            : GetScalarType<T[P], NameComponentValueGroupByOutputType[P]>
        }
      >
    >


  export type NameComponentValueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    keyId?: boolean
    value?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    key?: boolean | NameComponentKeyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nameComponentValue"]>

  export type NameComponentValueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    keyId?: boolean
    value?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    key?: boolean | NameComponentKeyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nameComponentValue"]>

  export type NameComponentValueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    keyId?: boolean
    value?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    key?: boolean | NameComponentKeyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nameComponentValue"]>

  export type NameComponentValueSelectScalar = {
    id?: boolean
    keyId?: boolean
    value?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type NameComponentValueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "keyId" | "value" | "updatedAt" | "createdAt", ExtArgs["result"]["nameComponentValue"]>
  export type NameComponentValueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    key?: boolean | NameComponentKeyDefaultArgs<ExtArgs>
  }
  export type NameComponentValueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    key?: boolean | NameComponentKeyDefaultArgs<ExtArgs>
  }
  export type NameComponentValueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    key?: boolean | NameComponentKeyDefaultArgs<ExtArgs>
  }

  export type $NameComponentValuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NameComponentValue"
    objects: {
      key: Prisma.$NameComponentKeyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      keyId: string
      value: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["nameComponentValue"]>
    composites: {}
  }

  type NameComponentValueGetPayload<S extends boolean | null | undefined | NameComponentValueDefaultArgs> = $Result.GetResult<Prisma.$NameComponentValuePayload, S>

  type NameComponentValueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NameComponentValueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NameComponentValueCountAggregateInputType | true
    }

  export interface NameComponentValueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NameComponentValue'], meta: { name: 'NameComponentValue' } }
    /**
     * Find zero or one NameComponentValue that matches the filter.
     * @param {NameComponentValueFindUniqueArgs} args - Arguments to find a NameComponentValue
     * @example
     * // Get one NameComponentValue
     * const nameComponentValue = await prisma.nameComponentValue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NameComponentValueFindUniqueArgs>(args: SelectSubset<T, NameComponentValueFindUniqueArgs<ExtArgs>>): Prisma__NameComponentValueClient<$Result.GetResult<Prisma.$NameComponentValuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NameComponentValue that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NameComponentValueFindUniqueOrThrowArgs} args - Arguments to find a NameComponentValue
     * @example
     * // Get one NameComponentValue
     * const nameComponentValue = await prisma.nameComponentValue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NameComponentValueFindUniqueOrThrowArgs>(args: SelectSubset<T, NameComponentValueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NameComponentValueClient<$Result.GetResult<Prisma.$NameComponentValuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NameComponentValue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentValueFindFirstArgs} args - Arguments to find a NameComponentValue
     * @example
     * // Get one NameComponentValue
     * const nameComponentValue = await prisma.nameComponentValue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NameComponentValueFindFirstArgs>(args?: SelectSubset<T, NameComponentValueFindFirstArgs<ExtArgs>>): Prisma__NameComponentValueClient<$Result.GetResult<Prisma.$NameComponentValuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NameComponentValue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentValueFindFirstOrThrowArgs} args - Arguments to find a NameComponentValue
     * @example
     * // Get one NameComponentValue
     * const nameComponentValue = await prisma.nameComponentValue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NameComponentValueFindFirstOrThrowArgs>(args?: SelectSubset<T, NameComponentValueFindFirstOrThrowArgs<ExtArgs>>): Prisma__NameComponentValueClient<$Result.GetResult<Prisma.$NameComponentValuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NameComponentValues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentValueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NameComponentValues
     * const nameComponentValues = await prisma.nameComponentValue.findMany()
     * 
     * // Get first 10 NameComponentValues
     * const nameComponentValues = await prisma.nameComponentValue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nameComponentValueWithIdOnly = await prisma.nameComponentValue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NameComponentValueFindManyArgs>(args?: SelectSubset<T, NameComponentValueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameComponentValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NameComponentValue.
     * @param {NameComponentValueCreateArgs} args - Arguments to create a NameComponentValue.
     * @example
     * // Create one NameComponentValue
     * const NameComponentValue = await prisma.nameComponentValue.create({
     *   data: {
     *     // ... data to create a NameComponentValue
     *   }
     * })
     * 
     */
    create<T extends NameComponentValueCreateArgs>(args: SelectSubset<T, NameComponentValueCreateArgs<ExtArgs>>): Prisma__NameComponentValueClient<$Result.GetResult<Prisma.$NameComponentValuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NameComponentValues.
     * @param {NameComponentValueCreateManyArgs} args - Arguments to create many NameComponentValues.
     * @example
     * // Create many NameComponentValues
     * const nameComponentValue = await prisma.nameComponentValue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NameComponentValueCreateManyArgs>(args?: SelectSubset<T, NameComponentValueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NameComponentValues and returns the data saved in the database.
     * @param {NameComponentValueCreateManyAndReturnArgs} args - Arguments to create many NameComponentValues.
     * @example
     * // Create many NameComponentValues
     * const nameComponentValue = await prisma.nameComponentValue.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NameComponentValues and only return the `id`
     * const nameComponentValueWithIdOnly = await prisma.nameComponentValue.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NameComponentValueCreateManyAndReturnArgs>(args?: SelectSubset<T, NameComponentValueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameComponentValuePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NameComponentValue.
     * @param {NameComponentValueDeleteArgs} args - Arguments to delete one NameComponentValue.
     * @example
     * // Delete one NameComponentValue
     * const NameComponentValue = await prisma.nameComponentValue.delete({
     *   where: {
     *     // ... filter to delete one NameComponentValue
     *   }
     * })
     * 
     */
    delete<T extends NameComponentValueDeleteArgs>(args: SelectSubset<T, NameComponentValueDeleteArgs<ExtArgs>>): Prisma__NameComponentValueClient<$Result.GetResult<Prisma.$NameComponentValuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NameComponentValue.
     * @param {NameComponentValueUpdateArgs} args - Arguments to update one NameComponentValue.
     * @example
     * // Update one NameComponentValue
     * const nameComponentValue = await prisma.nameComponentValue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NameComponentValueUpdateArgs>(args: SelectSubset<T, NameComponentValueUpdateArgs<ExtArgs>>): Prisma__NameComponentValueClient<$Result.GetResult<Prisma.$NameComponentValuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NameComponentValues.
     * @param {NameComponentValueDeleteManyArgs} args - Arguments to filter NameComponentValues to delete.
     * @example
     * // Delete a few NameComponentValues
     * const { count } = await prisma.nameComponentValue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NameComponentValueDeleteManyArgs>(args?: SelectSubset<T, NameComponentValueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NameComponentValues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentValueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NameComponentValues
     * const nameComponentValue = await prisma.nameComponentValue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NameComponentValueUpdateManyArgs>(args: SelectSubset<T, NameComponentValueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NameComponentValues and returns the data updated in the database.
     * @param {NameComponentValueUpdateManyAndReturnArgs} args - Arguments to update many NameComponentValues.
     * @example
     * // Update many NameComponentValues
     * const nameComponentValue = await prisma.nameComponentValue.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NameComponentValues and only return the `id`
     * const nameComponentValueWithIdOnly = await prisma.nameComponentValue.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NameComponentValueUpdateManyAndReturnArgs>(args: SelectSubset<T, NameComponentValueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameComponentValuePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NameComponentValue.
     * @param {NameComponentValueUpsertArgs} args - Arguments to update or create a NameComponentValue.
     * @example
     * // Update or create a NameComponentValue
     * const nameComponentValue = await prisma.nameComponentValue.upsert({
     *   create: {
     *     // ... data to create a NameComponentValue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NameComponentValue we want to update
     *   }
     * })
     */
    upsert<T extends NameComponentValueUpsertArgs>(args: SelectSubset<T, NameComponentValueUpsertArgs<ExtArgs>>): Prisma__NameComponentValueClient<$Result.GetResult<Prisma.$NameComponentValuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NameComponentValues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentValueCountArgs} args - Arguments to filter NameComponentValues to count.
     * @example
     * // Count the number of NameComponentValues
     * const count = await prisma.nameComponentValue.count({
     *   where: {
     *     // ... the filter for the NameComponentValues we want to count
     *   }
     * })
    **/
    count<T extends NameComponentValueCountArgs>(
      args?: Subset<T, NameComponentValueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NameComponentValueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NameComponentValue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentValueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NameComponentValueAggregateArgs>(args: Subset<T, NameComponentValueAggregateArgs>): Prisma.PrismaPromise<GetNameComponentValueAggregateType<T>>

    /**
     * Group by NameComponentValue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameComponentValueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NameComponentValueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NameComponentValueGroupByArgs['orderBy'] }
        : { orderBy?: NameComponentValueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NameComponentValueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNameComponentValueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NameComponentValue model
   */
  readonly fields: NameComponentValueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NameComponentValue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NameComponentValueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    key<T extends NameComponentKeyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NameComponentKeyDefaultArgs<ExtArgs>>): Prisma__NameComponentKeyClient<$Result.GetResult<Prisma.$NameComponentKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NameComponentValue model
   */
  interface NameComponentValueFieldRefs {
    readonly id: FieldRef<"NameComponentValue", 'String'>
    readonly keyId: FieldRef<"NameComponentValue", 'String'>
    readonly value: FieldRef<"NameComponentValue", 'String'>
    readonly updatedAt: FieldRef<"NameComponentValue", 'DateTime'>
    readonly createdAt: FieldRef<"NameComponentValue", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NameComponentValue findUnique
   */
  export type NameComponentValueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentValue
     */
    select?: NameComponentValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentValue
     */
    omit?: NameComponentValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentValueInclude<ExtArgs> | null
    /**
     * Filter, which NameComponentValue to fetch.
     */
    where: NameComponentValueWhereUniqueInput
  }

  /**
   * NameComponentValue findUniqueOrThrow
   */
  export type NameComponentValueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentValue
     */
    select?: NameComponentValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentValue
     */
    omit?: NameComponentValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentValueInclude<ExtArgs> | null
    /**
     * Filter, which NameComponentValue to fetch.
     */
    where: NameComponentValueWhereUniqueInput
  }

  /**
   * NameComponentValue findFirst
   */
  export type NameComponentValueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentValue
     */
    select?: NameComponentValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentValue
     */
    omit?: NameComponentValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentValueInclude<ExtArgs> | null
    /**
     * Filter, which NameComponentValue to fetch.
     */
    where?: NameComponentValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NameComponentValues to fetch.
     */
    orderBy?: NameComponentValueOrderByWithRelationInput | NameComponentValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NameComponentValues.
     */
    cursor?: NameComponentValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NameComponentValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NameComponentValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NameComponentValues.
     */
    distinct?: NameComponentValueScalarFieldEnum | NameComponentValueScalarFieldEnum[]
  }

  /**
   * NameComponentValue findFirstOrThrow
   */
  export type NameComponentValueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentValue
     */
    select?: NameComponentValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentValue
     */
    omit?: NameComponentValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentValueInclude<ExtArgs> | null
    /**
     * Filter, which NameComponentValue to fetch.
     */
    where?: NameComponentValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NameComponentValues to fetch.
     */
    orderBy?: NameComponentValueOrderByWithRelationInput | NameComponentValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NameComponentValues.
     */
    cursor?: NameComponentValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NameComponentValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NameComponentValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NameComponentValues.
     */
    distinct?: NameComponentValueScalarFieldEnum | NameComponentValueScalarFieldEnum[]
  }

  /**
   * NameComponentValue findMany
   */
  export type NameComponentValueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentValue
     */
    select?: NameComponentValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentValue
     */
    omit?: NameComponentValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentValueInclude<ExtArgs> | null
    /**
     * Filter, which NameComponentValues to fetch.
     */
    where?: NameComponentValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NameComponentValues to fetch.
     */
    orderBy?: NameComponentValueOrderByWithRelationInput | NameComponentValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NameComponentValues.
     */
    cursor?: NameComponentValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NameComponentValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NameComponentValues.
     */
    skip?: number
    distinct?: NameComponentValueScalarFieldEnum | NameComponentValueScalarFieldEnum[]
  }

  /**
   * NameComponentValue create
   */
  export type NameComponentValueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentValue
     */
    select?: NameComponentValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentValue
     */
    omit?: NameComponentValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentValueInclude<ExtArgs> | null
    /**
     * The data needed to create a NameComponentValue.
     */
    data: XOR<NameComponentValueCreateInput, NameComponentValueUncheckedCreateInput>
  }

  /**
   * NameComponentValue createMany
   */
  export type NameComponentValueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NameComponentValues.
     */
    data: NameComponentValueCreateManyInput | NameComponentValueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NameComponentValue createManyAndReturn
   */
  export type NameComponentValueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentValue
     */
    select?: NameComponentValueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentValue
     */
    omit?: NameComponentValueOmit<ExtArgs> | null
    /**
     * The data used to create many NameComponentValues.
     */
    data: NameComponentValueCreateManyInput | NameComponentValueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentValueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NameComponentValue update
   */
  export type NameComponentValueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentValue
     */
    select?: NameComponentValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentValue
     */
    omit?: NameComponentValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentValueInclude<ExtArgs> | null
    /**
     * The data needed to update a NameComponentValue.
     */
    data: XOR<NameComponentValueUpdateInput, NameComponentValueUncheckedUpdateInput>
    /**
     * Choose, which NameComponentValue to update.
     */
    where: NameComponentValueWhereUniqueInput
  }

  /**
   * NameComponentValue updateMany
   */
  export type NameComponentValueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NameComponentValues.
     */
    data: XOR<NameComponentValueUpdateManyMutationInput, NameComponentValueUncheckedUpdateManyInput>
    /**
     * Filter which NameComponentValues to update
     */
    where?: NameComponentValueWhereInput
    /**
     * Limit how many NameComponentValues to update.
     */
    limit?: number
  }

  /**
   * NameComponentValue updateManyAndReturn
   */
  export type NameComponentValueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentValue
     */
    select?: NameComponentValueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentValue
     */
    omit?: NameComponentValueOmit<ExtArgs> | null
    /**
     * The data used to update NameComponentValues.
     */
    data: XOR<NameComponentValueUpdateManyMutationInput, NameComponentValueUncheckedUpdateManyInput>
    /**
     * Filter which NameComponentValues to update
     */
    where?: NameComponentValueWhereInput
    /**
     * Limit how many NameComponentValues to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentValueIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NameComponentValue upsert
   */
  export type NameComponentValueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentValue
     */
    select?: NameComponentValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentValue
     */
    omit?: NameComponentValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentValueInclude<ExtArgs> | null
    /**
     * The filter to search for the NameComponentValue to update in case it exists.
     */
    where: NameComponentValueWhereUniqueInput
    /**
     * In case the NameComponentValue found by the `where` argument doesn't exist, create a new NameComponentValue with this data.
     */
    create: XOR<NameComponentValueCreateInput, NameComponentValueUncheckedCreateInput>
    /**
     * In case the NameComponentValue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NameComponentValueUpdateInput, NameComponentValueUncheckedUpdateInput>
  }

  /**
   * NameComponentValue delete
   */
  export type NameComponentValueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentValue
     */
    select?: NameComponentValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentValue
     */
    omit?: NameComponentValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentValueInclude<ExtArgs> | null
    /**
     * Filter which NameComponentValue to delete.
     */
    where: NameComponentValueWhereUniqueInput
  }

  /**
   * NameComponentValue deleteMany
   */
  export type NameComponentValueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NameComponentValues to delete
     */
    where?: NameComponentValueWhereInput
    /**
     * Limit how many NameComponentValues to delete.
     */
    limit?: number
  }

  /**
   * NameComponentValue without action
   */
  export type NameComponentValueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NameComponentValue
     */
    select?: NameComponentValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NameComponentValue
     */
    omit?: NameComponentValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameComponentValueInclude<ExtArgs> | null
  }


  /**
   * Model Person
   */

  export type AggregatePerson = {
    _count: PersonCountAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  export type PersonMinAggregateOutputType = {
    id: string | null
    name: string | null
    shortName: string | null
    raceId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type PersonMaxAggregateOutputType = {
    id: string | null
    name: string | null
    shortName: string | null
    raceId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type PersonCountAggregateOutputType = {
    id: number
    name: number
    shortName: number
    raceId: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type PersonMinAggregateInputType = {
    id?: true
    name?: true
    shortName?: true
    raceId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type PersonMaxAggregateInputType = {
    id?: true
    name?: true
    shortName?: true
    raceId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type PersonCountAggregateInputType = {
    id?: true
    name?: true
    shortName?: true
    raceId?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type PersonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Person to aggregate.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned People
    **/
    _count?: true | PersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonMaxAggregateInputType
  }

  export type GetPersonAggregateType<T extends PersonAggregateArgs> = {
        [P in keyof T & keyof AggregatePerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerson[P]>
      : GetScalarType<T[P], AggregatePerson[P]>
  }




  export type PersonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonWhereInput
    orderBy?: PersonOrderByWithAggregationInput | PersonOrderByWithAggregationInput[]
    by: PersonScalarFieldEnum[] | PersonScalarFieldEnum
    having?: PersonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonCountAggregateInputType | true
    _min?: PersonMinAggregateInputType
    _max?: PersonMaxAggregateInputType
  }

  export type PersonGroupByOutputType = {
    id: string
    name: string
    shortName: string
    raceId: string
    updatedAt: Date
    createdAt: Date
    _count: PersonCountAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  type GetPersonGroupByPayload<T extends PersonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonGroupByOutputType[P]>
            : GetScalarType<T[P], PersonGroupByOutputType[P]>
        }
      >
    >


  export type PersonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    shortName?: boolean
    raceId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    race?: boolean | RaceDefaultArgs<ExtArgs>
    playercharacteristics?: boolean | Person$playercharacteristicsArgs<ExtArgs>
    PersonContract?: boolean | Person$PersonContractArgs<ExtArgs>
    _count?: boolean | PersonCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["person"]>

  export type PersonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    shortName?: boolean
    raceId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["person"]>

  export type PersonSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    shortName?: boolean
    raceId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["person"]>

  export type PersonSelectScalar = {
    id?: boolean
    name?: boolean
    shortName?: boolean
    raceId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type PersonOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "shortName" | "raceId" | "updatedAt" | "createdAt", ExtArgs["result"]["person"]>
  export type PersonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | RaceDefaultArgs<ExtArgs>
    playercharacteristics?: boolean | Person$playercharacteristicsArgs<ExtArgs>
    PersonContract?: boolean | Person$PersonContractArgs<ExtArgs>
    _count?: boolean | PersonCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PersonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }
  export type PersonIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | RaceDefaultArgs<ExtArgs>
  }

  export type $PersonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Person"
    objects: {
      race: Prisma.$RacePayload<ExtArgs>
      playercharacteristics: Prisma.$PlayerCharacteristicsPayload<ExtArgs> | null
      PersonContract: Prisma.$PersonContractPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      shortName: string
      raceId: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["person"]>
    composites: {}
  }

  type PersonGetPayload<S extends boolean | null | undefined | PersonDefaultArgs> = $Result.GetResult<Prisma.$PersonPayload, S>

  type PersonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PersonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PersonCountAggregateInputType | true
    }

  export interface PersonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Person'], meta: { name: 'Person' } }
    /**
     * Find zero or one Person that matches the filter.
     * @param {PersonFindUniqueArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonFindUniqueArgs>(args: SelectSubset<T, PersonFindUniqueArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Person that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PersonFindUniqueOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Person that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonFindFirstArgs>(args?: SelectSubset<T, PersonFindFirstArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Person that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more People that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all People
     * const people = await prisma.person.findMany()
     * 
     * // Get first 10 People
     * const people = await prisma.person.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personWithIdOnly = await prisma.person.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PersonFindManyArgs>(args?: SelectSubset<T, PersonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Person.
     * @param {PersonCreateArgs} args - Arguments to create a Person.
     * @example
     * // Create one Person
     * const Person = await prisma.person.create({
     *   data: {
     *     // ... data to create a Person
     *   }
     * })
     * 
     */
    create<T extends PersonCreateArgs>(args: SelectSubset<T, PersonCreateArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many People.
     * @param {PersonCreateManyArgs} args - Arguments to create many People.
     * @example
     * // Create many People
     * const person = await prisma.person.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonCreateManyArgs>(args?: SelectSubset<T, PersonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many People and returns the data saved in the database.
     * @param {PersonCreateManyAndReturnArgs} args - Arguments to create many People.
     * @example
     * // Create many People
     * const person = await prisma.person.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many People and only return the `id`
     * const personWithIdOnly = await prisma.person.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PersonCreateManyAndReturnArgs>(args?: SelectSubset<T, PersonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Person.
     * @param {PersonDeleteArgs} args - Arguments to delete one Person.
     * @example
     * // Delete one Person
     * const Person = await prisma.person.delete({
     *   where: {
     *     // ... filter to delete one Person
     *   }
     * })
     * 
     */
    delete<T extends PersonDeleteArgs>(args: SelectSubset<T, PersonDeleteArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Person.
     * @param {PersonUpdateArgs} args - Arguments to update one Person.
     * @example
     * // Update one Person
     * const person = await prisma.person.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonUpdateArgs>(args: SelectSubset<T, PersonUpdateArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more People.
     * @param {PersonDeleteManyArgs} args - Arguments to filter People to delete.
     * @example
     * // Delete a few People
     * const { count } = await prisma.person.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonDeleteManyArgs>(args?: SelectSubset<T, PersonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many People
     * const person = await prisma.person.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonUpdateManyArgs>(args: SelectSubset<T, PersonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more People and returns the data updated in the database.
     * @param {PersonUpdateManyAndReturnArgs} args - Arguments to update many People.
     * @example
     * // Update many People
     * const person = await prisma.person.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more People and only return the `id`
     * const personWithIdOnly = await prisma.person.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PersonUpdateManyAndReturnArgs>(args: SelectSubset<T, PersonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Person.
     * @param {PersonUpsertArgs} args - Arguments to update or create a Person.
     * @example
     * // Update or create a Person
     * const person = await prisma.person.upsert({
     *   create: {
     *     // ... data to create a Person
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Person we want to update
     *   }
     * })
     */
    upsert<T extends PersonUpsertArgs>(args: SelectSubset<T, PersonUpsertArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonCountArgs} args - Arguments to filter People to count.
     * @example
     * // Count the number of People
     * const count = await prisma.person.count({
     *   where: {
     *     // ... the filter for the People we want to count
     *   }
     * })
    **/
    count<T extends PersonCountArgs>(
      args?: Subset<T, PersonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonAggregateArgs>(args: Subset<T, PersonAggregateArgs>): Prisma.PrismaPromise<GetPersonAggregateType<T>>

    /**
     * Group by Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonGroupByArgs['orderBy'] }
        : { orderBy?: PersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Person model
   */
  readonly fields: PersonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Person.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    race<T extends RaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RaceDefaultArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    playercharacteristics<T extends Person$playercharacteristicsArgs<ExtArgs> = {}>(args?: Subset<T, Person$playercharacteristicsArgs<ExtArgs>>): Prisma__PlayerCharacteristicsClient<$Result.GetResult<Prisma.$PlayerCharacteristicsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    PersonContract<T extends Person$PersonContractArgs<ExtArgs> = {}>(args?: Subset<T, Person$PersonContractArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Person model
   */
  interface PersonFieldRefs {
    readonly id: FieldRef<"Person", 'String'>
    readonly name: FieldRef<"Person", 'String'>
    readonly shortName: FieldRef<"Person", 'String'>
    readonly raceId: FieldRef<"Person", 'String'>
    readonly updatedAt: FieldRef<"Person", 'DateTime'>
    readonly createdAt: FieldRef<"Person", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Person findUnique
   */
  export type PersonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person findUniqueOrThrow
   */
  export type PersonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person findFirst
   */
  export type PersonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person findFirstOrThrow
   */
  export type PersonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person findMany
   */
  export type PersonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which People to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person create
   */
  export type PersonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The data needed to create a Person.
     */
    data: XOR<PersonCreateInput, PersonUncheckedCreateInput>
  }

  /**
   * Person createMany
   */
  export type PersonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many People.
     */
    data: PersonCreateManyInput | PersonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Person createManyAndReturn
   */
  export type PersonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * The data used to create many People.
     */
    data: PersonCreateManyInput | PersonCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Person update
   */
  export type PersonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The data needed to update a Person.
     */
    data: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
    /**
     * Choose, which Person to update.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person updateMany
   */
  export type PersonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update People.
     */
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyInput>
    /**
     * Filter which People to update
     */
    where?: PersonWhereInput
    /**
     * Limit how many People to update.
     */
    limit?: number
  }

  /**
   * Person updateManyAndReturn
   */
  export type PersonUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * The data used to update People.
     */
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyInput>
    /**
     * Filter which People to update
     */
    where?: PersonWhereInput
    /**
     * Limit how many People to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Person upsert
   */
  export type PersonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The filter to search for the Person to update in case it exists.
     */
    where: PersonWhereUniqueInput
    /**
     * In case the Person found by the `where` argument doesn't exist, create a new Person with this data.
     */
    create: XOR<PersonCreateInput, PersonUncheckedCreateInput>
    /**
     * In case the Person was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
  }

  /**
   * Person delete
   */
  export type PersonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter which Person to delete.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person deleteMany
   */
  export type PersonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which People to delete
     */
    where?: PersonWhereInput
    /**
     * Limit how many People to delete.
     */
    limit?: number
  }

  /**
   * Person.playercharacteristics
   */
  export type Person$playercharacteristicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCharacteristics
     */
    select?: PlayerCharacteristicsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerCharacteristics
     */
    omit?: PlayerCharacteristicsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerCharacteristicsInclude<ExtArgs> | null
    where?: PlayerCharacteristicsWhereInput
  }

  /**
   * Person.PersonContract
   */
  export type Person$PersonContractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractInclude<ExtArgs> | null
    where?: PersonContractWhereInput
    orderBy?: PersonContractOrderByWithRelationInput | PersonContractOrderByWithRelationInput[]
    cursor?: PersonContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PersonContractScalarFieldEnum | PersonContractScalarFieldEnum[]
  }

  /**
   * Person without action
   */
  export type PersonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
  }


  /**
   * Model PlayerCharacteristics
   */

  export type AggregatePlayerCharacteristics = {
    _count: PlayerCharacteristicsCountAggregateOutputType | null
    _min: PlayerCharacteristicsMinAggregateOutputType | null
    _max: PlayerCharacteristicsMaxAggregateOutputType | null
  }

  export type PlayerCharacteristicsMinAggregateOutputType = {
    id: string | null
    playerId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type PlayerCharacteristicsMaxAggregateOutputType = {
    id: string | null
    playerId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type PlayerCharacteristicsCountAggregateOutputType = {
    id: number
    playerId: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type PlayerCharacteristicsMinAggregateInputType = {
    id?: true
    playerId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type PlayerCharacteristicsMaxAggregateInputType = {
    id?: true
    playerId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type PlayerCharacteristicsCountAggregateInputType = {
    id?: true
    playerId?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type PlayerCharacteristicsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerCharacteristics to aggregate.
     */
    where?: PlayerCharacteristicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerCharacteristics to fetch.
     */
    orderBy?: PlayerCharacteristicsOrderByWithRelationInput | PlayerCharacteristicsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerCharacteristicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerCharacteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerCharacteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerCharacteristics
    **/
    _count?: true | PlayerCharacteristicsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerCharacteristicsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerCharacteristicsMaxAggregateInputType
  }

  export type GetPlayerCharacteristicsAggregateType<T extends PlayerCharacteristicsAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerCharacteristics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerCharacteristics[P]>
      : GetScalarType<T[P], AggregatePlayerCharacteristics[P]>
  }




  export type PlayerCharacteristicsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerCharacteristicsWhereInput
    orderBy?: PlayerCharacteristicsOrderByWithAggregationInput | PlayerCharacteristicsOrderByWithAggregationInput[]
    by: PlayerCharacteristicsScalarFieldEnum[] | PlayerCharacteristicsScalarFieldEnum
    having?: PlayerCharacteristicsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCharacteristicsCountAggregateInputType | true
    _min?: PlayerCharacteristicsMinAggregateInputType
    _max?: PlayerCharacteristicsMaxAggregateInputType
  }

  export type PlayerCharacteristicsGroupByOutputType = {
    id: string
    playerId: string
    updatedAt: Date
    createdAt: Date
    _count: PlayerCharacteristicsCountAggregateOutputType | null
    _min: PlayerCharacteristicsMinAggregateOutputType | null
    _max: PlayerCharacteristicsMaxAggregateOutputType | null
  }

  type GetPlayerCharacteristicsGroupByPayload<T extends PlayerCharacteristicsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerCharacteristicsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerCharacteristicsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerCharacteristicsGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerCharacteristicsGroupByOutputType[P]>
        }
      >
    >


  export type PlayerCharacteristicsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    player?: boolean | PersonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerCharacteristics"]>

  export type PlayerCharacteristicsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    player?: boolean | PersonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerCharacteristics"]>

  export type PlayerCharacteristicsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    player?: boolean | PersonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerCharacteristics"]>

  export type PlayerCharacteristicsSelectScalar = {
    id?: boolean
    playerId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type PlayerCharacteristicsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "playerId" | "updatedAt" | "createdAt", ExtArgs["result"]["playerCharacteristics"]>
  export type PlayerCharacteristicsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PersonDefaultArgs<ExtArgs>
  }
  export type PlayerCharacteristicsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PersonDefaultArgs<ExtArgs>
  }
  export type PlayerCharacteristicsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PersonDefaultArgs<ExtArgs>
  }

  export type $PlayerCharacteristicsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerCharacteristics"
    objects: {
      player: Prisma.$PersonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      playerId: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["playerCharacteristics"]>
    composites: {}
  }

  type PlayerCharacteristicsGetPayload<S extends boolean | null | undefined | PlayerCharacteristicsDefaultArgs> = $Result.GetResult<Prisma.$PlayerCharacteristicsPayload, S>

  type PlayerCharacteristicsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlayerCharacteristicsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlayerCharacteristicsCountAggregateInputType | true
    }

  export interface PlayerCharacteristicsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerCharacteristics'], meta: { name: 'PlayerCharacteristics' } }
    /**
     * Find zero or one PlayerCharacteristics that matches the filter.
     * @param {PlayerCharacteristicsFindUniqueArgs} args - Arguments to find a PlayerCharacteristics
     * @example
     * // Get one PlayerCharacteristics
     * const playerCharacteristics = await prisma.playerCharacteristics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerCharacteristicsFindUniqueArgs>(args: SelectSubset<T, PlayerCharacteristicsFindUniqueArgs<ExtArgs>>): Prisma__PlayerCharacteristicsClient<$Result.GetResult<Prisma.$PlayerCharacteristicsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlayerCharacteristics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlayerCharacteristicsFindUniqueOrThrowArgs} args - Arguments to find a PlayerCharacteristics
     * @example
     * // Get one PlayerCharacteristics
     * const playerCharacteristics = await prisma.playerCharacteristics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerCharacteristicsFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerCharacteristicsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerCharacteristicsClient<$Result.GetResult<Prisma.$PlayerCharacteristicsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerCharacteristics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCharacteristicsFindFirstArgs} args - Arguments to find a PlayerCharacteristics
     * @example
     * // Get one PlayerCharacteristics
     * const playerCharacteristics = await prisma.playerCharacteristics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerCharacteristicsFindFirstArgs>(args?: SelectSubset<T, PlayerCharacteristicsFindFirstArgs<ExtArgs>>): Prisma__PlayerCharacteristicsClient<$Result.GetResult<Prisma.$PlayerCharacteristicsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerCharacteristics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCharacteristicsFindFirstOrThrowArgs} args - Arguments to find a PlayerCharacteristics
     * @example
     * // Get one PlayerCharacteristics
     * const playerCharacteristics = await prisma.playerCharacteristics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerCharacteristicsFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerCharacteristicsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerCharacteristicsClient<$Result.GetResult<Prisma.$PlayerCharacteristicsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlayerCharacteristics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCharacteristicsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerCharacteristics
     * const playerCharacteristics = await prisma.playerCharacteristics.findMany()
     * 
     * // Get first 10 PlayerCharacteristics
     * const playerCharacteristics = await prisma.playerCharacteristics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerCharacteristicsWithIdOnly = await prisma.playerCharacteristics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerCharacteristicsFindManyArgs>(args?: SelectSubset<T, PlayerCharacteristicsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerCharacteristicsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlayerCharacteristics.
     * @param {PlayerCharacteristicsCreateArgs} args - Arguments to create a PlayerCharacteristics.
     * @example
     * // Create one PlayerCharacteristics
     * const PlayerCharacteristics = await prisma.playerCharacteristics.create({
     *   data: {
     *     // ... data to create a PlayerCharacteristics
     *   }
     * })
     * 
     */
    create<T extends PlayerCharacteristicsCreateArgs>(args: SelectSubset<T, PlayerCharacteristicsCreateArgs<ExtArgs>>): Prisma__PlayerCharacteristicsClient<$Result.GetResult<Prisma.$PlayerCharacteristicsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlayerCharacteristics.
     * @param {PlayerCharacteristicsCreateManyArgs} args - Arguments to create many PlayerCharacteristics.
     * @example
     * // Create many PlayerCharacteristics
     * const playerCharacteristics = await prisma.playerCharacteristics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerCharacteristicsCreateManyArgs>(args?: SelectSubset<T, PlayerCharacteristicsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlayerCharacteristics and returns the data saved in the database.
     * @param {PlayerCharacteristicsCreateManyAndReturnArgs} args - Arguments to create many PlayerCharacteristics.
     * @example
     * // Create many PlayerCharacteristics
     * const playerCharacteristics = await prisma.playerCharacteristics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlayerCharacteristics and only return the `id`
     * const playerCharacteristicsWithIdOnly = await prisma.playerCharacteristics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerCharacteristicsCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerCharacteristicsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerCharacteristicsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlayerCharacteristics.
     * @param {PlayerCharacteristicsDeleteArgs} args - Arguments to delete one PlayerCharacteristics.
     * @example
     * // Delete one PlayerCharacteristics
     * const PlayerCharacteristics = await prisma.playerCharacteristics.delete({
     *   where: {
     *     // ... filter to delete one PlayerCharacteristics
     *   }
     * })
     * 
     */
    delete<T extends PlayerCharacteristicsDeleteArgs>(args: SelectSubset<T, PlayerCharacteristicsDeleteArgs<ExtArgs>>): Prisma__PlayerCharacteristicsClient<$Result.GetResult<Prisma.$PlayerCharacteristicsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlayerCharacteristics.
     * @param {PlayerCharacteristicsUpdateArgs} args - Arguments to update one PlayerCharacteristics.
     * @example
     * // Update one PlayerCharacteristics
     * const playerCharacteristics = await prisma.playerCharacteristics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerCharacteristicsUpdateArgs>(args: SelectSubset<T, PlayerCharacteristicsUpdateArgs<ExtArgs>>): Prisma__PlayerCharacteristicsClient<$Result.GetResult<Prisma.$PlayerCharacteristicsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlayerCharacteristics.
     * @param {PlayerCharacteristicsDeleteManyArgs} args - Arguments to filter PlayerCharacteristics to delete.
     * @example
     * // Delete a few PlayerCharacteristics
     * const { count } = await prisma.playerCharacteristics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerCharacteristicsDeleteManyArgs>(args?: SelectSubset<T, PlayerCharacteristicsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerCharacteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCharacteristicsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerCharacteristics
     * const playerCharacteristics = await prisma.playerCharacteristics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerCharacteristicsUpdateManyArgs>(args: SelectSubset<T, PlayerCharacteristicsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerCharacteristics and returns the data updated in the database.
     * @param {PlayerCharacteristicsUpdateManyAndReturnArgs} args - Arguments to update many PlayerCharacteristics.
     * @example
     * // Update many PlayerCharacteristics
     * const playerCharacteristics = await prisma.playerCharacteristics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlayerCharacteristics and only return the `id`
     * const playerCharacteristicsWithIdOnly = await prisma.playerCharacteristics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlayerCharacteristicsUpdateManyAndReturnArgs>(args: SelectSubset<T, PlayerCharacteristicsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerCharacteristicsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlayerCharacteristics.
     * @param {PlayerCharacteristicsUpsertArgs} args - Arguments to update or create a PlayerCharacteristics.
     * @example
     * // Update or create a PlayerCharacteristics
     * const playerCharacteristics = await prisma.playerCharacteristics.upsert({
     *   create: {
     *     // ... data to create a PlayerCharacteristics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerCharacteristics we want to update
     *   }
     * })
     */
    upsert<T extends PlayerCharacteristicsUpsertArgs>(args: SelectSubset<T, PlayerCharacteristicsUpsertArgs<ExtArgs>>): Prisma__PlayerCharacteristicsClient<$Result.GetResult<Prisma.$PlayerCharacteristicsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlayerCharacteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCharacteristicsCountArgs} args - Arguments to filter PlayerCharacteristics to count.
     * @example
     * // Count the number of PlayerCharacteristics
     * const count = await prisma.playerCharacteristics.count({
     *   where: {
     *     // ... the filter for the PlayerCharacteristics we want to count
     *   }
     * })
    **/
    count<T extends PlayerCharacteristicsCountArgs>(
      args?: Subset<T, PlayerCharacteristicsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCharacteristicsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerCharacteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCharacteristicsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerCharacteristicsAggregateArgs>(args: Subset<T, PlayerCharacteristicsAggregateArgs>): Prisma.PrismaPromise<GetPlayerCharacteristicsAggregateType<T>>

    /**
     * Group by PlayerCharacteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCharacteristicsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerCharacteristicsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerCharacteristicsGroupByArgs['orderBy'] }
        : { orderBy?: PlayerCharacteristicsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerCharacteristicsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerCharacteristicsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerCharacteristics model
   */
  readonly fields: PlayerCharacteristicsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerCharacteristics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerCharacteristicsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    player<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerCharacteristics model
   */
  interface PlayerCharacteristicsFieldRefs {
    readonly id: FieldRef<"PlayerCharacteristics", 'String'>
    readonly playerId: FieldRef<"PlayerCharacteristics", 'String'>
    readonly updatedAt: FieldRef<"PlayerCharacteristics", 'DateTime'>
    readonly createdAt: FieldRef<"PlayerCharacteristics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlayerCharacteristics findUnique
   */
  export type PlayerCharacteristicsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCharacteristics
     */
    select?: PlayerCharacteristicsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerCharacteristics
     */
    omit?: PlayerCharacteristicsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerCharacteristicsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerCharacteristics to fetch.
     */
    where: PlayerCharacteristicsWhereUniqueInput
  }

  /**
   * PlayerCharacteristics findUniqueOrThrow
   */
  export type PlayerCharacteristicsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCharacteristics
     */
    select?: PlayerCharacteristicsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerCharacteristics
     */
    omit?: PlayerCharacteristicsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerCharacteristicsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerCharacteristics to fetch.
     */
    where: PlayerCharacteristicsWhereUniqueInput
  }

  /**
   * PlayerCharacteristics findFirst
   */
  export type PlayerCharacteristicsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCharacteristics
     */
    select?: PlayerCharacteristicsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerCharacteristics
     */
    omit?: PlayerCharacteristicsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerCharacteristicsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerCharacteristics to fetch.
     */
    where?: PlayerCharacteristicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerCharacteristics to fetch.
     */
    orderBy?: PlayerCharacteristicsOrderByWithRelationInput | PlayerCharacteristicsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerCharacteristics.
     */
    cursor?: PlayerCharacteristicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerCharacteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerCharacteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerCharacteristics.
     */
    distinct?: PlayerCharacteristicsScalarFieldEnum | PlayerCharacteristicsScalarFieldEnum[]
  }

  /**
   * PlayerCharacteristics findFirstOrThrow
   */
  export type PlayerCharacteristicsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCharacteristics
     */
    select?: PlayerCharacteristicsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerCharacteristics
     */
    omit?: PlayerCharacteristicsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerCharacteristicsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerCharacteristics to fetch.
     */
    where?: PlayerCharacteristicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerCharacteristics to fetch.
     */
    orderBy?: PlayerCharacteristicsOrderByWithRelationInput | PlayerCharacteristicsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerCharacteristics.
     */
    cursor?: PlayerCharacteristicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerCharacteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerCharacteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerCharacteristics.
     */
    distinct?: PlayerCharacteristicsScalarFieldEnum | PlayerCharacteristicsScalarFieldEnum[]
  }

  /**
   * PlayerCharacteristics findMany
   */
  export type PlayerCharacteristicsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCharacteristics
     */
    select?: PlayerCharacteristicsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerCharacteristics
     */
    omit?: PlayerCharacteristicsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerCharacteristicsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerCharacteristics to fetch.
     */
    where?: PlayerCharacteristicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerCharacteristics to fetch.
     */
    orderBy?: PlayerCharacteristicsOrderByWithRelationInput | PlayerCharacteristicsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerCharacteristics.
     */
    cursor?: PlayerCharacteristicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerCharacteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerCharacteristics.
     */
    skip?: number
    distinct?: PlayerCharacteristicsScalarFieldEnum | PlayerCharacteristicsScalarFieldEnum[]
  }

  /**
   * PlayerCharacteristics create
   */
  export type PlayerCharacteristicsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCharacteristics
     */
    select?: PlayerCharacteristicsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerCharacteristics
     */
    omit?: PlayerCharacteristicsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerCharacteristicsInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerCharacteristics.
     */
    data: XOR<PlayerCharacteristicsCreateInput, PlayerCharacteristicsUncheckedCreateInput>
  }

  /**
   * PlayerCharacteristics createMany
   */
  export type PlayerCharacteristicsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerCharacteristics.
     */
    data: PlayerCharacteristicsCreateManyInput | PlayerCharacteristicsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerCharacteristics createManyAndReturn
   */
  export type PlayerCharacteristicsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCharacteristics
     */
    select?: PlayerCharacteristicsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerCharacteristics
     */
    omit?: PlayerCharacteristicsOmit<ExtArgs> | null
    /**
     * The data used to create many PlayerCharacteristics.
     */
    data: PlayerCharacteristicsCreateManyInput | PlayerCharacteristicsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerCharacteristicsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerCharacteristics update
   */
  export type PlayerCharacteristicsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCharacteristics
     */
    select?: PlayerCharacteristicsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerCharacteristics
     */
    omit?: PlayerCharacteristicsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerCharacteristicsInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerCharacteristics.
     */
    data: XOR<PlayerCharacteristicsUpdateInput, PlayerCharacteristicsUncheckedUpdateInput>
    /**
     * Choose, which PlayerCharacteristics to update.
     */
    where: PlayerCharacteristicsWhereUniqueInput
  }

  /**
   * PlayerCharacteristics updateMany
   */
  export type PlayerCharacteristicsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerCharacteristics.
     */
    data: XOR<PlayerCharacteristicsUpdateManyMutationInput, PlayerCharacteristicsUncheckedUpdateManyInput>
    /**
     * Filter which PlayerCharacteristics to update
     */
    where?: PlayerCharacteristicsWhereInput
    /**
     * Limit how many PlayerCharacteristics to update.
     */
    limit?: number
  }

  /**
   * PlayerCharacteristics updateManyAndReturn
   */
  export type PlayerCharacteristicsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCharacteristics
     */
    select?: PlayerCharacteristicsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerCharacteristics
     */
    omit?: PlayerCharacteristicsOmit<ExtArgs> | null
    /**
     * The data used to update PlayerCharacteristics.
     */
    data: XOR<PlayerCharacteristicsUpdateManyMutationInput, PlayerCharacteristicsUncheckedUpdateManyInput>
    /**
     * Filter which PlayerCharacteristics to update
     */
    where?: PlayerCharacteristicsWhereInput
    /**
     * Limit how many PlayerCharacteristics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerCharacteristicsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerCharacteristics upsert
   */
  export type PlayerCharacteristicsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCharacteristics
     */
    select?: PlayerCharacteristicsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerCharacteristics
     */
    omit?: PlayerCharacteristicsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerCharacteristicsInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerCharacteristics to update in case it exists.
     */
    where: PlayerCharacteristicsWhereUniqueInput
    /**
     * In case the PlayerCharacteristics found by the `where` argument doesn't exist, create a new PlayerCharacteristics with this data.
     */
    create: XOR<PlayerCharacteristicsCreateInput, PlayerCharacteristicsUncheckedCreateInput>
    /**
     * In case the PlayerCharacteristics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerCharacteristicsUpdateInput, PlayerCharacteristicsUncheckedUpdateInput>
  }

  /**
   * PlayerCharacteristics delete
   */
  export type PlayerCharacteristicsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCharacteristics
     */
    select?: PlayerCharacteristicsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerCharacteristics
     */
    omit?: PlayerCharacteristicsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerCharacteristicsInclude<ExtArgs> | null
    /**
     * Filter which PlayerCharacteristics to delete.
     */
    where: PlayerCharacteristicsWhereUniqueInput
  }

  /**
   * PlayerCharacteristics deleteMany
   */
  export type PlayerCharacteristicsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerCharacteristics to delete
     */
    where?: PlayerCharacteristicsWhereInput
    /**
     * Limit how many PlayerCharacteristics to delete.
     */
    limit?: number
  }

  /**
   * PlayerCharacteristics without action
   */
  export type PlayerCharacteristicsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCharacteristics
     */
    select?: PlayerCharacteristicsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerCharacteristics
     */
    omit?: PlayerCharacteristicsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerCharacteristicsInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamMinAggregateOutputType = {
    id: string | null
    name: string | null
    shortName: string | null
    isActive: boolean | null
    ownerId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type TeamMaxAggregateOutputType = {
    id: string | null
    name: string | null
    shortName: string | null
    isActive: boolean | null
    ownerId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    shortName: number
    isActive: number
    ownerId: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    shortName?: true
    isActive?: true
    ownerId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    shortName?: true
    isActive?: true
    ownerId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    shortName?: true
    isActive?: true
    ownerId?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: string
    name: string
    shortName: string
    isActive: boolean
    ownerId: string
    updatedAt: Date
    createdAt: Date
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    shortName?: boolean
    isActive?: boolean
    ownerId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    owner?: boolean | Team$ownerArgs<ExtArgs>
    teamLocation?: boolean | Team$teamLocationArgs<ExtArgs>
    PersonContract?: boolean | Team$PersonContractArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    shortName?: boolean
    isActive?: boolean
    ownerId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    owner?: boolean | Team$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    shortName?: boolean
    isActive?: boolean
    ownerId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    owner?: boolean | Team$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
    shortName?: boolean
    isActive?: boolean
    ownerId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type TeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "shortName" | "isActive" | "ownerId" | "updatedAt" | "createdAt", ExtArgs["result"]["team"]>
  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Team$ownerArgs<ExtArgs>
    teamLocation?: boolean | Team$teamLocationArgs<ExtArgs>
    PersonContract?: boolean | Team$PersonContractArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Team$ownerArgs<ExtArgs>
  }
  export type TeamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Team$ownerArgs<ExtArgs>
  }

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs> | null
      teamLocation: Prisma.$TeamLocationPayload<ExtArgs> | null
      PersonContract: Prisma.$PersonContractPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      shortName: string
      isActive: boolean
      ownerId: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams and returns the data updated in the database.
     * @param {TeamUpdateManyAndReturnArgs} args - Arguments to update many Teams.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends Team$ownerArgs<ExtArgs> = {}>(args?: Subset<T, Team$ownerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    teamLocation<T extends Team$teamLocationArgs<ExtArgs> = {}>(args?: Subset<T, Team$teamLocationArgs<ExtArgs>>): Prisma__TeamLocationClient<$Result.GetResult<Prisma.$TeamLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    PersonContract<T extends Team$PersonContractArgs<ExtArgs> = {}>(args?: Subset<T, Team$PersonContractArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'String'>
    readonly name: FieldRef<"Team", 'String'>
    readonly shortName: FieldRef<"Team", 'String'>
    readonly isActive: FieldRef<"Team", 'Boolean'>
    readonly ownerId: FieldRef<"Team", 'String'>
    readonly updatedAt: FieldRef<"Team", 'DateTime'>
    readonly createdAt: FieldRef<"Team", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team updateManyAndReturn
   */
  export type TeamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Team.owner
   */
  export type Team$ownerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Team.teamLocation
   */
  export type Team$teamLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationInclude<ExtArgs> | null
    where?: TeamLocationWhereInput
  }

  /**
   * Team.PersonContract
   */
  export type Team$PersonContractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractInclude<ExtArgs> | null
    where?: PersonContractWhereInput
    orderBy?: PersonContractOrderByWithRelationInput | PersonContractOrderByWithRelationInput[]
    cursor?: PersonContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PersonContractScalarFieldEnum | PersonContractScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model TeamLocation
   */

  export type AggregateTeamLocation = {
    _count: TeamLocationCountAggregateOutputType | null
    _min: TeamLocationMinAggregateOutputType | null
    _max: TeamLocationMaxAggregateOutputType | null
  }

  export type TeamLocationMinAggregateOutputType = {
    id: string | null
    teamId: string | null
    locationId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type TeamLocationMaxAggregateOutputType = {
    id: string | null
    teamId: string | null
    locationId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type TeamLocationCountAggregateOutputType = {
    id: number
    teamId: number
    locationId: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type TeamLocationMinAggregateInputType = {
    id?: true
    teamId?: true
    locationId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type TeamLocationMaxAggregateInputType = {
    id?: true
    teamId?: true
    locationId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type TeamLocationCountAggregateInputType = {
    id?: true
    teamId?: true
    locationId?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type TeamLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamLocation to aggregate.
     */
    where?: TeamLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamLocations to fetch.
     */
    orderBy?: TeamLocationOrderByWithRelationInput | TeamLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamLocations
    **/
    _count?: true | TeamLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamLocationMaxAggregateInputType
  }

  export type GetTeamLocationAggregateType<T extends TeamLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamLocation[P]>
      : GetScalarType<T[P], AggregateTeamLocation[P]>
  }




  export type TeamLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamLocationWhereInput
    orderBy?: TeamLocationOrderByWithAggregationInput | TeamLocationOrderByWithAggregationInput[]
    by: TeamLocationScalarFieldEnum[] | TeamLocationScalarFieldEnum
    having?: TeamLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamLocationCountAggregateInputType | true
    _min?: TeamLocationMinAggregateInputType
    _max?: TeamLocationMaxAggregateInputType
  }

  export type TeamLocationGroupByOutputType = {
    id: string
    teamId: string
    locationId: string
    updatedAt: Date
    createdAt: Date
    _count: TeamLocationCountAggregateOutputType | null
    _min: TeamLocationMinAggregateOutputType | null
    _max: TeamLocationMaxAggregateOutputType | null
  }

  type GetTeamLocationGroupByPayload<T extends TeamLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamLocationGroupByOutputType[P]>
            : GetScalarType<T[P], TeamLocationGroupByOutputType[P]>
        }
      >
    >


  export type TeamLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    locationId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamLocation"]>

  export type TeamLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    locationId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamLocation"]>

  export type TeamLocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    locationId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamLocation"]>

  export type TeamLocationSelectScalar = {
    id?: boolean
    teamId?: boolean
    locationId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type TeamLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamId" | "locationId" | "updatedAt" | "createdAt", ExtArgs["result"]["teamLocation"]>
  export type TeamLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type TeamLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type TeamLocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $TeamLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamLocation"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teamId: string
      locationId: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["teamLocation"]>
    composites: {}
  }

  type TeamLocationGetPayload<S extends boolean | null | undefined | TeamLocationDefaultArgs> = $Result.GetResult<Prisma.$TeamLocationPayload, S>

  type TeamLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamLocationCountAggregateInputType | true
    }

  export interface TeamLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamLocation'], meta: { name: 'TeamLocation' } }
    /**
     * Find zero or one TeamLocation that matches the filter.
     * @param {TeamLocationFindUniqueArgs} args - Arguments to find a TeamLocation
     * @example
     * // Get one TeamLocation
     * const teamLocation = await prisma.teamLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamLocationFindUniqueArgs>(args: SelectSubset<T, TeamLocationFindUniqueArgs<ExtArgs>>): Prisma__TeamLocationClient<$Result.GetResult<Prisma.$TeamLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamLocationFindUniqueOrThrowArgs} args - Arguments to find a TeamLocation
     * @example
     * // Get one TeamLocation
     * const teamLocation = await prisma.teamLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamLocationClient<$Result.GetResult<Prisma.$TeamLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamLocationFindFirstArgs} args - Arguments to find a TeamLocation
     * @example
     * // Get one TeamLocation
     * const teamLocation = await prisma.teamLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamLocationFindFirstArgs>(args?: SelectSubset<T, TeamLocationFindFirstArgs<ExtArgs>>): Prisma__TeamLocationClient<$Result.GetResult<Prisma.$TeamLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamLocationFindFirstOrThrowArgs} args - Arguments to find a TeamLocation
     * @example
     * // Get one TeamLocation
     * const teamLocation = await prisma.teamLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamLocationClient<$Result.GetResult<Prisma.$TeamLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamLocations
     * const teamLocations = await prisma.teamLocation.findMany()
     * 
     * // Get first 10 TeamLocations
     * const teamLocations = await prisma.teamLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamLocationWithIdOnly = await prisma.teamLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamLocationFindManyArgs>(args?: SelectSubset<T, TeamLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamLocation.
     * @param {TeamLocationCreateArgs} args - Arguments to create a TeamLocation.
     * @example
     * // Create one TeamLocation
     * const TeamLocation = await prisma.teamLocation.create({
     *   data: {
     *     // ... data to create a TeamLocation
     *   }
     * })
     * 
     */
    create<T extends TeamLocationCreateArgs>(args: SelectSubset<T, TeamLocationCreateArgs<ExtArgs>>): Prisma__TeamLocationClient<$Result.GetResult<Prisma.$TeamLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamLocations.
     * @param {TeamLocationCreateManyArgs} args - Arguments to create many TeamLocations.
     * @example
     * // Create many TeamLocations
     * const teamLocation = await prisma.teamLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamLocationCreateManyArgs>(args?: SelectSubset<T, TeamLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamLocations and returns the data saved in the database.
     * @param {TeamLocationCreateManyAndReturnArgs} args - Arguments to create many TeamLocations.
     * @example
     * // Create many TeamLocations
     * const teamLocation = await prisma.teamLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamLocations and only return the `id`
     * const teamLocationWithIdOnly = await prisma.teamLocation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamLocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeamLocation.
     * @param {TeamLocationDeleteArgs} args - Arguments to delete one TeamLocation.
     * @example
     * // Delete one TeamLocation
     * const TeamLocation = await prisma.teamLocation.delete({
     *   where: {
     *     // ... filter to delete one TeamLocation
     *   }
     * })
     * 
     */
    delete<T extends TeamLocationDeleteArgs>(args: SelectSubset<T, TeamLocationDeleteArgs<ExtArgs>>): Prisma__TeamLocationClient<$Result.GetResult<Prisma.$TeamLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamLocation.
     * @param {TeamLocationUpdateArgs} args - Arguments to update one TeamLocation.
     * @example
     * // Update one TeamLocation
     * const teamLocation = await prisma.teamLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamLocationUpdateArgs>(args: SelectSubset<T, TeamLocationUpdateArgs<ExtArgs>>): Prisma__TeamLocationClient<$Result.GetResult<Prisma.$TeamLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamLocations.
     * @param {TeamLocationDeleteManyArgs} args - Arguments to filter TeamLocations to delete.
     * @example
     * // Delete a few TeamLocations
     * const { count } = await prisma.teamLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamLocationDeleteManyArgs>(args?: SelectSubset<T, TeamLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamLocations
     * const teamLocation = await prisma.teamLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamLocationUpdateManyArgs>(args: SelectSubset<T, TeamLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamLocations and returns the data updated in the database.
     * @param {TeamLocationUpdateManyAndReturnArgs} args - Arguments to update many TeamLocations.
     * @example
     * // Update many TeamLocations
     * const teamLocation = await prisma.teamLocation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamLocations and only return the `id`
     * const teamLocationWithIdOnly = await prisma.teamLocation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamLocationUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamLocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamLocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeamLocation.
     * @param {TeamLocationUpsertArgs} args - Arguments to update or create a TeamLocation.
     * @example
     * // Update or create a TeamLocation
     * const teamLocation = await prisma.teamLocation.upsert({
     *   create: {
     *     // ... data to create a TeamLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamLocation we want to update
     *   }
     * })
     */
    upsert<T extends TeamLocationUpsertArgs>(args: SelectSubset<T, TeamLocationUpsertArgs<ExtArgs>>): Prisma__TeamLocationClient<$Result.GetResult<Prisma.$TeamLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamLocationCountArgs} args - Arguments to filter TeamLocations to count.
     * @example
     * // Count the number of TeamLocations
     * const count = await prisma.teamLocation.count({
     *   where: {
     *     // ... the filter for the TeamLocations we want to count
     *   }
     * })
    **/
    count<T extends TeamLocationCountArgs>(
      args?: Subset<T, TeamLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamLocationAggregateArgs>(args: Subset<T, TeamLocationAggregateArgs>): Prisma.PrismaPromise<GetTeamLocationAggregateType<T>>

    /**
     * Group by TeamLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamLocationGroupByArgs['orderBy'] }
        : { orderBy?: TeamLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamLocation model
   */
  readonly fields: TeamLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamLocation model
   */
  interface TeamLocationFieldRefs {
    readonly id: FieldRef<"TeamLocation", 'String'>
    readonly teamId: FieldRef<"TeamLocation", 'String'>
    readonly locationId: FieldRef<"TeamLocation", 'String'>
    readonly updatedAt: FieldRef<"TeamLocation", 'DateTime'>
    readonly createdAt: FieldRef<"TeamLocation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeamLocation findUnique
   */
  export type TeamLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationInclude<ExtArgs> | null
    /**
     * Filter, which TeamLocation to fetch.
     */
    where: TeamLocationWhereUniqueInput
  }

  /**
   * TeamLocation findUniqueOrThrow
   */
  export type TeamLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationInclude<ExtArgs> | null
    /**
     * Filter, which TeamLocation to fetch.
     */
    where: TeamLocationWhereUniqueInput
  }

  /**
   * TeamLocation findFirst
   */
  export type TeamLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationInclude<ExtArgs> | null
    /**
     * Filter, which TeamLocation to fetch.
     */
    where?: TeamLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamLocations to fetch.
     */
    orderBy?: TeamLocationOrderByWithRelationInput | TeamLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamLocations.
     */
    cursor?: TeamLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamLocations.
     */
    distinct?: TeamLocationScalarFieldEnum | TeamLocationScalarFieldEnum[]
  }

  /**
   * TeamLocation findFirstOrThrow
   */
  export type TeamLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationInclude<ExtArgs> | null
    /**
     * Filter, which TeamLocation to fetch.
     */
    where?: TeamLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamLocations to fetch.
     */
    orderBy?: TeamLocationOrderByWithRelationInput | TeamLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamLocations.
     */
    cursor?: TeamLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamLocations.
     */
    distinct?: TeamLocationScalarFieldEnum | TeamLocationScalarFieldEnum[]
  }

  /**
   * TeamLocation findMany
   */
  export type TeamLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationInclude<ExtArgs> | null
    /**
     * Filter, which TeamLocations to fetch.
     */
    where?: TeamLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamLocations to fetch.
     */
    orderBy?: TeamLocationOrderByWithRelationInput | TeamLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamLocations.
     */
    cursor?: TeamLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamLocations.
     */
    skip?: number
    distinct?: TeamLocationScalarFieldEnum | TeamLocationScalarFieldEnum[]
  }

  /**
   * TeamLocation create
   */
  export type TeamLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamLocation.
     */
    data: XOR<TeamLocationCreateInput, TeamLocationUncheckedCreateInput>
  }

  /**
   * TeamLocation createMany
   */
  export type TeamLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamLocations.
     */
    data: TeamLocationCreateManyInput | TeamLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamLocation createManyAndReturn
   */
  export type TeamLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * The data used to create many TeamLocations.
     */
    data: TeamLocationCreateManyInput | TeamLocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamLocation update
   */
  export type TeamLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamLocation.
     */
    data: XOR<TeamLocationUpdateInput, TeamLocationUncheckedUpdateInput>
    /**
     * Choose, which TeamLocation to update.
     */
    where: TeamLocationWhereUniqueInput
  }

  /**
   * TeamLocation updateMany
   */
  export type TeamLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamLocations.
     */
    data: XOR<TeamLocationUpdateManyMutationInput, TeamLocationUncheckedUpdateManyInput>
    /**
     * Filter which TeamLocations to update
     */
    where?: TeamLocationWhereInput
    /**
     * Limit how many TeamLocations to update.
     */
    limit?: number
  }

  /**
   * TeamLocation updateManyAndReturn
   */
  export type TeamLocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * The data used to update TeamLocations.
     */
    data: XOR<TeamLocationUpdateManyMutationInput, TeamLocationUncheckedUpdateManyInput>
    /**
     * Filter which TeamLocations to update
     */
    where?: TeamLocationWhereInput
    /**
     * Limit how many TeamLocations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamLocation upsert
   */
  export type TeamLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamLocation to update in case it exists.
     */
    where: TeamLocationWhereUniqueInput
    /**
     * In case the TeamLocation found by the `where` argument doesn't exist, create a new TeamLocation with this data.
     */
    create: XOR<TeamLocationCreateInput, TeamLocationUncheckedCreateInput>
    /**
     * In case the TeamLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamLocationUpdateInput, TeamLocationUncheckedUpdateInput>
  }

  /**
   * TeamLocation delete
   */
  export type TeamLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationInclude<ExtArgs> | null
    /**
     * Filter which TeamLocation to delete.
     */
    where: TeamLocationWhereUniqueInput
  }

  /**
   * TeamLocation deleteMany
   */
  export type TeamLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamLocations to delete
     */
    where?: TeamLocationWhereInput
    /**
     * Limit how many TeamLocations to delete.
     */
    limit?: number
  }

  /**
   * TeamLocation without action
   */
  export type TeamLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamLocation
     */
    select?: TeamLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamLocation
     */
    omit?: TeamLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamLocationInclude<ExtArgs> | null
  }


  /**
   * Model PersonContract
   */

  export type AggregatePersonContract = {
    _count: PersonContractCountAggregateOutputType | null
    _min: PersonContractMinAggregateOutputType | null
    _max: PersonContractMaxAggregateOutputType | null
  }

  export type PersonContractMinAggregateOutputType = {
    id: string | null
    personId: string | null
    teamId: string | null
    contractType: $Enums.ContractType | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type PersonContractMaxAggregateOutputType = {
    id: string | null
    personId: string | null
    teamId: string | null
    contractType: $Enums.ContractType | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type PersonContractCountAggregateOutputType = {
    id: number
    personId: number
    teamId: number
    contractType: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type PersonContractMinAggregateInputType = {
    id?: true
    personId?: true
    teamId?: true
    contractType?: true
    updatedAt?: true
    createdAt?: true
  }

  export type PersonContractMaxAggregateInputType = {
    id?: true
    personId?: true
    teamId?: true
    contractType?: true
    updatedAt?: true
    createdAt?: true
  }

  export type PersonContractCountAggregateInputType = {
    id?: true
    personId?: true
    teamId?: true
    contractType?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type PersonContractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonContract to aggregate.
     */
    where?: PersonContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonContracts to fetch.
     */
    orderBy?: PersonContractOrderByWithRelationInput | PersonContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PersonContracts
    **/
    _count?: true | PersonContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonContractMaxAggregateInputType
  }

  export type GetPersonContractAggregateType<T extends PersonContractAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonContract[P]>
      : GetScalarType<T[P], AggregatePersonContract[P]>
  }




  export type PersonContractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonContractWhereInput
    orderBy?: PersonContractOrderByWithAggregationInput | PersonContractOrderByWithAggregationInput[]
    by: PersonContractScalarFieldEnum[] | PersonContractScalarFieldEnum
    having?: PersonContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonContractCountAggregateInputType | true
    _min?: PersonContractMinAggregateInputType
    _max?: PersonContractMaxAggregateInputType
  }

  export type PersonContractGroupByOutputType = {
    id: string
    personId: string
    teamId: string
    contractType: $Enums.ContractType
    updatedAt: Date
    createdAt: Date
    _count: PersonContractCountAggregateOutputType | null
    _min: PersonContractMinAggregateOutputType | null
    _max: PersonContractMaxAggregateOutputType | null
  }

  type GetPersonContractGroupByPayload<T extends PersonContractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonContractGroupByOutputType[P]>
            : GetScalarType<T[P], PersonContractGroupByOutputType[P]>
        }
      >
    >


  export type PersonContractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personId?: boolean
    teamId?: boolean
    contractType?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    person?: boolean | PersonDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personContract"]>

  export type PersonContractSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personId?: boolean
    teamId?: boolean
    contractType?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    person?: boolean | PersonDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personContract"]>

  export type PersonContractSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personId?: boolean
    teamId?: boolean
    contractType?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    person?: boolean | PersonDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personContract"]>

  export type PersonContractSelectScalar = {
    id?: boolean
    personId?: boolean
    teamId?: boolean
    contractType?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type PersonContractOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "personId" | "teamId" | "contractType" | "updatedAt" | "createdAt", ExtArgs["result"]["personContract"]>
  export type PersonContractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    person?: boolean | PersonDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type PersonContractIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    person?: boolean | PersonDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type PersonContractIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    person?: boolean | PersonDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $PersonContractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PersonContract"
    objects: {
      person: Prisma.$PersonPayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      personId: string
      teamId: string
      contractType: $Enums.ContractType
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["personContract"]>
    composites: {}
  }

  type PersonContractGetPayload<S extends boolean | null | undefined | PersonContractDefaultArgs> = $Result.GetResult<Prisma.$PersonContractPayload, S>

  type PersonContractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PersonContractFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PersonContractCountAggregateInputType | true
    }

  export interface PersonContractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PersonContract'], meta: { name: 'PersonContract' } }
    /**
     * Find zero or one PersonContract that matches the filter.
     * @param {PersonContractFindUniqueArgs} args - Arguments to find a PersonContract
     * @example
     * // Get one PersonContract
     * const personContract = await prisma.personContract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonContractFindUniqueArgs>(args: SelectSubset<T, PersonContractFindUniqueArgs<ExtArgs>>): Prisma__PersonContractClient<$Result.GetResult<Prisma.$PersonContractPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PersonContract that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PersonContractFindUniqueOrThrowArgs} args - Arguments to find a PersonContract
     * @example
     * // Get one PersonContract
     * const personContract = await prisma.personContract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonContractFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonContractClient<$Result.GetResult<Prisma.$PersonContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PersonContract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonContractFindFirstArgs} args - Arguments to find a PersonContract
     * @example
     * // Get one PersonContract
     * const personContract = await prisma.personContract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonContractFindFirstArgs>(args?: SelectSubset<T, PersonContractFindFirstArgs<ExtArgs>>): Prisma__PersonContractClient<$Result.GetResult<Prisma.$PersonContractPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PersonContract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonContractFindFirstOrThrowArgs} args - Arguments to find a PersonContract
     * @example
     * // Get one PersonContract
     * const personContract = await prisma.personContract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonContractFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonContractFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonContractClient<$Result.GetResult<Prisma.$PersonContractPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PersonContracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonContractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PersonContracts
     * const personContracts = await prisma.personContract.findMany()
     * 
     * // Get first 10 PersonContracts
     * const personContracts = await prisma.personContract.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personContractWithIdOnly = await prisma.personContract.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PersonContractFindManyArgs>(args?: SelectSubset<T, PersonContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PersonContract.
     * @param {PersonContractCreateArgs} args - Arguments to create a PersonContract.
     * @example
     * // Create one PersonContract
     * const PersonContract = await prisma.personContract.create({
     *   data: {
     *     // ... data to create a PersonContract
     *   }
     * })
     * 
     */
    create<T extends PersonContractCreateArgs>(args: SelectSubset<T, PersonContractCreateArgs<ExtArgs>>): Prisma__PersonContractClient<$Result.GetResult<Prisma.$PersonContractPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PersonContracts.
     * @param {PersonContractCreateManyArgs} args - Arguments to create many PersonContracts.
     * @example
     * // Create many PersonContracts
     * const personContract = await prisma.personContract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonContractCreateManyArgs>(args?: SelectSubset<T, PersonContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PersonContracts and returns the data saved in the database.
     * @param {PersonContractCreateManyAndReturnArgs} args - Arguments to create many PersonContracts.
     * @example
     * // Create many PersonContracts
     * const personContract = await prisma.personContract.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PersonContracts and only return the `id`
     * const personContractWithIdOnly = await prisma.personContract.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PersonContractCreateManyAndReturnArgs>(args?: SelectSubset<T, PersonContractCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonContractPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PersonContract.
     * @param {PersonContractDeleteArgs} args - Arguments to delete one PersonContract.
     * @example
     * // Delete one PersonContract
     * const PersonContract = await prisma.personContract.delete({
     *   where: {
     *     // ... filter to delete one PersonContract
     *   }
     * })
     * 
     */
    delete<T extends PersonContractDeleteArgs>(args: SelectSubset<T, PersonContractDeleteArgs<ExtArgs>>): Prisma__PersonContractClient<$Result.GetResult<Prisma.$PersonContractPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PersonContract.
     * @param {PersonContractUpdateArgs} args - Arguments to update one PersonContract.
     * @example
     * // Update one PersonContract
     * const personContract = await prisma.personContract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonContractUpdateArgs>(args: SelectSubset<T, PersonContractUpdateArgs<ExtArgs>>): Prisma__PersonContractClient<$Result.GetResult<Prisma.$PersonContractPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PersonContracts.
     * @param {PersonContractDeleteManyArgs} args - Arguments to filter PersonContracts to delete.
     * @example
     * // Delete a few PersonContracts
     * const { count } = await prisma.personContract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonContractDeleteManyArgs>(args?: SelectSubset<T, PersonContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PersonContracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PersonContracts
     * const personContract = await prisma.personContract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonContractUpdateManyArgs>(args: SelectSubset<T, PersonContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PersonContracts and returns the data updated in the database.
     * @param {PersonContractUpdateManyAndReturnArgs} args - Arguments to update many PersonContracts.
     * @example
     * // Update many PersonContracts
     * const personContract = await prisma.personContract.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PersonContracts and only return the `id`
     * const personContractWithIdOnly = await prisma.personContract.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PersonContractUpdateManyAndReturnArgs>(args: SelectSubset<T, PersonContractUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonContractPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PersonContract.
     * @param {PersonContractUpsertArgs} args - Arguments to update or create a PersonContract.
     * @example
     * // Update or create a PersonContract
     * const personContract = await prisma.personContract.upsert({
     *   create: {
     *     // ... data to create a PersonContract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PersonContract we want to update
     *   }
     * })
     */
    upsert<T extends PersonContractUpsertArgs>(args: SelectSubset<T, PersonContractUpsertArgs<ExtArgs>>): Prisma__PersonContractClient<$Result.GetResult<Prisma.$PersonContractPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PersonContracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonContractCountArgs} args - Arguments to filter PersonContracts to count.
     * @example
     * // Count the number of PersonContracts
     * const count = await prisma.personContract.count({
     *   where: {
     *     // ... the filter for the PersonContracts we want to count
     *   }
     * })
    **/
    count<T extends PersonContractCountArgs>(
      args?: Subset<T, PersonContractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PersonContract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonContractAggregateArgs>(args: Subset<T, PersonContractAggregateArgs>): Prisma.PrismaPromise<GetPersonContractAggregateType<T>>

    /**
     * Group by PersonContract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonContractGroupByArgs['orderBy'] }
        : { orderBy?: PersonContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PersonContract model
   */
  readonly fields: PersonContractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PersonContract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonContractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PersonContract model
   */
  interface PersonContractFieldRefs {
    readonly id: FieldRef<"PersonContract", 'String'>
    readonly personId: FieldRef<"PersonContract", 'String'>
    readonly teamId: FieldRef<"PersonContract", 'String'>
    readonly contractType: FieldRef<"PersonContract", 'ContractType'>
    readonly updatedAt: FieldRef<"PersonContract", 'DateTime'>
    readonly createdAt: FieldRef<"PersonContract", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PersonContract findUnique
   */
  export type PersonContractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractInclude<ExtArgs> | null
    /**
     * Filter, which PersonContract to fetch.
     */
    where: PersonContractWhereUniqueInput
  }

  /**
   * PersonContract findUniqueOrThrow
   */
  export type PersonContractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractInclude<ExtArgs> | null
    /**
     * Filter, which PersonContract to fetch.
     */
    where: PersonContractWhereUniqueInput
  }

  /**
   * PersonContract findFirst
   */
  export type PersonContractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractInclude<ExtArgs> | null
    /**
     * Filter, which PersonContract to fetch.
     */
    where?: PersonContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonContracts to fetch.
     */
    orderBy?: PersonContractOrderByWithRelationInput | PersonContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonContracts.
     */
    cursor?: PersonContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonContracts.
     */
    distinct?: PersonContractScalarFieldEnum | PersonContractScalarFieldEnum[]
  }

  /**
   * PersonContract findFirstOrThrow
   */
  export type PersonContractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractInclude<ExtArgs> | null
    /**
     * Filter, which PersonContract to fetch.
     */
    where?: PersonContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonContracts to fetch.
     */
    orderBy?: PersonContractOrderByWithRelationInput | PersonContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonContracts.
     */
    cursor?: PersonContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonContracts.
     */
    distinct?: PersonContractScalarFieldEnum | PersonContractScalarFieldEnum[]
  }

  /**
   * PersonContract findMany
   */
  export type PersonContractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractInclude<ExtArgs> | null
    /**
     * Filter, which PersonContracts to fetch.
     */
    where?: PersonContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonContracts to fetch.
     */
    orderBy?: PersonContractOrderByWithRelationInput | PersonContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PersonContracts.
     */
    cursor?: PersonContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonContracts.
     */
    skip?: number
    distinct?: PersonContractScalarFieldEnum | PersonContractScalarFieldEnum[]
  }

  /**
   * PersonContract create
   */
  export type PersonContractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractInclude<ExtArgs> | null
    /**
     * The data needed to create a PersonContract.
     */
    data: XOR<PersonContractCreateInput, PersonContractUncheckedCreateInput>
  }

  /**
   * PersonContract createMany
   */
  export type PersonContractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PersonContracts.
     */
    data: PersonContractCreateManyInput | PersonContractCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PersonContract createManyAndReturn
   */
  export type PersonContractCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * The data used to create many PersonContracts.
     */
    data: PersonContractCreateManyInput | PersonContractCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PersonContract update
   */
  export type PersonContractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractInclude<ExtArgs> | null
    /**
     * The data needed to update a PersonContract.
     */
    data: XOR<PersonContractUpdateInput, PersonContractUncheckedUpdateInput>
    /**
     * Choose, which PersonContract to update.
     */
    where: PersonContractWhereUniqueInput
  }

  /**
   * PersonContract updateMany
   */
  export type PersonContractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PersonContracts.
     */
    data: XOR<PersonContractUpdateManyMutationInput, PersonContractUncheckedUpdateManyInput>
    /**
     * Filter which PersonContracts to update
     */
    where?: PersonContractWhereInput
    /**
     * Limit how many PersonContracts to update.
     */
    limit?: number
  }

  /**
   * PersonContract updateManyAndReturn
   */
  export type PersonContractUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * The data used to update PersonContracts.
     */
    data: XOR<PersonContractUpdateManyMutationInput, PersonContractUncheckedUpdateManyInput>
    /**
     * Filter which PersonContracts to update
     */
    where?: PersonContractWhereInput
    /**
     * Limit how many PersonContracts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PersonContract upsert
   */
  export type PersonContractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractInclude<ExtArgs> | null
    /**
     * The filter to search for the PersonContract to update in case it exists.
     */
    where: PersonContractWhereUniqueInput
    /**
     * In case the PersonContract found by the `where` argument doesn't exist, create a new PersonContract with this data.
     */
    create: XOR<PersonContractCreateInput, PersonContractUncheckedCreateInput>
    /**
     * In case the PersonContract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonContractUpdateInput, PersonContractUncheckedUpdateInput>
  }

  /**
   * PersonContract delete
   */
  export type PersonContractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractInclude<ExtArgs> | null
    /**
     * Filter which PersonContract to delete.
     */
    where: PersonContractWhereUniqueInput
  }

  /**
   * PersonContract deleteMany
   */
  export type PersonContractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonContracts to delete
     */
    where?: PersonContractWhereInput
    /**
     * Limit how many PersonContracts to delete.
     */
    limit?: number
  }

  /**
   * PersonContract without action
   */
  export type PersonContractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonContract
     */
    select?: PersonContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonContract
     */
    omit?: PersonContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonContractInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    role: 'role',
    banned: 'banned',
    banReason: 'banReason',
    banExpires: 'banExpires'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    expiresAt: 'expiresAt',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    userId: 'userId',
    impersonatedBy: 'impersonatedBy'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    scope: 'scope',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    value: 'value',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const RegionScalarFieldEnum: {
    id: 'id',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]


  export const RegionI18nScalarFieldEnum: {
    id: 'id',
    regionId: 'regionId',
    language: 'language',
    name: 'name',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type RegionI18nScalarFieldEnum = (typeof RegionI18nScalarFieldEnum)[keyof typeof RegionI18nScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    type: 'type',
    regionId: 'regionId',
    latitude: 'latitude',
    longitude: 'longitude',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const LocationI18nScalarFieldEnum: {
    id: 'id',
    locationId: 'locationId',
    language: 'language',
    name: 'name',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type LocationI18nScalarFieldEnum = (typeof LocationI18nScalarFieldEnum)[keyof typeof LocationI18nScalarFieldEnum]


  export const TownInformationScalarFieldEnum: {
    id: 'id',
    locationId: 'locationId',
    population: 'population',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type TownInformationScalarFieldEnum = (typeof TownInformationScalarFieldEnum)[keyof typeof TownInformationScalarFieldEnum]


  export const RouteScalarFieldEnum: {
    id: 'id',
    type: 'type',
    fromId: 'fromId',
    toId: 'toId',
    distance: 'distance',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type RouteScalarFieldEnum = (typeof RouteScalarFieldEnum)[keyof typeof RouteScalarFieldEnum]


  export const BuildingTypeScalarFieldEnum: {
    id: 'id',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type BuildingTypeScalarFieldEnum = (typeof BuildingTypeScalarFieldEnum)[keyof typeof BuildingTypeScalarFieldEnum]


  export const BuildingTypeI18nScalarFieldEnum: {
    id: 'id',
    buildingTypeId: 'buildingTypeId',
    language: 'language',
    name: 'name',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type BuildingTypeI18nScalarFieldEnum = (typeof BuildingTypeI18nScalarFieldEnum)[keyof typeof BuildingTypeI18nScalarFieldEnum]


  export const BuildingScalarFieldEnum: {
    id: 'id',
    buildingTypeId: 'buildingTypeId',
    locationId: 'locationId',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type BuildingScalarFieldEnum = (typeof BuildingScalarFieldEnum)[keyof typeof BuildingScalarFieldEnum]


  export const BuildingI18nScalarFieldEnum: {
    id: 'id',
    buildingId: 'buildingId',
    language: 'language',
    name: 'name',
    description: 'description',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type BuildingI18nScalarFieldEnum = (typeof BuildingI18nScalarFieldEnum)[keyof typeof BuildingI18nScalarFieldEnum]


  export const StadiumInfoScalarFieldEnum: {
    id: 'id',
    buildingId: 'buildingId',
    capacity: 'capacity',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type StadiumInfoScalarFieldEnum = (typeof StadiumInfoScalarFieldEnum)[keyof typeof StadiumInfoScalarFieldEnum]


  export const RaceScalarFieldEnum: {
    id: 'id',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type RaceScalarFieldEnum = (typeof RaceScalarFieldEnum)[keyof typeof RaceScalarFieldEnum]


  export const RaceI18nScalarFieldEnum: {
    id: 'id',
    raceId: 'raceId',
    language: 'language',
    name: 'name',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type RaceI18nScalarFieldEnum = (typeof RaceI18nScalarFieldEnum)[keyof typeof RaceI18nScalarFieldEnum]


  export const CultureScalarFieldEnum: {
    id: 'id',
    raceId: 'raceId',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type CultureScalarFieldEnum = (typeof CultureScalarFieldEnum)[keyof typeof CultureScalarFieldEnum]


  export const CultureI18nScalarFieldEnum: {
    id: 'id',
    cultureId: 'cultureId',
    language: 'language',
    name: 'name',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type CultureI18nScalarFieldEnum = (typeof CultureI18nScalarFieldEnum)[keyof typeof CultureI18nScalarFieldEnum]


  export const RegionPopulationScalarFieldEnum: {
    id: 'id',
    regionId: 'regionId',
    cultureId: 'cultureId',
    percentage: 'percentage',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type RegionPopulationScalarFieldEnum = (typeof RegionPopulationScalarFieldEnum)[keyof typeof RegionPopulationScalarFieldEnum]


  export const NameModelScalarFieldEnum: {
    id: 'id',
    cultureId: 'cultureId',
    sex: 'sex',
    firstnameTemplate: 'firstnameTemplate',
    lastnameTemplate: 'lastnameTemplate',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type NameModelScalarFieldEnum = (typeof NameModelScalarFieldEnum)[keyof typeof NameModelScalarFieldEnum]


  export const NameComponentKeyScalarFieldEnum: {
    id: 'id',
    key: 'key',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type NameComponentKeyScalarFieldEnum = (typeof NameComponentKeyScalarFieldEnum)[keyof typeof NameComponentKeyScalarFieldEnum]


  export const NameComponentValueScalarFieldEnum: {
    id: 'id',
    keyId: 'keyId',
    value: 'value',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type NameComponentValueScalarFieldEnum = (typeof NameComponentValueScalarFieldEnum)[keyof typeof NameComponentValueScalarFieldEnum]


  export const PersonScalarFieldEnum: {
    id: 'id',
    name: 'name',
    shortName: 'shortName',
    raceId: 'raceId',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type PersonScalarFieldEnum = (typeof PersonScalarFieldEnum)[keyof typeof PersonScalarFieldEnum]


  export const PlayerCharacteristicsScalarFieldEnum: {
    id: 'id',
    playerId: 'playerId',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type PlayerCharacteristicsScalarFieldEnum = (typeof PlayerCharacteristicsScalarFieldEnum)[keyof typeof PlayerCharacteristicsScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    shortName: 'shortName',
    isActive: 'isActive',
    ownerId: 'ownerId',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const TeamLocationScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    locationId: 'locationId',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type TeamLocationScalarFieldEnum = (typeof TeamLocationScalarFieldEnum)[keyof typeof TeamLocationScalarFieldEnum]


  export const PersonContractScalarFieldEnum: {
    id: 'id',
    personId: 'personId',
    teamId: 'teamId',
    contractType: 'contractType',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type PersonContractScalarFieldEnum = (typeof PersonContractScalarFieldEnum)[keyof typeof PersonContractScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'LocationType'
   */
  export type EnumLocationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LocationType'>
    


  /**
   * Reference to a field of type 'LocationType[]'
   */
  export type ListEnumLocationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LocationType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'RouteType'
   */
  export type EnumRouteTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RouteType'>
    


  /**
   * Reference to a field of type 'RouteType[]'
   */
  export type ListEnumRouteTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RouteType[]'>
    


  /**
   * Reference to a field of type 'SexType'
   */
  export type EnumSexTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SexType'>
    


  /**
   * Reference to a field of type 'SexType[]'
   */
  export type ListEnumSexTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SexType[]'>
    


  /**
   * Reference to a field of type 'ContractType'
   */
  export type EnumContractTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractType'>
    


  /**
   * Reference to a field of type 'ContractType[]'
   */
  export type ListEnumContractTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: StringFilter<"User"> | string
    banned?: BoolNullableFilter<"User"> | boolean | null
    banReason?: StringNullableFilter<"User"> | string | null
    banExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    teams?: TeamListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    banned?: SortOrderInput | SortOrder
    banReason?: SortOrderInput | SortOrder
    banExpires?: SortOrderInput | SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    teams?: TeamOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: StringFilter<"User"> | string
    banned?: BoolNullableFilter<"User"> | boolean | null
    banReason?: StringNullableFilter<"User"> | string | null
    banExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    teams?: TeamListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    banned?: SortOrderInput | SortOrder
    banReason?: SortOrderInput | SortOrder
    banExpires?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    role?: StringWithAggregatesFilter<"User"> | string
    banned?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    banReason?: StringNullableWithAggregatesFilter<"User"> | string | null
    banExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    token?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userId?: StringWithAggregatesFilter<"Session"> | string
    impersonatedBy?: StringNullableWithAggregatesFilter<"Session"> | string | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    accountId?: StringWithAggregatesFilter<"Account"> | string
    providerId?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    idToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    password?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type VerificationWhereInput = {
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    id?: StringFilter<"Verification"> | string
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
  }

  export type VerificationOrderByWithRelationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
  }

  export type VerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
  }, "id">

  export type VerificationOrderByWithAggregationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    OR?: VerificationScalarWhereWithAggregatesInput[]
    NOT?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Verification"> | string
    identifier?: StringWithAggregatesFilter<"Verification"> | string
    value?: StringWithAggregatesFilter<"Verification"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Verification"> | Date | string | null
  }

  export type RegionWhereInput = {
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    id?: StringFilter<"Region"> | string
    updatedAt?: DateTimeFilter<"Region"> | Date | string
    createdAt?: DateTimeFilter<"Region"> | Date | string
    i18n?: RegionI18nListRelationFilter
    locations?: LocationListRelationFilter
    regionPopulations?: RegionPopulationListRelationFilter
  }

  export type RegionOrderByWithRelationInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    i18n?: RegionI18nOrderByRelationAggregateInput
    locations?: LocationOrderByRelationAggregateInput
    regionPopulations?: RegionPopulationOrderByRelationAggregateInput
  }

  export type RegionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    updatedAt?: DateTimeFilter<"Region"> | Date | string
    createdAt?: DateTimeFilter<"Region"> | Date | string
    i18n?: RegionI18nListRelationFilter
    locations?: LocationListRelationFilter
    regionPopulations?: RegionPopulationListRelationFilter
  }, "id" | "id">

  export type RegionOrderByWithAggregationInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: RegionCountOrderByAggregateInput
    _max?: RegionMaxOrderByAggregateInput
    _min?: RegionMinOrderByAggregateInput
  }

  export type RegionScalarWhereWithAggregatesInput = {
    AND?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    OR?: RegionScalarWhereWithAggregatesInput[]
    NOT?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Region"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Region"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Region"> | Date | string
  }

  export type RegionI18nWhereInput = {
    AND?: RegionI18nWhereInput | RegionI18nWhereInput[]
    OR?: RegionI18nWhereInput[]
    NOT?: RegionI18nWhereInput | RegionI18nWhereInput[]
    id?: StringFilter<"RegionI18n"> | string
    regionId?: StringFilter<"RegionI18n"> | string
    language?: StringFilter<"RegionI18n"> | string
    name?: StringFilter<"RegionI18n"> | string
    updatedAt?: DateTimeFilter<"RegionI18n"> | Date | string
    createdAt?: DateTimeFilter<"RegionI18n"> | Date | string
    region?: XOR<RegionScalarRelationFilter, RegionWhereInput>
  }

  export type RegionI18nOrderByWithRelationInput = {
    id?: SortOrder
    regionId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    region?: RegionOrderByWithRelationInput
  }

  export type RegionI18nWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    regionId_language?: RegionI18nRegionIdLanguageCompoundUniqueInput
    AND?: RegionI18nWhereInput | RegionI18nWhereInput[]
    OR?: RegionI18nWhereInput[]
    NOT?: RegionI18nWhereInput | RegionI18nWhereInput[]
    regionId?: StringFilter<"RegionI18n"> | string
    language?: StringFilter<"RegionI18n"> | string
    name?: StringFilter<"RegionI18n"> | string
    updatedAt?: DateTimeFilter<"RegionI18n"> | Date | string
    createdAt?: DateTimeFilter<"RegionI18n"> | Date | string
    region?: XOR<RegionScalarRelationFilter, RegionWhereInput>
  }, "id" | "regionId_language">

  export type RegionI18nOrderByWithAggregationInput = {
    id?: SortOrder
    regionId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: RegionI18nCountOrderByAggregateInput
    _max?: RegionI18nMaxOrderByAggregateInput
    _min?: RegionI18nMinOrderByAggregateInput
  }

  export type RegionI18nScalarWhereWithAggregatesInput = {
    AND?: RegionI18nScalarWhereWithAggregatesInput | RegionI18nScalarWhereWithAggregatesInput[]
    OR?: RegionI18nScalarWhereWithAggregatesInput[]
    NOT?: RegionI18nScalarWhereWithAggregatesInput | RegionI18nScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RegionI18n"> | string
    regionId?: StringWithAggregatesFilter<"RegionI18n"> | string
    language?: StringWithAggregatesFilter<"RegionI18n"> | string
    name?: StringWithAggregatesFilter<"RegionI18n"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"RegionI18n"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RegionI18n"> | Date | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: StringFilter<"Location"> | string
    type?: EnumLocationTypeFilter<"Location"> | $Enums.LocationType
    regionId?: StringFilter<"Location"> | string
    latitude?: FloatFilter<"Location"> | number
    longitude?: FloatFilter<"Location"> | number
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    createdAt?: DateTimeFilter<"Location"> | Date | string
    i18n?: LocationI18nListRelationFilter
    buildings?: BuildingListRelationFilter
    region?: XOR<RegionScalarRelationFilter, RegionWhereInput>
    routesFrom?: RouteListRelationFilter
    routesTo?: RouteListRelationFilter
    teams?: TeamLocationListRelationFilter
    townInfo?: XOR<TownInformationNullableScalarRelationFilter, TownInformationWhereInput> | null
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    regionId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    i18n?: LocationI18nOrderByRelationAggregateInput
    buildings?: BuildingOrderByRelationAggregateInput
    region?: RegionOrderByWithRelationInput
    routesFrom?: RouteOrderByRelationAggregateInput
    routesTo?: RouteOrderByRelationAggregateInput
    teams?: TeamLocationOrderByRelationAggregateInput
    townInfo?: TownInformationOrderByWithRelationInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    type?: EnumLocationTypeFilter<"Location"> | $Enums.LocationType
    regionId?: StringFilter<"Location"> | string
    latitude?: FloatFilter<"Location"> | number
    longitude?: FloatFilter<"Location"> | number
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    createdAt?: DateTimeFilter<"Location"> | Date | string
    i18n?: LocationI18nListRelationFilter
    buildings?: BuildingListRelationFilter
    region?: XOR<RegionScalarRelationFilter, RegionWhereInput>
    routesFrom?: RouteListRelationFilter
    routesTo?: RouteListRelationFilter
    teams?: TeamLocationListRelationFilter
    townInfo?: XOR<TownInformationNullableScalarRelationFilter, TownInformationWhereInput> | null
  }, "id" | "id">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    regionId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Location"> | string
    type?: EnumLocationTypeWithAggregatesFilter<"Location"> | $Enums.LocationType
    regionId?: StringWithAggregatesFilter<"Location"> | string
    latitude?: FloatWithAggregatesFilter<"Location"> | number
    longitude?: FloatWithAggregatesFilter<"Location"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
  }

  export type LocationI18nWhereInput = {
    AND?: LocationI18nWhereInput | LocationI18nWhereInput[]
    OR?: LocationI18nWhereInput[]
    NOT?: LocationI18nWhereInput | LocationI18nWhereInput[]
    id?: StringFilter<"LocationI18n"> | string
    locationId?: StringFilter<"LocationI18n"> | string
    language?: StringFilter<"LocationI18n"> | string
    name?: StringFilter<"LocationI18n"> | string
    updatedAt?: DateTimeFilter<"LocationI18n"> | Date | string
    createdAt?: DateTimeFilter<"LocationI18n"> | Date | string
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }

  export type LocationI18nOrderByWithRelationInput = {
    id?: SortOrder
    locationId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    location?: LocationOrderByWithRelationInput
  }

  export type LocationI18nWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    locationId_language?: LocationI18nLocationIdLanguageCompoundUniqueInput
    AND?: LocationI18nWhereInput | LocationI18nWhereInput[]
    OR?: LocationI18nWhereInput[]
    NOT?: LocationI18nWhereInput | LocationI18nWhereInput[]
    locationId?: StringFilter<"LocationI18n"> | string
    language?: StringFilter<"LocationI18n"> | string
    name?: StringFilter<"LocationI18n"> | string
    updatedAt?: DateTimeFilter<"LocationI18n"> | Date | string
    createdAt?: DateTimeFilter<"LocationI18n"> | Date | string
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }, "id" | "locationId_language">

  export type LocationI18nOrderByWithAggregationInput = {
    id?: SortOrder
    locationId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: LocationI18nCountOrderByAggregateInput
    _max?: LocationI18nMaxOrderByAggregateInput
    _min?: LocationI18nMinOrderByAggregateInput
  }

  export type LocationI18nScalarWhereWithAggregatesInput = {
    AND?: LocationI18nScalarWhereWithAggregatesInput | LocationI18nScalarWhereWithAggregatesInput[]
    OR?: LocationI18nScalarWhereWithAggregatesInput[]
    NOT?: LocationI18nScalarWhereWithAggregatesInput | LocationI18nScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LocationI18n"> | string
    locationId?: StringWithAggregatesFilter<"LocationI18n"> | string
    language?: StringWithAggregatesFilter<"LocationI18n"> | string
    name?: StringWithAggregatesFilter<"LocationI18n"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"LocationI18n"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"LocationI18n"> | Date | string
  }

  export type TownInformationWhereInput = {
    AND?: TownInformationWhereInput | TownInformationWhereInput[]
    OR?: TownInformationWhereInput[]
    NOT?: TownInformationWhereInput | TownInformationWhereInput[]
    id?: StringFilter<"TownInformation"> | string
    locationId?: StringFilter<"TownInformation"> | string
    population?: IntFilter<"TownInformation"> | number
    updatedAt?: DateTimeFilter<"TownInformation"> | Date | string
    createdAt?: DateTimeFilter<"TownInformation"> | Date | string
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }

  export type TownInformationOrderByWithRelationInput = {
    id?: SortOrder
    locationId?: SortOrder
    population?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    location?: LocationOrderByWithRelationInput
  }

  export type TownInformationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    locationId?: string
    AND?: TownInformationWhereInput | TownInformationWhereInput[]
    OR?: TownInformationWhereInput[]
    NOT?: TownInformationWhereInput | TownInformationWhereInput[]
    population?: IntFilter<"TownInformation"> | number
    updatedAt?: DateTimeFilter<"TownInformation"> | Date | string
    createdAt?: DateTimeFilter<"TownInformation"> | Date | string
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }, "id" | "locationId">

  export type TownInformationOrderByWithAggregationInput = {
    id?: SortOrder
    locationId?: SortOrder
    population?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: TownInformationCountOrderByAggregateInput
    _avg?: TownInformationAvgOrderByAggregateInput
    _max?: TownInformationMaxOrderByAggregateInput
    _min?: TownInformationMinOrderByAggregateInput
    _sum?: TownInformationSumOrderByAggregateInput
  }

  export type TownInformationScalarWhereWithAggregatesInput = {
    AND?: TownInformationScalarWhereWithAggregatesInput | TownInformationScalarWhereWithAggregatesInput[]
    OR?: TownInformationScalarWhereWithAggregatesInput[]
    NOT?: TownInformationScalarWhereWithAggregatesInput | TownInformationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TownInformation"> | string
    locationId?: StringWithAggregatesFilter<"TownInformation"> | string
    population?: IntWithAggregatesFilter<"TownInformation"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"TownInformation"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"TownInformation"> | Date | string
  }

  export type RouteWhereInput = {
    AND?: RouteWhereInput | RouteWhereInput[]
    OR?: RouteWhereInput[]
    NOT?: RouteWhereInput | RouteWhereInput[]
    id?: StringFilter<"Route"> | string
    type?: EnumRouteTypeFilter<"Route"> | $Enums.RouteType
    fromId?: StringFilter<"Route"> | string
    toId?: StringFilter<"Route"> | string
    distance?: FloatFilter<"Route"> | number
    updatedAt?: DateTimeFilter<"Route"> | Date | string
    createdAt?: DateTimeFilter<"Route"> | Date | string
    locationFrom?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    locationTo?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }

  export type RouteOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    fromId?: SortOrder
    toId?: SortOrder
    distance?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    locationFrom?: LocationOrderByWithRelationInput
    locationTo?: LocationOrderByWithRelationInput
  }

  export type RouteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RouteWhereInput | RouteWhereInput[]
    OR?: RouteWhereInput[]
    NOT?: RouteWhereInput | RouteWhereInput[]
    type?: EnumRouteTypeFilter<"Route"> | $Enums.RouteType
    fromId?: StringFilter<"Route"> | string
    toId?: StringFilter<"Route"> | string
    distance?: FloatFilter<"Route"> | number
    updatedAt?: DateTimeFilter<"Route"> | Date | string
    createdAt?: DateTimeFilter<"Route"> | Date | string
    locationFrom?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    locationTo?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }, "id">

  export type RouteOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    fromId?: SortOrder
    toId?: SortOrder
    distance?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: RouteCountOrderByAggregateInput
    _avg?: RouteAvgOrderByAggregateInput
    _max?: RouteMaxOrderByAggregateInput
    _min?: RouteMinOrderByAggregateInput
    _sum?: RouteSumOrderByAggregateInput
  }

  export type RouteScalarWhereWithAggregatesInput = {
    AND?: RouteScalarWhereWithAggregatesInput | RouteScalarWhereWithAggregatesInput[]
    OR?: RouteScalarWhereWithAggregatesInput[]
    NOT?: RouteScalarWhereWithAggregatesInput | RouteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Route"> | string
    type?: EnumRouteTypeWithAggregatesFilter<"Route"> | $Enums.RouteType
    fromId?: StringWithAggregatesFilter<"Route"> | string
    toId?: StringWithAggregatesFilter<"Route"> | string
    distance?: FloatWithAggregatesFilter<"Route"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"Route"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Route"> | Date | string
  }

  export type BuildingTypeWhereInput = {
    AND?: BuildingTypeWhereInput | BuildingTypeWhereInput[]
    OR?: BuildingTypeWhereInput[]
    NOT?: BuildingTypeWhereInput | BuildingTypeWhereInput[]
    id?: StringFilter<"BuildingType"> | string
    updatedAt?: DateTimeFilter<"BuildingType"> | Date | string
    createdAt?: DateTimeFilter<"BuildingType"> | Date | string
    i18n?: BuildingTypeI18nListRelationFilter
    buildings?: BuildingListRelationFilter
  }

  export type BuildingTypeOrderByWithRelationInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    i18n?: BuildingTypeI18nOrderByRelationAggregateInput
    buildings?: BuildingOrderByRelationAggregateInput
  }

  export type BuildingTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BuildingTypeWhereInput | BuildingTypeWhereInput[]
    OR?: BuildingTypeWhereInput[]
    NOT?: BuildingTypeWhereInput | BuildingTypeWhereInput[]
    updatedAt?: DateTimeFilter<"BuildingType"> | Date | string
    createdAt?: DateTimeFilter<"BuildingType"> | Date | string
    i18n?: BuildingTypeI18nListRelationFilter
    buildings?: BuildingListRelationFilter
  }, "id" | "id">

  export type BuildingTypeOrderByWithAggregationInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: BuildingTypeCountOrderByAggregateInput
    _max?: BuildingTypeMaxOrderByAggregateInput
    _min?: BuildingTypeMinOrderByAggregateInput
  }

  export type BuildingTypeScalarWhereWithAggregatesInput = {
    AND?: BuildingTypeScalarWhereWithAggregatesInput | BuildingTypeScalarWhereWithAggregatesInput[]
    OR?: BuildingTypeScalarWhereWithAggregatesInput[]
    NOT?: BuildingTypeScalarWhereWithAggregatesInput | BuildingTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BuildingType"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"BuildingType"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"BuildingType"> | Date | string
  }

  export type BuildingTypeI18nWhereInput = {
    AND?: BuildingTypeI18nWhereInput | BuildingTypeI18nWhereInput[]
    OR?: BuildingTypeI18nWhereInput[]
    NOT?: BuildingTypeI18nWhereInput | BuildingTypeI18nWhereInput[]
    id?: StringFilter<"BuildingTypeI18n"> | string
    buildingTypeId?: StringFilter<"BuildingTypeI18n"> | string
    language?: StringFilter<"BuildingTypeI18n"> | string
    name?: StringFilter<"BuildingTypeI18n"> | string
    updatedAt?: DateTimeFilter<"BuildingTypeI18n"> | Date | string
    createdAt?: DateTimeFilter<"BuildingTypeI18n"> | Date | string
    buildingType?: XOR<BuildingTypeScalarRelationFilter, BuildingTypeWhereInput>
  }

  export type BuildingTypeI18nOrderByWithRelationInput = {
    id?: SortOrder
    buildingTypeId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    buildingType?: BuildingTypeOrderByWithRelationInput
  }

  export type BuildingTypeI18nWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    buildingTypeId_language?: BuildingTypeI18nBuildingTypeIdLanguageCompoundUniqueInput
    AND?: BuildingTypeI18nWhereInput | BuildingTypeI18nWhereInput[]
    OR?: BuildingTypeI18nWhereInput[]
    NOT?: BuildingTypeI18nWhereInput | BuildingTypeI18nWhereInput[]
    buildingTypeId?: StringFilter<"BuildingTypeI18n"> | string
    language?: StringFilter<"BuildingTypeI18n"> | string
    name?: StringFilter<"BuildingTypeI18n"> | string
    updatedAt?: DateTimeFilter<"BuildingTypeI18n"> | Date | string
    createdAt?: DateTimeFilter<"BuildingTypeI18n"> | Date | string
    buildingType?: XOR<BuildingTypeScalarRelationFilter, BuildingTypeWhereInput>
  }, "id" | "buildingTypeId_language">

  export type BuildingTypeI18nOrderByWithAggregationInput = {
    id?: SortOrder
    buildingTypeId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: BuildingTypeI18nCountOrderByAggregateInput
    _max?: BuildingTypeI18nMaxOrderByAggregateInput
    _min?: BuildingTypeI18nMinOrderByAggregateInput
  }

  export type BuildingTypeI18nScalarWhereWithAggregatesInput = {
    AND?: BuildingTypeI18nScalarWhereWithAggregatesInput | BuildingTypeI18nScalarWhereWithAggregatesInput[]
    OR?: BuildingTypeI18nScalarWhereWithAggregatesInput[]
    NOT?: BuildingTypeI18nScalarWhereWithAggregatesInput | BuildingTypeI18nScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BuildingTypeI18n"> | string
    buildingTypeId?: StringWithAggregatesFilter<"BuildingTypeI18n"> | string
    language?: StringWithAggregatesFilter<"BuildingTypeI18n"> | string
    name?: StringWithAggregatesFilter<"BuildingTypeI18n"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"BuildingTypeI18n"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"BuildingTypeI18n"> | Date | string
  }

  export type BuildingWhereInput = {
    AND?: BuildingWhereInput | BuildingWhereInput[]
    OR?: BuildingWhereInput[]
    NOT?: BuildingWhereInput | BuildingWhereInput[]
    id?: StringFilter<"Building"> | string
    buildingTypeId?: StringFilter<"Building"> | string
    locationId?: StringFilter<"Building"> | string
    updatedAt?: DateTimeFilter<"Building"> | Date | string
    createdAt?: DateTimeFilter<"Building"> | Date | string
    buildingType?: XOR<BuildingTypeScalarRelationFilter, BuildingTypeWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    i18n?: BuildingI18nListRelationFilter
    stadiumInfo?: XOR<StadiumInfoNullableScalarRelationFilter, StadiumInfoWhereInput> | null
  }

  export type BuildingOrderByWithRelationInput = {
    id?: SortOrder
    buildingTypeId?: SortOrder
    locationId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    buildingType?: BuildingTypeOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
    i18n?: BuildingI18nOrderByRelationAggregateInput
    stadiumInfo?: StadiumInfoOrderByWithRelationInput
  }

  export type BuildingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BuildingWhereInput | BuildingWhereInput[]
    OR?: BuildingWhereInput[]
    NOT?: BuildingWhereInput | BuildingWhereInput[]
    buildingTypeId?: StringFilter<"Building"> | string
    locationId?: StringFilter<"Building"> | string
    updatedAt?: DateTimeFilter<"Building"> | Date | string
    createdAt?: DateTimeFilter<"Building"> | Date | string
    buildingType?: XOR<BuildingTypeScalarRelationFilter, BuildingTypeWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    i18n?: BuildingI18nListRelationFilter
    stadiumInfo?: XOR<StadiumInfoNullableScalarRelationFilter, StadiumInfoWhereInput> | null
  }, "id">

  export type BuildingOrderByWithAggregationInput = {
    id?: SortOrder
    buildingTypeId?: SortOrder
    locationId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: BuildingCountOrderByAggregateInput
    _max?: BuildingMaxOrderByAggregateInput
    _min?: BuildingMinOrderByAggregateInput
  }

  export type BuildingScalarWhereWithAggregatesInput = {
    AND?: BuildingScalarWhereWithAggregatesInput | BuildingScalarWhereWithAggregatesInput[]
    OR?: BuildingScalarWhereWithAggregatesInput[]
    NOT?: BuildingScalarWhereWithAggregatesInput | BuildingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Building"> | string
    buildingTypeId?: StringWithAggregatesFilter<"Building"> | string
    locationId?: StringWithAggregatesFilter<"Building"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Building"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Building"> | Date | string
  }

  export type BuildingI18nWhereInput = {
    AND?: BuildingI18nWhereInput | BuildingI18nWhereInput[]
    OR?: BuildingI18nWhereInput[]
    NOT?: BuildingI18nWhereInput | BuildingI18nWhereInput[]
    id?: StringFilter<"BuildingI18n"> | string
    buildingId?: StringFilter<"BuildingI18n"> | string
    language?: StringFilter<"BuildingI18n"> | string
    name?: StringFilter<"BuildingI18n"> | string
    description?: StringNullableFilter<"BuildingI18n"> | string | null
    updatedAt?: DateTimeFilter<"BuildingI18n"> | Date | string
    createdAt?: DateTimeFilter<"BuildingI18n"> | Date | string
    building?: XOR<BuildingScalarRelationFilter, BuildingWhereInput>
  }

  export type BuildingI18nOrderByWithRelationInput = {
    id?: SortOrder
    buildingId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    building?: BuildingOrderByWithRelationInput
  }

  export type BuildingI18nWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    buildingId_language?: BuildingI18nBuildingIdLanguageCompoundUniqueInput
    AND?: BuildingI18nWhereInput | BuildingI18nWhereInput[]
    OR?: BuildingI18nWhereInput[]
    NOT?: BuildingI18nWhereInput | BuildingI18nWhereInput[]
    buildingId?: StringFilter<"BuildingI18n"> | string
    language?: StringFilter<"BuildingI18n"> | string
    name?: StringFilter<"BuildingI18n"> | string
    description?: StringNullableFilter<"BuildingI18n"> | string | null
    updatedAt?: DateTimeFilter<"BuildingI18n"> | Date | string
    createdAt?: DateTimeFilter<"BuildingI18n"> | Date | string
    building?: XOR<BuildingScalarRelationFilter, BuildingWhereInput>
  }, "id" | "buildingId_language">

  export type BuildingI18nOrderByWithAggregationInput = {
    id?: SortOrder
    buildingId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: BuildingI18nCountOrderByAggregateInput
    _max?: BuildingI18nMaxOrderByAggregateInput
    _min?: BuildingI18nMinOrderByAggregateInput
  }

  export type BuildingI18nScalarWhereWithAggregatesInput = {
    AND?: BuildingI18nScalarWhereWithAggregatesInput | BuildingI18nScalarWhereWithAggregatesInput[]
    OR?: BuildingI18nScalarWhereWithAggregatesInput[]
    NOT?: BuildingI18nScalarWhereWithAggregatesInput | BuildingI18nScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BuildingI18n"> | string
    buildingId?: StringWithAggregatesFilter<"BuildingI18n"> | string
    language?: StringWithAggregatesFilter<"BuildingI18n"> | string
    name?: StringWithAggregatesFilter<"BuildingI18n"> | string
    description?: StringNullableWithAggregatesFilter<"BuildingI18n"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"BuildingI18n"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"BuildingI18n"> | Date | string
  }

  export type StadiumInfoWhereInput = {
    AND?: StadiumInfoWhereInput | StadiumInfoWhereInput[]
    OR?: StadiumInfoWhereInput[]
    NOT?: StadiumInfoWhereInput | StadiumInfoWhereInput[]
    id?: StringFilter<"StadiumInfo"> | string
    buildingId?: StringFilter<"StadiumInfo"> | string
    capacity?: IntFilter<"StadiumInfo"> | number
    updatedAt?: DateTimeFilter<"StadiumInfo"> | Date | string
    createdAt?: DateTimeFilter<"StadiumInfo"> | Date | string
    building?: XOR<BuildingScalarRelationFilter, BuildingWhereInput>
  }

  export type StadiumInfoOrderByWithRelationInput = {
    id?: SortOrder
    buildingId?: SortOrder
    capacity?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    building?: BuildingOrderByWithRelationInput
  }

  export type StadiumInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    buildingId?: string
    AND?: StadiumInfoWhereInput | StadiumInfoWhereInput[]
    OR?: StadiumInfoWhereInput[]
    NOT?: StadiumInfoWhereInput | StadiumInfoWhereInput[]
    capacity?: IntFilter<"StadiumInfo"> | number
    updatedAt?: DateTimeFilter<"StadiumInfo"> | Date | string
    createdAt?: DateTimeFilter<"StadiumInfo"> | Date | string
    building?: XOR<BuildingScalarRelationFilter, BuildingWhereInput>
  }, "id" | "buildingId">

  export type StadiumInfoOrderByWithAggregationInput = {
    id?: SortOrder
    buildingId?: SortOrder
    capacity?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: StadiumInfoCountOrderByAggregateInput
    _avg?: StadiumInfoAvgOrderByAggregateInput
    _max?: StadiumInfoMaxOrderByAggregateInput
    _min?: StadiumInfoMinOrderByAggregateInput
    _sum?: StadiumInfoSumOrderByAggregateInput
  }

  export type StadiumInfoScalarWhereWithAggregatesInput = {
    AND?: StadiumInfoScalarWhereWithAggregatesInput | StadiumInfoScalarWhereWithAggregatesInput[]
    OR?: StadiumInfoScalarWhereWithAggregatesInput[]
    NOT?: StadiumInfoScalarWhereWithAggregatesInput | StadiumInfoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StadiumInfo"> | string
    buildingId?: StringWithAggregatesFilter<"StadiumInfo"> | string
    capacity?: IntWithAggregatesFilter<"StadiumInfo"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"StadiumInfo"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"StadiumInfo"> | Date | string
  }

  export type RaceWhereInput = {
    AND?: RaceWhereInput | RaceWhereInput[]
    OR?: RaceWhereInput[]
    NOT?: RaceWhereInput | RaceWhereInput[]
    id?: StringFilter<"Race"> | string
    updatedAt?: DateTimeFilter<"Race"> | Date | string
    createdAt?: DateTimeFilter<"Race"> | Date | string
    i18n?: RaceI18nListRelationFilter
    cultures?: CultureListRelationFilter
    persons?: PersonListRelationFilter
  }

  export type RaceOrderByWithRelationInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    i18n?: RaceI18nOrderByRelationAggregateInput
    cultures?: CultureOrderByRelationAggregateInput
    persons?: PersonOrderByRelationAggregateInput
  }

  export type RaceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RaceWhereInput | RaceWhereInput[]
    OR?: RaceWhereInput[]
    NOT?: RaceWhereInput | RaceWhereInput[]
    updatedAt?: DateTimeFilter<"Race"> | Date | string
    createdAt?: DateTimeFilter<"Race"> | Date | string
    i18n?: RaceI18nListRelationFilter
    cultures?: CultureListRelationFilter
    persons?: PersonListRelationFilter
  }, "id" | "id">

  export type RaceOrderByWithAggregationInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: RaceCountOrderByAggregateInput
    _max?: RaceMaxOrderByAggregateInput
    _min?: RaceMinOrderByAggregateInput
  }

  export type RaceScalarWhereWithAggregatesInput = {
    AND?: RaceScalarWhereWithAggregatesInput | RaceScalarWhereWithAggregatesInput[]
    OR?: RaceScalarWhereWithAggregatesInput[]
    NOT?: RaceScalarWhereWithAggregatesInput | RaceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Race"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Race"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Race"> | Date | string
  }

  export type RaceI18nWhereInput = {
    AND?: RaceI18nWhereInput | RaceI18nWhereInput[]
    OR?: RaceI18nWhereInput[]
    NOT?: RaceI18nWhereInput | RaceI18nWhereInput[]
    id?: StringFilter<"RaceI18n"> | string
    raceId?: StringFilter<"RaceI18n"> | string
    language?: StringFilter<"RaceI18n"> | string
    name?: StringFilter<"RaceI18n"> | string
    updatedAt?: DateTimeFilter<"RaceI18n"> | Date | string
    createdAt?: DateTimeFilter<"RaceI18n"> | Date | string
    race?: XOR<RaceScalarRelationFilter, RaceWhereInput>
  }

  export type RaceI18nOrderByWithRelationInput = {
    id?: SortOrder
    raceId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    race?: RaceOrderByWithRelationInput
  }

  export type RaceI18nWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    raceId_language?: RaceI18nRaceIdLanguageCompoundUniqueInput
    AND?: RaceI18nWhereInput | RaceI18nWhereInput[]
    OR?: RaceI18nWhereInput[]
    NOT?: RaceI18nWhereInput | RaceI18nWhereInput[]
    raceId?: StringFilter<"RaceI18n"> | string
    language?: StringFilter<"RaceI18n"> | string
    name?: StringFilter<"RaceI18n"> | string
    updatedAt?: DateTimeFilter<"RaceI18n"> | Date | string
    createdAt?: DateTimeFilter<"RaceI18n"> | Date | string
    race?: XOR<RaceScalarRelationFilter, RaceWhereInput>
  }, "id" | "raceId_language">

  export type RaceI18nOrderByWithAggregationInput = {
    id?: SortOrder
    raceId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: RaceI18nCountOrderByAggregateInput
    _max?: RaceI18nMaxOrderByAggregateInput
    _min?: RaceI18nMinOrderByAggregateInput
  }

  export type RaceI18nScalarWhereWithAggregatesInput = {
    AND?: RaceI18nScalarWhereWithAggregatesInput | RaceI18nScalarWhereWithAggregatesInput[]
    OR?: RaceI18nScalarWhereWithAggregatesInput[]
    NOT?: RaceI18nScalarWhereWithAggregatesInput | RaceI18nScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RaceI18n"> | string
    raceId?: StringWithAggregatesFilter<"RaceI18n"> | string
    language?: StringWithAggregatesFilter<"RaceI18n"> | string
    name?: StringWithAggregatesFilter<"RaceI18n"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"RaceI18n"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RaceI18n"> | Date | string
  }

  export type CultureWhereInput = {
    AND?: CultureWhereInput | CultureWhereInput[]
    OR?: CultureWhereInput[]
    NOT?: CultureWhereInput | CultureWhereInput[]
    id?: StringFilter<"Culture"> | string
    raceId?: StringFilter<"Culture"> | string
    updatedAt?: DateTimeFilter<"Culture"> | Date | string
    createdAt?: DateTimeFilter<"Culture"> | Date | string
    race?: XOR<RaceScalarRelationFilter, RaceWhereInput>
    i18n?: CultureI18nListRelationFilter
    nameModels?: NameModelListRelationFilter
    regionPopulations?: RegionPopulationListRelationFilter
  }

  export type CultureOrderByWithRelationInput = {
    id?: SortOrder
    raceId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    race?: RaceOrderByWithRelationInput
    i18n?: CultureI18nOrderByRelationAggregateInput
    nameModels?: NameModelOrderByRelationAggregateInput
    regionPopulations?: RegionPopulationOrderByRelationAggregateInput
  }

  export type CultureWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CultureWhereInput | CultureWhereInput[]
    OR?: CultureWhereInput[]
    NOT?: CultureWhereInput | CultureWhereInput[]
    raceId?: StringFilter<"Culture"> | string
    updatedAt?: DateTimeFilter<"Culture"> | Date | string
    createdAt?: DateTimeFilter<"Culture"> | Date | string
    race?: XOR<RaceScalarRelationFilter, RaceWhereInput>
    i18n?: CultureI18nListRelationFilter
    nameModels?: NameModelListRelationFilter
    regionPopulations?: RegionPopulationListRelationFilter
  }, "id" | "id">

  export type CultureOrderByWithAggregationInput = {
    id?: SortOrder
    raceId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: CultureCountOrderByAggregateInput
    _max?: CultureMaxOrderByAggregateInput
    _min?: CultureMinOrderByAggregateInput
  }

  export type CultureScalarWhereWithAggregatesInput = {
    AND?: CultureScalarWhereWithAggregatesInput | CultureScalarWhereWithAggregatesInput[]
    OR?: CultureScalarWhereWithAggregatesInput[]
    NOT?: CultureScalarWhereWithAggregatesInput | CultureScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Culture"> | string
    raceId?: StringWithAggregatesFilter<"Culture"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Culture"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Culture"> | Date | string
  }

  export type CultureI18nWhereInput = {
    AND?: CultureI18nWhereInput | CultureI18nWhereInput[]
    OR?: CultureI18nWhereInput[]
    NOT?: CultureI18nWhereInput | CultureI18nWhereInput[]
    id?: StringFilter<"CultureI18n"> | string
    cultureId?: StringFilter<"CultureI18n"> | string
    language?: StringFilter<"CultureI18n"> | string
    name?: StringFilter<"CultureI18n"> | string
    updatedAt?: DateTimeFilter<"CultureI18n"> | Date | string
    createdAt?: DateTimeFilter<"CultureI18n"> | Date | string
    culture?: XOR<CultureScalarRelationFilter, CultureWhereInput>
  }

  export type CultureI18nOrderByWithRelationInput = {
    id?: SortOrder
    cultureId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    culture?: CultureOrderByWithRelationInput
  }

  export type CultureI18nWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    cultureId_language?: CultureI18nCultureIdLanguageCompoundUniqueInput
    AND?: CultureI18nWhereInput | CultureI18nWhereInput[]
    OR?: CultureI18nWhereInput[]
    NOT?: CultureI18nWhereInput | CultureI18nWhereInput[]
    cultureId?: StringFilter<"CultureI18n"> | string
    language?: StringFilter<"CultureI18n"> | string
    name?: StringFilter<"CultureI18n"> | string
    updatedAt?: DateTimeFilter<"CultureI18n"> | Date | string
    createdAt?: DateTimeFilter<"CultureI18n"> | Date | string
    culture?: XOR<CultureScalarRelationFilter, CultureWhereInput>
  }, "id" | "cultureId_language">

  export type CultureI18nOrderByWithAggregationInput = {
    id?: SortOrder
    cultureId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: CultureI18nCountOrderByAggregateInput
    _max?: CultureI18nMaxOrderByAggregateInput
    _min?: CultureI18nMinOrderByAggregateInput
  }

  export type CultureI18nScalarWhereWithAggregatesInput = {
    AND?: CultureI18nScalarWhereWithAggregatesInput | CultureI18nScalarWhereWithAggregatesInput[]
    OR?: CultureI18nScalarWhereWithAggregatesInput[]
    NOT?: CultureI18nScalarWhereWithAggregatesInput | CultureI18nScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CultureI18n"> | string
    cultureId?: StringWithAggregatesFilter<"CultureI18n"> | string
    language?: StringWithAggregatesFilter<"CultureI18n"> | string
    name?: StringWithAggregatesFilter<"CultureI18n"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"CultureI18n"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"CultureI18n"> | Date | string
  }

  export type RegionPopulationWhereInput = {
    AND?: RegionPopulationWhereInput | RegionPopulationWhereInput[]
    OR?: RegionPopulationWhereInput[]
    NOT?: RegionPopulationWhereInput | RegionPopulationWhereInput[]
    id?: StringFilter<"RegionPopulation"> | string
    regionId?: StringFilter<"RegionPopulation"> | string
    cultureId?: StringFilter<"RegionPopulation"> | string
    percentage?: IntFilter<"RegionPopulation"> | number
    updatedAt?: DateTimeFilter<"RegionPopulation"> | Date | string
    createdAt?: DateTimeFilter<"RegionPopulation"> | Date | string
    region?: XOR<RegionScalarRelationFilter, RegionWhereInput>
    culture?: XOR<CultureScalarRelationFilter, CultureWhereInput>
  }

  export type RegionPopulationOrderByWithRelationInput = {
    id?: SortOrder
    regionId?: SortOrder
    cultureId?: SortOrder
    percentage?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    region?: RegionOrderByWithRelationInput
    culture?: CultureOrderByWithRelationInput
  }

  export type RegionPopulationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    regionId_cultureId?: RegionPopulationRegionIdCultureIdCompoundUniqueInput
    AND?: RegionPopulationWhereInput | RegionPopulationWhereInput[]
    OR?: RegionPopulationWhereInput[]
    NOT?: RegionPopulationWhereInput | RegionPopulationWhereInput[]
    regionId?: StringFilter<"RegionPopulation"> | string
    cultureId?: StringFilter<"RegionPopulation"> | string
    percentage?: IntFilter<"RegionPopulation"> | number
    updatedAt?: DateTimeFilter<"RegionPopulation"> | Date | string
    createdAt?: DateTimeFilter<"RegionPopulation"> | Date | string
    region?: XOR<RegionScalarRelationFilter, RegionWhereInput>
    culture?: XOR<CultureScalarRelationFilter, CultureWhereInput>
  }, "id" | "regionId_cultureId">

  export type RegionPopulationOrderByWithAggregationInput = {
    id?: SortOrder
    regionId?: SortOrder
    cultureId?: SortOrder
    percentage?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: RegionPopulationCountOrderByAggregateInput
    _avg?: RegionPopulationAvgOrderByAggregateInput
    _max?: RegionPopulationMaxOrderByAggregateInput
    _min?: RegionPopulationMinOrderByAggregateInput
    _sum?: RegionPopulationSumOrderByAggregateInput
  }

  export type RegionPopulationScalarWhereWithAggregatesInput = {
    AND?: RegionPopulationScalarWhereWithAggregatesInput | RegionPopulationScalarWhereWithAggregatesInput[]
    OR?: RegionPopulationScalarWhereWithAggregatesInput[]
    NOT?: RegionPopulationScalarWhereWithAggregatesInput | RegionPopulationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RegionPopulation"> | string
    regionId?: StringWithAggregatesFilter<"RegionPopulation"> | string
    cultureId?: StringWithAggregatesFilter<"RegionPopulation"> | string
    percentage?: IntWithAggregatesFilter<"RegionPopulation"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"RegionPopulation"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RegionPopulation"> | Date | string
  }

  export type NameModelWhereInput = {
    AND?: NameModelWhereInput | NameModelWhereInput[]
    OR?: NameModelWhereInput[]
    NOT?: NameModelWhereInput | NameModelWhereInput[]
    id?: StringFilter<"NameModel"> | string
    cultureId?: StringFilter<"NameModel"> | string
    sex?: EnumSexTypeFilter<"NameModel"> | $Enums.SexType
    firstnameTemplate?: StringFilter<"NameModel"> | string
    lastnameTemplate?: StringFilter<"NameModel"> | string
    updatedAt?: DateTimeFilter<"NameModel"> | Date | string
    createdAt?: DateTimeFilter<"NameModel"> | Date | string
    culture?: XOR<CultureScalarRelationFilter, CultureWhereInput>
  }

  export type NameModelOrderByWithRelationInput = {
    id?: SortOrder
    cultureId?: SortOrder
    sex?: SortOrder
    firstnameTemplate?: SortOrder
    lastnameTemplate?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    culture?: CultureOrderByWithRelationInput
  }

  export type NameModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    cultureId_sex?: NameModelCultureIdSexCompoundUniqueInput
    AND?: NameModelWhereInput | NameModelWhereInput[]
    OR?: NameModelWhereInput[]
    NOT?: NameModelWhereInput | NameModelWhereInput[]
    cultureId?: StringFilter<"NameModel"> | string
    sex?: EnumSexTypeFilter<"NameModel"> | $Enums.SexType
    firstnameTemplate?: StringFilter<"NameModel"> | string
    lastnameTemplate?: StringFilter<"NameModel"> | string
    updatedAt?: DateTimeFilter<"NameModel"> | Date | string
    createdAt?: DateTimeFilter<"NameModel"> | Date | string
    culture?: XOR<CultureScalarRelationFilter, CultureWhereInput>
  }, "id" | "cultureId_sex">

  export type NameModelOrderByWithAggregationInput = {
    id?: SortOrder
    cultureId?: SortOrder
    sex?: SortOrder
    firstnameTemplate?: SortOrder
    lastnameTemplate?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: NameModelCountOrderByAggregateInput
    _max?: NameModelMaxOrderByAggregateInput
    _min?: NameModelMinOrderByAggregateInput
  }

  export type NameModelScalarWhereWithAggregatesInput = {
    AND?: NameModelScalarWhereWithAggregatesInput | NameModelScalarWhereWithAggregatesInput[]
    OR?: NameModelScalarWhereWithAggregatesInput[]
    NOT?: NameModelScalarWhereWithAggregatesInput | NameModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NameModel"> | string
    cultureId?: StringWithAggregatesFilter<"NameModel"> | string
    sex?: EnumSexTypeWithAggregatesFilter<"NameModel"> | $Enums.SexType
    firstnameTemplate?: StringWithAggregatesFilter<"NameModel"> | string
    lastnameTemplate?: StringWithAggregatesFilter<"NameModel"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"NameModel"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"NameModel"> | Date | string
  }

  export type NameComponentKeyWhereInput = {
    AND?: NameComponentKeyWhereInput | NameComponentKeyWhereInput[]
    OR?: NameComponentKeyWhereInput[]
    NOT?: NameComponentKeyWhereInput | NameComponentKeyWhereInput[]
    id?: StringFilter<"NameComponentKey"> | string
    key?: StringFilter<"NameComponentKey"> | string
    updatedAt?: DateTimeFilter<"NameComponentKey"> | Date | string
    createdAt?: DateTimeFilter<"NameComponentKey"> | Date | string
    values?: NameComponentValueListRelationFilter
  }

  export type NameComponentKeyOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    values?: NameComponentValueOrderByRelationAggregateInput
  }

  export type NameComponentKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: NameComponentKeyWhereInput | NameComponentKeyWhereInput[]
    OR?: NameComponentKeyWhereInput[]
    NOT?: NameComponentKeyWhereInput | NameComponentKeyWhereInput[]
    updatedAt?: DateTimeFilter<"NameComponentKey"> | Date | string
    createdAt?: DateTimeFilter<"NameComponentKey"> | Date | string
    values?: NameComponentValueListRelationFilter
  }, "id" | "key">

  export type NameComponentKeyOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: NameComponentKeyCountOrderByAggregateInput
    _max?: NameComponentKeyMaxOrderByAggregateInput
    _min?: NameComponentKeyMinOrderByAggregateInput
  }

  export type NameComponentKeyScalarWhereWithAggregatesInput = {
    AND?: NameComponentKeyScalarWhereWithAggregatesInput | NameComponentKeyScalarWhereWithAggregatesInput[]
    OR?: NameComponentKeyScalarWhereWithAggregatesInput[]
    NOT?: NameComponentKeyScalarWhereWithAggregatesInput | NameComponentKeyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NameComponentKey"> | string
    key?: StringWithAggregatesFilter<"NameComponentKey"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"NameComponentKey"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"NameComponentKey"> | Date | string
  }

  export type NameComponentValueWhereInput = {
    AND?: NameComponentValueWhereInput | NameComponentValueWhereInput[]
    OR?: NameComponentValueWhereInput[]
    NOT?: NameComponentValueWhereInput | NameComponentValueWhereInput[]
    id?: StringFilter<"NameComponentValue"> | string
    keyId?: StringFilter<"NameComponentValue"> | string
    value?: StringFilter<"NameComponentValue"> | string
    updatedAt?: DateTimeFilter<"NameComponentValue"> | Date | string
    createdAt?: DateTimeFilter<"NameComponentValue"> | Date | string
    key?: XOR<NameComponentKeyScalarRelationFilter, NameComponentKeyWhereInput>
  }

  export type NameComponentValueOrderByWithRelationInput = {
    id?: SortOrder
    keyId?: SortOrder
    value?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    key?: NameComponentKeyOrderByWithRelationInput
  }

  export type NameComponentValueWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NameComponentValueWhereInput | NameComponentValueWhereInput[]
    OR?: NameComponentValueWhereInput[]
    NOT?: NameComponentValueWhereInput | NameComponentValueWhereInput[]
    keyId?: StringFilter<"NameComponentValue"> | string
    value?: StringFilter<"NameComponentValue"> | string
    updatedAt?: DateTimeFilter<"NameComponentValue"> | Date | string
    createdAt?: DateTimeFilter<"NameComponentValue"> | Date | string
    key?: XOR<NameComponentKeyScalarRelationFilter, NameComponentKeyWhereInput>
  }, "id">

  export type NameComponentValueOrderByWithAggregationInput = {
    id?: SortOrder
    keyId?: SortOrder
    value?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: NameComponentValueCountOrderByAggregateInput
    _max?: NameComponentValueMaxOrderByAggregateInput
    _min?: NameComponentValueMinOrderByAggregateInput
  }

  export type NameComponentValueScalarWhereWithAggregatesInput = {
    AND?: NameComponentValueScalarWhereWithAggregatesInput | NameComponentValueScalarWhereWithAggregatesInput[]
    OR?: NameComponentValueScalarWhereWithAggregatesInput[]
    NOT?: NameComponentValueScalarWhereWithAggregatesInput | NameComponentValueScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NameComponentValue"> | string
    keyId?: StringWithAggregatesFilter<"NameComponentValue"> | string
    value?: StringWithAggregatesFilter<"NameComponentValue"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"NameComponentValue"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"NameComponentValue"> | Date | string
  }

  export type PersonWhereInput = {
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    id?: StringFilter<"Person"> | string
    name?: StringFilter<"Person"> | string
    shortName?: StringFilter<"Person"> | string
    raceId?: StringFilter<"Person"> | string
    updatedAt?: DateTimeFilter<"Person"> | Date | string
    createdAt?: DateTimeFilter<"Person"> | Date | string
    race?: XOR<RaceScalarRelationFilter, RaceWhereInput>
    playercharacteristics?: XOR<PlayerCharacteristicsNullableScalarRelationFilter, PlayerCharacteristicsWhereInput> | null
    PersonContract?: PersonContractListRelationFilter
  }

  export type PersonOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    raceId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    race?: RaceOrderByWithRelationInput
    playercharacteristics?: PlayerCharacteristicsOrderByWithRelationInput
    PersonContract?: PersonContractOrderByRelationAggregateInput
  }

  export type PersonWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    name?: StringFilter<"Person"> | string
    shortName?: StringFilter<"Person"> | string
    raceId?: StringFilter<"Person"> | string
    updatedAt?: DateTimeFilter<"Person"> | Date | string
    createdAt?: DateTimeFilter<"Person"> | Date | string
    race?: XOR<RaceScalarRelationFilter, RaceWhereInput>
    playercharacteristics?: XOR<PlayerCharacteristicsNullableScalarRelationFilter, PlayerCharacteristicsWhereInput> | null
    PersonContract?: PersonContractListRelationFilter
  }, "id">

  export type PersonOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    raceId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: PersonCountOrderByAggregateInput
    _max?: PersonMaxOrderByAggregateInput
    _min?: PersonMinOrderByAggregateInput
  }

  export type PersonScalarWhereWithAggregatesInput = {
    AND?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    OR?: PersonScalarWhereWithAggregatesInput[]
    NOT?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Person"> | string
    name?: StringWithAggregatesFilter<"Person"> | string
    shortName?: StringWithAggregatesFilter<"Person"> | string
    raceId?: StringWithAggregatesFilter<"Person"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Person"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Person"> | Date | string
  }

  export type PlayerCharacteristicsWhereInput = {
    AND?: PlayerCharacteristicsWhereInput | PlayerCharacteristicsWhereInput[]
    OR?: PlayerCharacteristicsWhereInput[]
    NOT?: PlayerCharacteristicsWhereInput | PlayerCharacteristicsWhereInput[]
    id?: StringFilter<"PlayerCharacteristics"> | string
    playerId?: StringFilter<"PlayerCharacteristics"> | string
    updatedAt?: DateTimeFilter<"PlayerCharacteristics"> | Date | string
    createdAt?: DateTimeFilter<"PlayerCharacteristics"> | Date | string
    player?: XOR<PersonScalarRelationFilter, PersonWhereInput>
  }

  export type PlayerCharacteristicsOrderByWithRelationInput = {
    id?: SortOrder
    playerId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    player?: PersonOrderByWithRelationInput
  }

  export type PlayerCharacteristicsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    playerId?: string
    AND?: PlayerCharacteristicsWhereInput | PlayerCharacteristicsWhereInput[]
    OR?: PlayerCharacteristicsWhereInput[]
    NOT?: PlayerCharacteristicsWhereInput | PlayerCharacteristicsWhereInput[]
    updatedAt?: DateTimeFilter<"PlayerCharacteristics"> | Date | string
    createdAt?: DateTimeFilter<"PlayerCharacteristics"> | Date | string
    player?: XOR<PersonScalarRelationFilter, PersonWhereInput>
  }, "id" | "playerId">

  export type PlayerCharacteristicsOrderByWithAggregationInput = {
    id?: SortOrder
    playerId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: PlayerCharacteristicsCountOrderByAggregateInput
    _max?: PlayerCharacteristicsMaxOrderByAggregateInput
    _min?: PlayerCharacteristicsMinOrderByAggregateInput
  }

  export type PlayerCharacteristicsScalarWhereWithAggregatesInput = {
    AND?: PlayerCharacteristicsScalarWhereWithAggregatesInput | PlayerCharacteristicsScalarWhereWithAggregatesInput[]
    OR?: PlayerCharacteristicsScalarWhereWithAggregatesInput[]
    NOT?: PlayerCharacteristicsScalarWhereWithAggregatesInput | PlayerCharacteristicsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlayerCharacteristics"> | string
    playerId?: StringWithAggregatesFilter<"PlayerCharacteristics"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"PlayerCharacteristics"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"PlayerCharacteristics"> | Date | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    shortName?: StringFilter<"Team"> | string
    isActive?: BoolFilter<"Team"> | boolean
    ownerId?: StringFilter<"Team"> | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    createdAt?: DateTimeFilter<"Team"> | Date | string
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    teamLocation?: XOR<TeamLocationNullableScalarRelationFilter, TeamLocationWhereInput> | null
    PersonContract?: PersonContractListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    teamLocation?: TeamLocationOrderByWithRelationInput
    PersonContract?: PersonContractOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    name?: StringFilter<"Team"> | string
    shortName?: StringFilter<"Team"> | string
    isActive?: BoolFilter<"Team"> | boolean
    ownerId?: StringFilter<"Team"> | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    createdAt?: DateTimeFilter<"Team"> | Date | string
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    teamLocation?: XOR<TeamLocationNullableScalarRelationFilter, TeamLocationWhereInput> | null
    PersonContract?: PersonContractListRelationFilter
  }, "id">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Team"> | string
    name?: StringWithAggregatesFilter<"Team"> | string
    shortName?: StringWithAggregatesFilter<"Team"> | string
    isActive?: BoolWithAggregatesFilter<"Team"> | boolean
    ownerId?: StringWithAggregatesFilter<"Team"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
  }

  export type TeamLocationWhereInput = {
    AND?: TeamLocationWhereInput | TeamLocationWhereInput[]
    OR?: TeamLocationWhereInput[]
    NOT?: TeamLocationWhereInput | TeamLocationWhereInput[]
    id?: StringFilter<"TeamLocation"> | string
    teamId?: StringFilter<"TeamLocation"> | string
    locationId?: StringFilter<"TeamLocation"> | string
    updatedAt?: DateTimeFilter<"TeamLocation"> | Date | string
    createdAt?: DateTimeFilter<"TeamLocation"> | Date | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }

  export type TeamLocationOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrder
    locationId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    team?: TeamOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
  }

  export type TeamLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    teamId?: string
    AND?: TeamLocationWhereInput | TeamLocationWhereInput[]
    OR?: TeamLocationWhereInput[]
    NOT?: TeamLocationWhereInput | TeamLocationWhereInput[]
    locationId?: StringFilter<"TeamLocation"> | string
    updatedAt?: DateTimeFilter<"TeamLocation"> | Date | string
    createdAt?: DateTimeFilter<"TeamLocation"> | Date | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }, "id" | "teamId">

  export type TeamLocationOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrder
    locationId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: TeamLocationCountOrderByAggregateInput
    _max?: TeamLocationMaxOrderByAggregateInput
    _min?: TeamLocationMinOrderByAggregateInput
  }

  export type TeamLocationScalarWhereWithAggregatesInput = {
    AND?: TeamLocationScalarWhereWithAggregatesInput | TeamLocationScalarWhereWithAggregatesInput[]
    OR?: TeamLocationScalarWhereWithAggregatesInput[]
    NOT?: TeamLocationScalarWhereWithAggregatesInput | TeamLocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeamLocation"> | string
    teamId?: StringWithAggregatesFilter<"TeamLocation"> | string
    locationId?: StringWithAggregatesFilter<"TeamLocation"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"TeamLocation"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"TeamLocation"> | Date | string
  }

  export type PersonContractWhereInput = {
    AND?: PersonContractWhereInput | PersonContractWhereInput[]
    OR?: PersonContractWhereInput[]
    NOT?: PersonContractWhereInput | PersonContractWhereInput[]
    id?: StringFilter<"PersonContract"> | string
    personId?: StringFilter<"PersonContract"> | string
    teamId?: StringFilter<"PersonContract"> | string
    contractType?: EnumContractTypeFilter<"PersonContract"> | $Enums.ContractType
    updatedAt?: DateTimeFilter<"PersonContract"> | Date | string
    createdAt?: DateTimeFilter<"PersonContract"> | Date | string
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }

  export type PersonContractOrderByWithRelationInput = {
    id?: SortOrder
    personId?: SortOrder
    teamId?: SortOrder
    contractType?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    person?: PersonOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
  }

  export type PersonContractWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PersonContractWhereInput | PersonContractWhereInput[]
    OR?: PersonContractWhereInput[]
    NOT?: PersonContractWhereInput | PersonContractWhereInput[]
    personId?: StringFilter<"PersonContract"> | string
    teamId?: StringFilter<"PersonContract"> | string
    contractType?: EnumContractTypeFilter<"PersonContract"> | $Enums.ContractType
    updatedAt?: DateTimeFilter<"PersonContract"> | Date | string
    createdAt?: DateTimeFilter<"PersonContract"> | Date | string
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }, "id">

  export type PersonContractOrderByWithAggregationInput = {
    id?: SortOrder
    personId?: SortOrder
    teamId?: SortOrder
    contractType?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: PersonContractCountOrderByAggregateInput
    _max?: PersonContractMaxOrderByAggregateInput
    _min?: PersonContractMinOrderByAggregateInput
  }

  export type PersonContractScalarWhereWithAggregatesInput = {
    AND?: PersonContractScalarWhereWithAggregatesInput | PersonContractScalarWhereWithAggregatesInput[]
    OR?: PersonContractScalarWhereWithAggregatesInput[]
    NOT?: PersonContractScalarWhereWithAggregatesInput | PersonContractScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PersonContract"> | string
    personId?: StringWithAggregatesFilter<"PersonContract"> | string
    teamId?: StringWithAggregatesFilter<"PersonContract"> | string
    contractType?: EnumContractTypeWithAggregatesFilter<"PersonContract"> | $Enums.ContractType
    updatedAt?: DateTimeWithAggregatesFilter<"PersonContract"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"PersonContract"> | Date | string
  }

  export type UserCreateInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    teams?: TeamCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    teams?: TeamUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    teams?: TeamUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    teams?: TeamUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
    impersonatedBy?: string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateManyInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
    impersonatedBy?: string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VerificationUncheckedCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationCreateManyInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RegionCreateInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: RegionI18nCreateNestedManyWithoutRegionInput
    locations?: LocationCreateNestedManyWithoutRegionInput
    regionPopulations?: RegionPopulationCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: RegionI18nUncheckedCreateNestedManyWithoutRegionInput
    locations?: LocationUncheckedCreateNestedManyWithoutRegionInput
    regionPopulations?: RegionPopulationUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: RegionI18nUpdateManyWithoutRegionNestedInput
    locations?: LocationUpdateManyWithoutRegionNestedInput
    regionPopulations?: RegionPopulationUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: RegionI18nUncheckedUpdateManyWithoutRegionNestedInput
    locations?: LocationUncheckedUpdateManyWithoutRegionNestedInput
    regionPopulations?: RegionPopulationUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionCreateManyInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RegionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionI18nCreateInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
    region: RegionCreateNestedOneWithoutI18nInput
  }

  export type RegionI18nUncheckedCreateInput = {
    id?: string
    regionId: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RegionI18nUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutI18nNestedInput
  }

  export type RegionI18nUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionI18nCreateManyInput = {
    id?: string
    regionId: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RegionI18nUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionI18nUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateInput = {
    id: string
    type: $Enums.LocationType
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nCreateNestedManyWithoutLocationInput
    buildings?: BuildingCreateNestedManyWithoutLocationInput
    region: RegionCreateNestedOneWithoutLocationsInput
    routesFrom?: RouteCreateNestedManyWithoutLocationFromInput
    routesTo?: RouteCreateNestedManyWithoutLocationToInput
    teams?: TeamLocationCreateNestedManyWithoutLocationInput
    townInfo?: TownInformationCreateNestedOneWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id: string
    type: $Enums.LocationType
    regionId: string
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nUncheckedCreateNestedManyWithoutLocationInput
    buildings?: BuildingUncheckedCreateNestedManyWithoutLocationInput
    routesFrom?: RouteUncheckedCreateNestedManyWithoutLocationFromInput
    routesTo?: RouteUncheckedCreateNestedManyWithoutLocationToInput
    teams?: TeamLocationUncheckedCreateNestedManyWithoutLocationInput
    townInfo?: TownInformationUncheckedCreateNestedOneWithoutLocationInput
  }

  export type LocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUpdateManyWithoutLocationNestedInput
    buildings?: BuildingUpdateManyWithoutLocationNestedInput
    region?: RegionUpdateOneRequiredWithoutLocationsNestedInput
    routesFrom?: RouteUpdateManyWithoutLocationFromNestedInput
    routesTo?: RouteUpdateManyWithoutLocationToNestedInput
    teams?: TeamLocationUpdateManyWithoutLocationNestedInput
    townInfo?: TownInformationUpdateOneWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    regionId?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUncheckedUpdateManyWithoutLocationNestedInput
    buildings?: BuildingUncheckedUpdateManyWithoutLocationNestedInput
    routesFrom?: RouteUncheckedUpdateManyWithoutLocationFromNestedInput
    routesTo?: RouteUncheckedUpdateManyWithoutLocationToNestedInput
    teams?: TeamLocationUncheckedUpdateManyWithoutLocationNestedInput
    townInfo?: TownInformationUncheckedUpdateOneWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id: string
    type: $Enums.LocationType
    regionId: string
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type LocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    regionId?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationI18nCreateInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
    location: LocationCreateNestedOneWithoutI18nInput
  }

  export type LocationI18nUncheckedCreateInput = {
    id?: string
    locationId: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type LocationI18nUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutI18nNestedInput
  }

  export type LocationI18nUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationI18nCreateManyInput = {
    id?: string
    locationId: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type LocationI18nUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationI18nUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TownInformationCreateInput = {
    id?: string
    population: number
    updatedAt?: Date | string
    createdAt?: Date | string
    location: LocationCreateNestedOneWithoutTownInfoInput
  }

  export type TownInformationUncheckedCreateInput = {
    id?: string
    locationId: string
    population: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type TownInformationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutTownInfoNestedInput
  }

  export type TownInformationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TownInformationCreateManyInput = {
    id?: string
    locationId: string
    population: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type TownInformationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TownInformationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteCreateInput = {
    id?: string
    type: $Enums.RouteType
    distance: number
    updatedAt?: Date | string
    createdAt?: Date | string
    locationFrom: LocationCreateNestedOneWithoutRoutesFromInput
    locationTo: LocationCreateNestedOneWithoutRoutesToInput
  }

  export type RouteUncheckedCreateInput = {
    id?: string
    type: $Enums.RouteType
    fromId: string
    toId: string
    distance: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RouteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRouteTypeFieldUpdateOperationsInput | $Enums.RouteType
    distance?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationFrom?: LocationUpdateOneRequiredWithoutRoutesFromNestedInput
    locationTo?: LocationUpdateOneRequiredWithoutRoutesToNestedInput
  }

  export type RouteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRouteTypeFieldUpdateOperationsInput | $Enums.RouteType
    fromId?: StringFieldUpdateOperationsInput | string
    toId?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteCreateManyInput = {
    id?: string
    type: $Enums.RouteType
    fromId: string
    toId: string
    distance: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RouteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRouteTypeFieldUpdateOperationsInput | $Enums.RouteType
    distance?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRouteTypeFieldUpdateOperationsInput | $Enums.RouteType
    fromId?: StringFieldUpdateOperationsInput | string
    toId?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingTypeCreateInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: BuildingTypeI18nCreateNestedManyWithoutBuildingTypeInput
    buildings?: BuildingCreateNestedManyWithoutBuildingTypeInput
  }

  export type BuildingTypeUncheckedCreateInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: BuildingTypeI18nUncheckedCreateNestedManyWithoutBuildingTypeInput
    buildings?: BuildingUncheckedCreateNestedManyWithoutBuildingTypeInput
  }

  export type BuildingTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: BuildingTypeI18nUpdateManyWithoutBuildingTypeNestedInput
    buildings?: BuildingUpdateManyWithoutBuildingTypeNestedInput
  }

  export type BuildingTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: BuildingTypeI18nUncheckedUpdateManyWithoutBuildingTypeNestedInput
    buildings?: BuildingUncheckedUpdateManyWithoutBuildingTypeNestedInput
  }

  export type BuildingTypeCreateManyInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingTypeI18nCreateInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
    buildingType: BuildingTypeCreateNestedOneWithoutI18nInput
  }

  export type BuildingTypeI18nUncheckedCreateInput = {
    id?: string
    buildingTypeId: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingTypeI18nUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buildingType?: BuildingTypeUpdateOneRequiredWithoutI18nNestedInput
  }

  export type BuildingTypeI18nUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingTypeId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingTypeI18nCreateManyInput = {
    id?: string
    buildingTypeId: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingTypeI18nUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingTypeI18nUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingTypeId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingCreateInput = {
    id?: string
    updatedAt?: Date | string
    createdAt?: Date | string
    buildingType: BuildingTypeCreateNestedOneWithoutBuildingsInput
    location: LocationCreateNestedOneWithoutBuildingsInput
    i18n?: BuildingI18nCreateNestedManyWithoutBuildingInput
    stadiumInfo?: StadiumInfoCreateNestedOneWithoutBuildingInput
  }

  export type BuildingUncheckedCreateInput = {
    id?: string
    buildingTypeId: string
    locationId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: BuildingI18nUncheckedCreateNestedManyWithoutBuildingInput
    stadiumInfo?: StadiumInfoUncheckedCreateNestedOneWithoutBuildingInput
  }

  export type BuildingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buildingType?: BuildingTypeUpdateOneRequiredWithoutBuildingsNestedInput
    location?: LocationUpdateOneRequiredWithoutBuildingsNestedInput
    i18n?: BuildingI18nUpdateManyWithoutBuildingNestedInput
    stadiumInfo?: StadiumInfoUpdateOneWithoutBuildingNestedInput
  }

  export type BuildingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingTypeId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: BuildingI18nUncheckedUpdateManyWithoutBuildingNestedInput
    stadiumInfo?: StadiumInfoUncheckedUpdateOneWithoutBuildingNestedInput
  }

  export type BuildingCreateManyInput = {
    id?: string
    buildingTypeId: string
    locationId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingTypeId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingI18nCreateInput = {
    id?: string
    language: string
    name: string
    description?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    building: BuildingCreateNestedOneWithoutI18nInput
  }

  export type BuildingI18nUncheckedCreateInput = {
    id?: string
    buildingId: string
    language: string
    name: string
    description?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingI18nUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    building?: BuildingUpdateOneRequiredWithoutI18nNestedInput
  }

  export type BuildingI18nUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingI18nCreateManyInput = {
    id?: string
    buildingId: string
    language: string
    name: string
    description?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingI18nUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingI18nUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StadiumInfoCreateInput = {
    id?: string
    capacity: number
    updatedAt?: Date | string
    createdAt?: Date | string
    building: BuildingCreateNestedOneWithoutStadiumInfoInput
  }

  export type StadiumInfoUncheckedCreateInput = {
    id?: string
    buildingId: string
    capacity: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type StadiumInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    building?: BuildingUpdateOneRequiredWithoutStadiumInfoNestedInput
  }

  export type StadiumInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingId?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StadiumInfoCreateManyInput = {
    id?: string
    buildingId: string
    capacity: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type StadiumInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StadiumInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingId?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RaceCreateInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: RaceI18nCreateNestedManyWithoutRaceInput
    cultures?: CultureCreateNestedManyWithoutRaceInput
    persons?: PersonCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: RaceI18nUncheckedCreateNestedManyWithoutRaceInput
    cultures?: CultureUncheckedCreateNestedManyWithoutRaceInput
    persons?: PersonUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: RaceI18nUpdateManyWithoutRaceNestedInput
    cultures?: CultureUpdateManyWithoutRaceNestedInput
    persons?: PersonUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: RaceI18nUncheckedUpdateManyWithoutRaceNestedInput
    cultures?: CultureUncheckedUpdateManyWithoutRaceNestedInput
    persons?: PersonUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type RaceCreateManyInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RaceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RaceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RaceI18nCreateInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
    race: RaceCreateNestedOneWithoutI18nInput
  }

  export type RaceI18nUncheckedCreateInput = {
    id?: string
    raceId: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RaceI18nUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    race?: RaceUpdateOneRequiredWithoutI18nNestedInput
  }

  export type RaceI18nUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RaceI18nCreateManyInput = {
    id?: string
    raceId: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RaceI18nUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RaceI18nUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CultureCreateInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    race: RaceCreateNestedOneWithoutCulturesInput
    i18n?: CultureI18nCreateNestedManyWithoutCultureInput
    nameModels?: NameModelCreateNestedManyWithoutCultureInput
    regionPopulations?: RegionPopulationCreateNestedManyWithoutCultureInput
  }

  export type CultureUncheckedCreateInput = {
    id: string
    raceId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: CultureI18nUncheckedCreateNestedManyWithoutCultureInput
    nameModels?: NameModelUncheckedCreateNestedManyWithoutCultureInput
    regionPopulations?: RegionPopulationUncheckedCreateNestedManyWithoutCultureInput
  }

  export type CultureUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    race?: RaceUpdateOneRequiredWithoutCulturesNestedInput
    i18n?: CultureI18nUpdateManyWithoutCultureNestedInput
    nameModels?: NameModelUpdateManyWithoutCultureNestedInput
    regionPopulations?: RegionPopulationUpdateManyWithoutCultureNestedInput
  }

  export type CultureUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: CultureI18nUncheckedUpdateManyWithoutCultureNestedInput
    nameModels?: NameModelUncheckedUpdateManyWithoutCultureNestedInput
    regionPopulations?: RegionPopulationUncheckedUpdateManyWithoutCultureNestedInput
  }

  export type CultureCreateManyInput = {
    id: string
    raceId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type CultureUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CultureUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CultureI18nCreateInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
    culture: CultureCreateNestedOneWithoutI18nInput
  }

  export type CultureI18nUncheckedCreateInput = {
    id?: string
    cultureId: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type CultureI18nUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    culture?: CultureUpdateOneRequiredWithoutI18nNestedInput
  }

  export type CultureI18nUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cultureId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CultureI18nCreateManyInput = {
    id?: string
    cultureId: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type CultureI18nUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CultureI18nUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cultureId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionPopulationCreateInput = {
    id?: string
    percentage: number
    updatedAt?: Date | string
    createdAt?: Date | string
    region: RegionCreateNestedOneWithoutRegionPopulationsInput
    culture: CultureCreateNestedOneWithoutRegionPopulationsInput
  }

  export type RegionPopulationUncheckedCreateInput = {
    id?: string
    regionId: string
    cultureId: string
    percentage: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RegionPopulationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    percentage?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutRegionPopulationsNestedInput
    culture?: CultureUpdateOneRequiredWithoutRegionPopulationsNestedInput
  }

  export type RegionPopulationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    cultureId?: StringFieldUpdateOperationsInput | string
    percentage?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionPopulationCreateManyInput = {
    id?: string
    regionId: string
    cultureId: string
    percentage: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RegionPopulationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    percentage?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionPopulationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    cultureId?: StringFieldUpdateOperationsInput | string
    percentage?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameModelCreateInput = {
    id?: string
    sex: $Enums.SexType
    firstnameTemplate: string
    lastnameTemplate: string
    updatedAt?: Date | string
    createdAt?: Date | string
    culture: CultureCreateNestedOneWithoutNameModelsInput
  }

  export type NameModelUncheckedCreateInput = {
    id?: string
    cultureId: string
    sex: $Enums.SexType
    firstnameTemplate: string
    lastnameTemplate: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type NameModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexTypeFieldUpdateOperationsInput | $Enums.SexType
    firstnameTemplate?: StringFieldUpdateOperationsInput | string
    lastnameTemplate?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    culture?: CultureUpdateOneRequiredWithoutNameModelsNestedInput
  }

  export type NameModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cultureId?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexTypeFieldUpdateOperationsInput | $Enums.SexType
    firstnameTemplate?: StringFieldUpdateOperationsInput | string
    lastnameTemplate?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameModelCreateManyInput = {
    id?: string
    cultureId: string
    sex: $Enums.SexType
    firstnameTemplate: string
    lastnameTemplate: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type NameModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexTypeFieldUpdateOperationsInput | $Enums.SexType
    firstnameTemplate?: StringFieldUpdateOperationsInput | string
    lastnameTemplate?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cultureId?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexTypeFieldUpdateOperationsInput | $Enums.SexType
    firstnameTemplate?: StringFieldUpdateOperationsInput | string
    lastnameTemplate?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameComponentKeyCreateInput = {
    id?: string
    key: string
    updatedAt?: Date | string
    createdAt?: Date | string
    values?: NameComponentValueCreateNestedManyWithoutKeyInput
  }

  export type NameComponentKeyUncheckedCreateInput = {
    id?: string
    key: string
    updatedAt?: Date | string
    createdAt?: Date | string
    values?: NameComponentValueUncheckedCreateNestedManyWithoutKeyInput
  }

  export type NameComponentKeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    values?: NameComponentValueUpdateManyWithoutKeyNestedInput
  }

  export type NameComponentKeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    values?: NameComponentValueUncheckedUpdateManyWithoutKeyNestedInput
  }

  export type NameComponentKeyCreateManyInput = {
    id?: string
    key: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type NameComponentKeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameComponentKeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameComponentValueCreateInput = {
    id?: string
    value: string
    updatedAt?: Date | string
    createdAt?: Date | string
    key: NameComponentKeyCreateNestedOneWithoutValuesInput
  }

  export type NameComponentValueUncheckedCreateInput = {
    id?: string
    keyId: string
    value: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type NameComponentValueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    key?: NameComponentKeyUpdateOneRequiredWithoutValuesNestedInput
  }

  export type NameComponentValueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyId?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameComponentValueCreateManyInput = {
    id?: string
    keyId: string
    value: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type NameComponentValueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameComponentValueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyId?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonCreateInput = {
    id?: string
    name: string
    shortName: string
    updatedAt?: Date | string
    createdAt?: Date | string
    race: RaceCreateNestedOneWithoutPersonsInput
    playercharacteristics?: PlayerCharacteristicsCreateNestedOneWithoutPlayerInput
    PersonContract?: PersonContractCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateInput = {
    id?: string
    name: string
    shortName: string
    raceId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    playercharacteristics?: PlayerCharacteristicsUncheckedCreateNestedOneWithoutPlayerInput
    PersonContract?: PersonContractUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    race?: RaceUpdateOneRequiredWithoutPersonsNestedInput
    playercharacteristics?: PlayerCharacteristicsUpdateOneWithoutPlayerNestedInput
    PersonContract?: PersonContractUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    raceId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playercharacteristics?: PlayerCharacteristicsUncheckedUpdateOneWithoutPlayerNestedInput
    PersonContract?: PersonContractUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type PersonCreateManyInput = {
    id?: string
    name: string
    shortName: string
    raceId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PersonUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    raceId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerCharacteristicsCreateInput = {
    id?: string
    updatedAt?: Date | string
    createdAt?: Date | string
    player: PersonCreateNestedOneWithoutPlayercharacteristicsInput
  }

  export type PlayerCharacteristicsUncheckedCreateInput = {
    id?: string
    playerId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PlayerCharacteristicsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    player?: PersonUpdateOneRequiredWithoutPlayercharacteristicsNestedInput
  }

  export type PlayerCharacteristicsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerCharacteristicsCreateManyInput = {
    id?: string
    playerId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PlayerCharacteristicsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerCharacteristicsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateInput = {
    id?: string
    name: string
    shortName: string
    isActive: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
    owner?: UserCreateNestedOneWithoutTeamsInput
    teamLocation?: TeamLocationCreateNestedOneWithoutTeamInput
    PersonContract?: PersonContractCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: string
    name: string
    shortName: string
    isActive: boolean
    ownerId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    teamLocation?: TeamLocationUncheckedCreateNestedOneWithoutTeamInput
    PersonContract?: PersonContractUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutTeamsNestedInput
    teamLocation?: TeamLocationUpdateOneWithoutTeamNestedInput
    PersonContract?: PersonContractUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamLocation?: TeamLocationUncheckedUpdateOneWithoutTeamNestedInput
    PersonContract?: PersonContractUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: string
    name: string
    shortName: string
    isActive: boolean
    ownerId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type TeamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamLocationCreateInput = {
    id?: string
    updatedAt?: Date | string
    createdAt?: Date | string
    team: TeamCreateNestedOneWithoutTeamLocationInput
    location: LocationCreateNestedOneWithoutTeamsInput
  }

  export type TeamLocationUncheckedCreateInput = {
    id?: string
    teamId: string
    locationId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type TeamLocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutTeamLocationNestedInput
    location?: LocationUpdateOneRequiredWithoutTeamsNestedInput
  }

  export type TeamLocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamLocationCreateManyInput = {
    id?: string
    teamId: string
    locationId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type TeamLocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamLocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonContractCreateInput = {
    id?: string
    contractType: $Enums.ContractType
    updatedAt?: Date | string
    createdAt?: Date | string
    person: PersonCreateNestedOneWithoutPersonContractInput
    team: TeamCreateNestedOneWithoutPersonContractInput
  }

  export type PersonContractUncheckedCreateInput = {
    id?: string
    personId: string
    teamId: string
    contractType: $Enums.ContractType
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PersonContractUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutPersonContractNestedInput
    team?: TeamUpdateOneRequiredWithoutPersonContractNestedInput
  }

  export type PersonContractUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonContractCreateManyInput = {
    id?: string
    personId: string
    teamId: string
    contractType: $Enums.ContractType
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PersonContractUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonContractUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type TeamListRelationFilter = {
    every?: TeamWhereInput
    some?: TeamWhereInput
    none?: TeamWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    banned?: SortOrder
    banReason?: SortOrder
    banExpires?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    banned?: SortOrder
    banReason?: SortOrder
    banExpires?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    banned?: SortOrder
    banReason?: SortOrder
    banExpires?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationCountOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegionI18nListRelationFilter = {
    every?: RegionI18nWhereInput
    some?: RegionI18nWhereInput
    none?: RegionI18nWhereInput
  }

  export type LocationListRelationFilter = {
    every?: LocationWhereInput
    some?: LocationWhereInput
    none?: LocationWhereInput
  }

  export type RegionPopulationListRelationFilter = {
    every?: RegionPopulationWhereInput
    some?: RegionPopulationWhereInput
    none?: RegionPopulationWhereInput
  }

  export type RegionI18nOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegionPopulationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegionCountOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RegionMaxOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RegionMinOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RegionScalarRelationFilter = {
    is?: RegionWhereInput
    isNot?: RegionWhereInput
  }

  export type RegionI18nRegionIdLanguageCompoundUniqueInput = {
    regionId: string
    language: string
  }

  export type RegionI18nCountOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RegionI18nMaxOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RegionI18nMinOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumLocationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LocationType | EnumLocationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LocationType[] | ListEnumLocationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LocationType[] | ListEnumLocationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLocationTypeFilter<$PrismaModel> | $Enums.LocationType
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type LocationI18nListRelationFilter = {
    every?: LocationI18nWhereInput
    some?: LocationI18nWhereInput
    none?: LocationI18nWhereInput
  }

  export type BuildingListRelationFilter = {
    every?: BuildingWhereInput
    some?: BuildingWhereInput
    none?: BuildingWhereInput
  }

  export type RouteListRelationFilter = {
    every?: RouteWhereInput
    some?: RouteWhereInput
    none?: RouteWhereInput
  }

  export type TeamLocationListRelationFilter = {
    every?: TeamLocationWhereInput
    some?: TeamLocationWhereInput
    none?: TeamLocationWhereInput
  }

  export type TownInformationNullableScalarRelationFilter = {
    is?: TownInformationWhereInput | null
    isNot?: TownInformationWhereInput | null
  }

  export type LocationI18nOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuildingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RouteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamLocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    regionId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    regionId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    regionId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type EnumLocationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LocationType | EnumLocationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LocationType[] | ListEnumLocationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LocationType[] | ListEnumLocationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLocationTypeWithAggregatesFilter<$PrismaModel> | $Enums.LocationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLocationTypeFilter<$PrismaModel>
    _max?: NestedEnumLocationTypeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type LocationScalarRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type LocationI18nLocationIdLanguageCompoundUniqueInput = {
    locationId: string
    language: string
  }

  export type LocationI18nCountOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LocationI18nMaxOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LocationI18nMinOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type TownInformationCountOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    population?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TownInformationAvgOrderByAggregateInput = {
    population?: SortOrder
  }

  export type TownInformationMaxOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    population?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TownInformationMinOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    population?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TownInformationSumOrderByAggregateInput = {
    population?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumRouteTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RouteType | EnumRouteTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RouteType[] | ListEnumRouteTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RouteType[] | ListEnumRouteTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRouteTypeFilter<$PrismaModel> | $Enums.RouteType
  }

  export type RouteCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    fromId?: SortOrder
    toId?: SortOrder
    distance?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RouteAvgOrderByAggregateInput = {
    distance?: SortOrder
  }

  export type RouteMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    fromId?: SortOrder
    toId?: SortOrder
    distance?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RouteMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    fromId?: SortOrder
    toId?: SortOrder
    distance?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RouteSumOrderByAggregateInput = {
    distance?: SortOrder
  }

  export type EnumRouteTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RouteType | EnumRouteTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RouteType[] | ListEnumRouteTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RouteType[] | ListEnumRouteTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRouteTypeWithAggregatesFilter<$PrismaModel> | $Enums.RouteType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRouteTypeFilter<$PrismaModel>
    _max?: NestedEnumRouteTypeFilter<$PrismaModel>
  }

  export type BuildingTypeI18nListRelationFilter = {
    every?: BuildingTypeI18nWhereInput
    some?: BuildingTypeI18nWhereInput
    none?: BuildingTypeI18nWhereInput
  }

  export type BuildingTypeI18nOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuildingTypeCountOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildingTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildingTypeMinOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildingTypeScalarRelationFilter = {
    is?: BuildingTypeWhereInput
    isNot?: BuildingTypeWhereInput
  }

  export type BuildingTypeI18nBuildingTypeIdLanguageCompoundUniqueInput = {
    buildingTypeId: string
    language: string
  }

  export type BuildingTypeI18nCountOrderByAggregateInput = {
    id?: SortOrder
    buildingTypeId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildingTypeI18nMaxOrderByAggregateInput = {
    id?: SortOrder
    buildingTypeId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildingTypeI18nMinOrderByAggregateInput = {
    id?: SortOrder
    buildingTypeId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildingI18nListRelationFilter = {
    every?: BuildingI18nWhereInput
    some?: BuildingI18nWhereInput
    none?: BuildingI18nWhereInput
  }

  export type StadiumInfoNullableScalarRelationFilter = {
    is?: StadiumInfoWhereInput | null
    isNot?: StadiumInfoWhereInput | null
  }

  export type BuildingI18nOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuildingCountOrderByAggregateInput = {
    id?: SortOrder
    buildingTypeId?: SortOrder
    locationId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildingMaxOrderByAggregateInput = {
    id?: SortOrder
    buildingTypeId?: SortOrder
    locationId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildingMinOrderByAggregateInput = {
    id?: SortOrder
    buildingTypeId?: SortOrder
    locationId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildingScalarRelationFilter = {
    is?: BuildingWhereInput
    isNot?: BuildingWhereInput
  }

  export type BuildingI18nBuildingIdLanguageCompoundUniqueInput = {
    buildingId: string
    language: string
  }

  export type BuildingI18nCountOrderByAggregateInput = {
    id?: SortOrder
    buildingId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    description?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildingI18nMaxOrderByAggregateInput = {
    id?: SortOrder
    buildingId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    description?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildingI18nMinOrderByAggregateInput = {
    id?: SortOrder
    buildingId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    description?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StadiumInfoCountOrderByAggregateInput = {
    id?: SortOrder
    buildingId?: SortOrder
    capacity?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StadiumInfoAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type StadiumInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    buildingId?: SortOrder
    capacity?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StadiumInfoMinOrderByAggregateInput = {
    id?: SortOrder
    buildingId?: SortOrder
    capacity?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StadiumInfoSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type RaceI18nListRelationFilter = {
    every?: RaceI18nWhereInput
    some?: RaceI18nWhereInput
    none?: RaceI18nWhereInput
  }

  export type CultureListRelationFilter = {
    every?: CultureWhereInput
    some?: CultureWhereInput
    none?: CultureWhereInput
  }

  export type PersonListRelationFilter = {
    every?: PersonWhereInput
    some?: PersonWhereInput
    none?: PersonWhereInput
  }

  export type RaceI18nOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CultureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RaceCountOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RaceMaxOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RaceMinOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RaceScalarRelationFilter = {
    is?: RaceWhereInput
    isNot?: RaceWhereInput
  }

  export type RaceI18nRaceIdLanguageCompoundUniqueInput = {
    raceId: string
    language: string
  }

  export type RaceI18nCountOrderByAggregateInput = {
    id?: SortOrder
    raceId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RaceI18nMaxOrderByAggregateInput = {
    id?: SortOrder
    raceId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RaceI18nMinOrderByAggregateInput = {
    id?: SortOrder
    raceId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type CultureI18nListRelationFilter = {
    every?: CultureI18nWhereInput
    some?: CultureI18nWhereInput
    none?: CultureI18nWhereInput
  }

  export type NameModelListRelationFilter = {
    every?: NameModelWhereInput
    some?: NameModelWhereInput
    none?: NameModelWhereInput
  }

  export type CultureI18nOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NameModelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CultureCountOrderByAggregateInput = {
    id?: SortOrder
    raceId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type CultureMaxOrderByAggregateInput = {
    id?: SortOrder
    raceId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type CultureMinOrderByAggregateInput = {
    id?: SortOrder
    raceId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type CultureScalarRelationFilter = {
    is?: CultureWhereInput
    isNot?: CultureWhereInput
  }

  export type CultureI18nCultureIdLanguageCompoundUniqueInput = {
    cultureId: string
    language: string
  }

  export type CultureI18nCountOrderByAggregateInput = {
    id?: SortOrder
    cultureId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type CultureI18nMaxOrderByAggregateInput = {
    id?: SortOrder
    cultureId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type CultureI18nMinOrderByAggregateInput = {
    id?: SortOrder
    cultureId?: SortOrder
    language?: SortOrder
    name?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RegionPopulationRegionIdCultureIdCompoundUniqueInput = {
    regionId: string
    cultureId: string
  }

  export type RegionPopulationCountOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    cultureId?: SortOrder
    percentage?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RegionPopulationAvgOrderByAggregateInput = {
    percentage?: SortOrder
  }

  export type RegionPopulationMaxOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    cultureId?: SortOrder
    percentage?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RegionPopulationMinOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    cultureId?: SortOrder
    percentage?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RegionPopulationSumOrderByAggregateInput = {
    percentage?: SortOrder
  }

  export type EnumSexTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SexType | EnumSexTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SexType[] | ListEnumSexTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SexType[] | ListEnumSexTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSexTypeFilter<$PrismaModel> | $Enums.SexType
  }

  export type NameModelCultureIdSexCompoundUniqueInput = {
    cultureId: string
    sex: $Enums.SexType
  }

  export type NameModelCountOrderByAggregateInput = {
    id?: SortOrder
    cultureId?: SortOrder
    sex?: SortOrder
    firstnameTemplate?: SortOrder
    lastnameTemplate?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NameModelMaxOrderByAggregateInput = {
    id?: SortOrder
    cultureId?: SortOrder
    sex?: SortOrder
    firstnameTemplate?: SortOrder
    lastnameTemplate?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NameModelMinOrderByAggregateInput = {
    id?: SortOrder
    cultureId?: SortOrder
    sex?: SortOrder
    firstnameTemplate?: SortOrder
    lastnameTemplate?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumSexTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SexType | EnumSexTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SexType[] | ListEnumSexTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SexType[] | ListEnumSexTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSexTypeWithAggregatesFilter<$PrismaModel> | $Enums.SexType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSexTypeFilter<$PrismaModel>
    _max?: NestedEnumSexTypeFilter<$PrismaModel>
  }

  export type NameComponentValueListRelationFilter = {
    every?: NameComponentValueWhereInput
    some?: NameComponentValueWhereInput
    none?: NameComponentValueWhereInput
  }

  export type NameComponentValueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NameComponentKeyCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NameComponentKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NameComponentKeyMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NameComponentKeyScalarRelationFilter = {
    is?: NameComponentKeyWhereInput
    isNot?: NameComponentKeyWhereInput
  }

  export type NameComponentValueCountOrderByAggregateInput = {
    id?: SortOrder
    keyId?: SortOrder
    value?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NameComponentValueMaxOrderByAggregateInput = {
    id?: SortOrder
    keyId?: SortOrder
    value?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NameComponentValueMinOrderByAggregateInput = {
    id?: SortOrder
    keyId?: SortOrder
    value?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PlayerCharacteristicsNullableScalarRelationFilter = {
    is?: PlayerCharacteristicsWhereInput | null
    isNot?: PlayerCharacteristicsWhereInput | null
  }

  export type PersonContractListRelationFilter = {
    every?: PersonContractWhereInput
    some?: PersonContractWhereInput
    none?: PersonContractWhereInput
  }

  export type PersonContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    raceId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PersonMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    raceId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PersonMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    raceId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PersonScalarRelationFilter = {
    is?: PersonWhereInput
    isNot?: PersonWhereInput
  }

  export type PlayerCharacteristicsCountOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PlayerCharacteristicsMaxOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PlayerCharacteristicsMinOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TeamLocationNullableScalarRelationFilter = {
    is?: TeamLocationWhereInput | null
    isNot?: TeamLocationWhereInput | null
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamScalarRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type TeamLocationCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    locationId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    locationId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamLocationMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    locationId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumContractTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContractTypeFilter<$PrismaModel> | $Enums.ContractType
  }

  export type PersonContractCountOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    teamId?: SortOrder
    contractType?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PersonContractMaxOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    teamId?: SortOrder
    contractType?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PersonContractMinOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    teamId?: SortOrder
    contractType?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumContractTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContractTypeWithAggregatesFilter<$PrismaModel> | $Enums.ContractType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractTypeFilter<$PrismaModel>
    _max?: NestedEnumContractTypeFilter<$PrismaModel>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type TeamCreateNestedManyWithoutOwnerInput = {
    create?: XOR<TeamCreateWithoutOwnerInput, TeamUncheckedCreateWithoutOwnerInput> | TeamCreateWithoutOwnerInput[] | TeamUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutOwnerInput | TeamCreateOrConnectWithoutOwnerInput[]
    createMany?: TeamCreateManyOwnerInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<TeamCreateWithoutOwnerInput, TeamUncheckedCreateWithoutOwnerInput> | TeamCreateWithoutOwnerInput[] | TeamUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutOwnerInput | TeamCreateOrConnectWithoutOwnerInput[]
    createMany?: TeamCreateManyOwnerInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type TeamUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<TeamCreateWithoutOwnerInput, TeamUncheckedCreateWithoutOwnerInput> | TeamCreateWithoutOwnerInput[] | TeamUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutOwnerInput | TeamCreateOrConnectWithoutOwnerInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutOwnerInput | TeamUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: TeamCreateManyOwnerInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutOwnerInput | TeamUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutOwnerInput | TeamUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type TeamUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<TeamCreateWithoutOwnerInput, TeamUncheckedCreateWithoutOwnerInput> | TeamCreateWithoutOwnerInput[] | TeamUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutOwnerInput | TeamCreateOrConnectWithoutOwnerInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutOwnerInput | TeamUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: TeamCreateManyOwnerInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutOwnerInput | TeamUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutOwnerInput | TeamUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type RegionI18nCreateNestedManyWithoutRegionInput = {
    create?: XOR<RegionI18nCreateWithoutRegionInput, RegionI18nUncheckedCreateWithoutRegionInput> | RegionI18nCreateWithoutRegionInput[] | RegionI18nUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: RegionI18nCreateOrConnectWithoutRegionInput | RegionI18nCreateOrConnectWithoutRegionInput[]
    createMany?: RegionI18nCreateManyRegionInputEnvelope
    connect?: RegionI18nWhereUniqueInput | RegionI18nWhereUniqueInput[]
  }

  export type LocationCreateNestedManyWithoutRegionInput = {
    create?: XOR<LocationCreateWithoutRegionInput, LocationUncheckedCreateWithoutRegionInput> | LocationCreateWithoutRegionInput[] | LocationUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutRegionInput | LocationCreateOrConnectWithoutRegionInput[]
    createMany?: LocationCreateManyRegionInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type RegionPopulationCreateNestedManyWithoutRegionInput = {
    create?: XOR<RegionPopulationCreateWithoutRegionInput, RegionPopulationUncheckedCreateWithoutRegionInput> | RegionPopulationCreateWithoutRegionInput[] | RegionPopulationUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: RegionPopulationCreateOrConnectWithoutRegionInput | RegionPopulationCreateOrConnectWithoutRegionInput[]
    createMany?: RegionPopulationCreateManyRegionInputEnvelope
    connect?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
  }

  export type RegionI18nUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<RegionI18nCreateWithoutRegionInput, RegionI18nUncheckedCreateWithoutRegionInput> | RegionI18nCreateWithoutRegionInput[] | RegionI18nUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: RegionI18nCreateOrConnectWithoutRegionInput | RegionI18nCreateOrConnectWithoutRegionInput[]
    createMany?: RegionI18nCreateManyRegionInputEnvelope
    connect?: RegionI18nWhereUniqueInput | RegionI18nWhereUniqueInput[]
  }

  export type LocationUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<LocationCreateWithoutRegionInput, LocationUncheckedCreateWithoutRegionInput> | LocationCreateWithoutRegionInput[] | LocationUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutRegionInput | LocationCreateOrConnectWithoutRegionInput[]
    createMany?: LocationCreateManyRegionInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type RegionPopulationUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<RegionPopulationCreateWithoutRegionInput, RegionPopulationUncheckedCreateWithoutRegionInput> | RegionPopulationCreateWithoutRegionInput[] | RegionPopulationUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: RegionPopulationCreateOrConnectWithoutRegionInput | RegionPopulationCreateOrConnectWithoutRegionInput[]
    createMany?: RegionPopulationCreateManyRegionInputEnvelope
    connect?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
  }

  export type RegionI18nUpdateManyWithoutRegionNestedInput = {
    create?: XOR<RegionI18nCreateWithoutRegionInput, RegionI18nUncheckedCreateWithoutRegionInput> | RegionI18nCreateWithoutRegionInput[] | RegionI18nUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: RegionI18nCreateOrConnectWithoutRegionInput | RegionI18nCreateOrConnectWithoutRegionInput[]
    upsert?: RegionI18nUpsertWithWhereUniqueWithoutRegionInput | RegionI18nUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: RegionI18nCreateManyRegionInputEnvelope
    set?: RegionI18nWhereUniqueInput | RegionI18nWhereUniqueInput[]
    disconnect?: RegionI18nWhereUniqueInput | RegionI18nWhereUniqueInput[]
    delete?: RegionI18nWhereUniqueInput | RegionI18nWhereUniqueInput[]
    connect?: RegionI18nWhereUniqueInput | RegionI18nWhereUniqueInput[]
    update?: RegionI18nUpdateWithWhereUniqueWithoutRegionInput | RegionI18nUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: RegionI18nUpdateManyWithWhereWithoutRegionInput | RegionI18nUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: RegionI18nScalarWhereInput | RegionI18nScalarWhereInput[]
  }

  export type LocationUpdateManyWithoutRegionNestedInput = {
    create?: XOR<LocationCreateWithoutRegionInput, LocationUncheckedCreateWithoutRegionInput> | LocationCreateWithoutRegionInput[] | LocationUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutRegionInput | LocationCreateOrConnectWithoutRegionInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutRegionInput | LocationUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: LocationCreateManyRegionInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutRegionInput | LocationUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutRegionInput | LocationUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type RegionPopulationUpdateManyWithoutRegionNestedInput = {
    create?: XOR<RegionPopulationCreateWithoutRegionInput, RegionPopulationUncheckedCreateWithoutRegionInput> | RegionPopulationCreateWithoutRegionInput[] | RegionPopulationUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: RegionPopulationCreateOrConnectWithoutRegionInput | RegionPopulationCreateOrConnectWithoutRegionInput[]
    upsert?: RegionPopulationUpsertWithWhereUniqueWithoutRegionInput | RegionPopulationUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: RegionPopulationCreateManyRegionInputEnvelope
    set?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    disconnect?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    delete?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    connect?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    update?: RegionPopulationUpdateWithWhereUniqueWithoutRegionInput | RegionPopulationUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: RegionPopulationUpdateManyWithWhereWithoutRegionInput | RegionPopulationUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: RegionPopulationScalarWhereInput | RegionPopulationScalarWhereInput[]
  }

  export type RegionI18nUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<RegionI18nCreateWithoutRegionInput, RegionI18nUncheckedCreateWithoutRegionInput> | RegionI18nCreateWithoutRegionInput[] | RegionI18nUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: RegionI18nCreateOrConnectWithoutRegionInput | RegionI18nCreateOrConnectWithoutRegionInput[]
    upsert?: RegionI18nUpsertWithWhereUniqueWithoutRegionInput | RegionI18nUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: RegionI18nCreateManyRegionInputEnvelope
    set?: RegionI18nWhereUniqueInput | RegionI18nWhereUniqueInput[]
    disconnect?: RegionI18nWhereUniqueInput | RegionI18nWhereUniqueInput[]
    delete?: RegionI18nWhereUniqueInput | RegionI18nWhereUniqueInput[]
    connect?: RegionI18nWhereUniqueInput | RegionI18nWhereUniqueInput[]
    update?: RegionI18nUpdateWithWhereUniqueWithoutRegionInput | RegionI18nUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: RegionI18nUpdateManyWithWhereWithoutRegionInput | RegionI18nUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: RegionI18nScalarWhereInput | RegionI18nScalarWhereInput[]
  }

  export type LocationUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<LocationCreateWithoutRegionInput, LocationUncheckedCreateWithoutRegionInput> | LocationCreateWithoutRegionInput[] | LocationUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutRegionInput | LocationCreateOrConnectWithoutRegionInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutRegionInput | LocationUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: LocationCreateManyRegionInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutRegionInput | LocationUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutRegionInput | LocationUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type RegionPopulationUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<RegionPopulationCreateWithoutRegionInput, RegionPopulationUncheckedCreateWithoutRegionInput> | RegionPopulationCreateWithoutRegionInput[] | RegionPopulationUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: RegionPopulationCreateOrConnectWithoutRegionInput | RegionPopulationCreateOrConnectWithoutRegionInput[]
    upsert?: RegionPopulationUpsertWithWhereUniqueWithoutRegionInput | RegionPopulationUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: RegionPopulationCreateManyRegionInputEnvelope
    set?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    disconnect?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    delete?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    connect?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    update?: RegionPopulationUpdateWithWhereUniqueWithoutRegionInput | RegionPopulationUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: RegionPopulationUpdateManyWithWhereWithoutRegionInput | RegionPopulationUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: RegionPopulationScalarWhereInput | RegionPopulationScalarWhereInput[]
  }

  export type RegionCreateNestedOneWithoutI18nInput = {
    create?: XOR<RegionCreateWithoutI18nInput, RegionUncheckedCreateWithoutI18nInput>
    connectOrCreate?: RegionCreateOrConnectWithoutI18nInput
    connect?: RegionWhereUniqueInput
  }

  export type RegionUpdateOneRequiredWithoutI18nNestedInput = {
    create?: XOR<RegionCreateWithoutI18nInput, RegionUncheckedCreateWithoutI18nInput>
    connectOrCreate?: RegionCreateOrConnectWithoutI18nInput
    upsert?: RegionUpsertWithoutI18nInput
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutI18nInput, RegionUpdateWithoutI18nInput>, RegionUncheckedUpdateWithoutI18nInput>
  }

  export type LocationI18nCreateNestedManyWithoutLocationInput = {
    create?: XOR<LocationI18nCreateWithoutLocationInput, LocationI18nUncheckedCreateWithoutLocationInput> | LocationI18nCreateWithoutLocationInput[] | LocationI18nUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationI18nCreateOrConnectWithoutLocationInput | LocationI18nCreateOrConnectWithoutLocationInput[]
    createMany?: LocationI18nCreateManyLocationInputEnvelope
    connect?: LocationI18nWhereUniqueInput | LocationI18nWhereUniqueInput[]
  }

  export type BuildingCreateNestedManyWithoutLocationInput = {
    create?: XOR<BuildingCreateWithoutLocationInput, BuildingUncheckedCreateWithoutLocationInput> | BuildingCreateWithoutLocationInput[] | BuildingUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: BuildingCreateOrConnectWithoutLocationInput | BuildingCreateOrConnectWithoutLocationInput[]
    createMany?: BuildingCreateManyLocationInputEnvelope
    connect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
  }

  export type RegionCreateNestedOneWithoutLocationsInput = {
    create?: XOR<RegionCreateWithoutLocationsInput, RegionUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: RegionCreateOrConnectWithoutLocationsInput
    connect?: RegionWhereUniqueInput
  }

  export type RouteCreateNestedManyWithoutLocationFromInput = {
    create?: XOR<RouteCreateWithoutLocationFromInput, RouteUncheckedCreateWithoutLocationFromInput> | RouteCreateWithoutLocationFromInput[] | RouteUncheckedCreateWithoutLocationFromInput[]
    connectOrCreate?: RouteCreateOrConnectWithoutLocationFromInput | RouteCreateOrConnectWithoutLocationFromInput[]
    createMany?: RouteCreateManyLocationFromInputEnvelope
    connect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
  }

  export type RouteCreateNestedManyWithoutLocationToInput = {
    create?: XOR<RouteCreateWithoutLocationToInput, RouteUncheckedCreateWithoutLocationToInput> | RouteCreateWithoutLocationToInput[] | RouteUncheckedCreateWithoutLocationToInput[]
    connectOrCreate?: RouteCreateOrConnectWithoutLocationToInput | RouteCreateOrConnectWithoutLocationToInput[]
    createMany?: RouteCreateManyLocationToInputEnvelope
    connect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
  }

  export type TeamLocationCreateNestedManyWithoutLocationInput = {
    create?: XOR<TeamLocationCreateWithoutLocationInput, TeamLocationUncheckedCreateWithoutLocationInput> | TeamLocationCreateWithoutLocationInput[] | TeamLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TeamLocationCreateOrConnectWithoutLocationInput | TeamLocationCreateOrConnectWithoutLocationInput[]
    createMany?: TeamLocationCreateManyLocationInputEnvelope
    connect?: TeamLocationWhereUniqueInput | TeamLocationWhereUniqueInput[]
  }

  export type TownInformationCreateNestedOneWithoutLocationInput = {
    create?: XOR<TownInformationCreateWithoutLocationInput, TownInformationUncheckedCreateWithoutLocationInput>
    connectOrCreate?: TownInformationCreateOrConnectWithoutLocationInput
    connect?: TownInformationWhereUniqueInput
  }

  export type LocationI18nUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<LocationI18nCreateWithoutLocationInput, LocationI18nUncheckedCreateWithoutLocationInput> | LocationI18nCreateWithoutLocationInput[] | LocationI18nUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationI18nCreateOrConnectWithoutLocationInput | LocationI18nCreateOrConnectWithoutLocationInput[]
    createMany?: LocationI18nCreateManyLocationInputEnvelope
    connect?: LocationI18nWhereUniqueInput | LocationI18nWhereUniqueInput[]
  }

  export type BuildingUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<BuildingCreateWithoutLocationInput, BuildingUncheckedCreateWithoutLocationInput> | BuildingCreateWithoutLocationInput[] | BuildingUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: BuildingCreateOrConnectWithoutLocationInput | BuildingCreateOrConnectWithoutLocationInput[]
    createMany?: BuildingCreateManyLocationInputEnvelope
    connect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
  }

  export type RouteUncheckedCreateNestedManyWithoutLocationFromInput = {
    create?: XOR<RouteCreateWithoutLocationFromInput, RouteUncheckedCreateWithoutLocationFromInput> | RouteCreateWithoutLocationFromInput[] | RouteUncheckedCreateWithoutLocationFromInput[]
    connectOrCreate?: RouteCreateOrConnectWithoutLocationFromInput | RouteCreateOrConnectWithoutLocationFromInput[]
    createMany?: RouteCreateManyLocationFromInputEnvelope
    connect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
  }

  export type RouteUncheckedCreateNestedManyWithoutLocationToInput = {
    create?: XOR<RouteCreateWithoutLocationToInput, RouteUncheckedCreateWithoutLocationToInput> | RouteCreateWithoutLocationToInput[] | RouteUncheckedCreateWithoutLocationToInput[]
    connectOrCreate?: RouteCreateOrConnectWithoutLocationToInput | RouteCreateOrConnectWithoutLocationToInput[]
    createMany?: RouteCreateManyLocationToInputEnvelope
    connect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
  }

  export type TeamLocationUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<TeamLocationCreateWithoutLocationInput, TeamLocationUncheckedCreateWithoutLocationInput> | TeamLocationCreateWithoutLocationInput[] | TeamLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TeamLocationCreateOrConnectWithoutLocationInput | TeamLocationCreateOrConnectWithoutLocationInput[]
    createMany?: TeamLocationCreateManyLocationInputEnvelope
    connect?: TeamLocationWhereUniqueInput | TeamLocationWhereUniqueInput[]
  }

  export type TownInformationUncheckedCreateNestedOneWithoutLocationInput = {
    create?: XOR<TownInformationCreateWithoutLocationInput, TownInformationUncheckedCreateWithoutLocationInput>
    connectOrCreate?: TownInformationCreateOrConnectWithoutLocationInput
    connect?: TownInformationWhereUniqueInput
  }

  export type EnumLocationTypeFieldUpdateOperationsInput = {
    set?: $Enums.LocationType
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LocationI18nUpdateManyWithoutLocationNestedInput = {
    create?: XOR<LocationI18nCreateWithoutLocationInput, LocationI18nUncheckedCreateWithoutLocationInput> | LocationI18nCreateWithoutLocationInput[] | LocationI18nUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationI18nCreateOrConnectWithoutLocationInput | LocationI18nCreateOrConnectWithoutLocationInput[]
    upsert?: LocationI18nUpsertWithWhereUniqueWithoutLocationInput | LocationI18nUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: LocationI18nCreateManyLocationInputEnvelope
    set?: LocationI18nWhereUniqueInput | LocationI18nWhereUniqueInput[]
    disconnect?: LocationI18nWhereUniqueInput | LocationI18nWhereUniqueInput[]
    delete?: LocationI18nWhereUniqueInput | LocationI18nWhereUniqueInput[]
    connect?: LocationI18nWhereUniqueInput | LocationI18nWhereUniqueInput[]
    update?: LocationI18nUpdateWithWhereUniqueWithoutLocationInput | LocationI18nUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: LocationI18nUpdateManyWithWhereWithoutLocationInput | LocationI18nUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: LocationI18nScalarWhereInput | LocationI18nScalarWhereInput[]
  }

  export type BuildingUpdateManyWithoutLocationNestedInput = {
    create?: XOR<BuildingCreateWithoutLocationInput, BuildingUncheckedCreateWithoutLocationInput> | BuildingCreateWithoutLocationInput[] | BuildingUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: BuildingCreateOrConnectWithoutLocationInput | BuildingCreateOrConnectWithoutLocationInput[]
    upsert?: BuildingUpsertWithWhereUniqueWithoutLocationInput | BuildingUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: BuildingCreateManyLocationInputEnvelope
    set?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    disconnect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    delete?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    connect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    update?: BuildingUpdateWithWhereUniqueWithoutLocationInput | BuildingUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: BuildingUpdateManyWithWhereWithoutLocationInput | BuildingUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: BuildingScalarWhereInput | BuildingScalarWhereInput[]
  }

  export type RegionUpdateOneRequiredWithoutLocationsNestedInput = {
    create?: XOR<RegionCreateWithoutLocationsInput, RegionUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: RegionCreateOrConnectWithoutLocationsInput
    upsert?: RegionUpsertWithoutLocationsInput
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutLocationsInput, RegionUpdateWithoutLocationsInput>, RegionUncheckedUpdateWithoutLocationsInput>
  }

  export type RouteUpdateManyWithoutLocationFromNestedInput = {
    create?: XOR<RouteCreateWithoutLocationFromInput, RouteUncheckedCreateWithoutLocationFromInput> | RouteCreateWithoutLocationFromInput[] | RouteUncheckedCreateWithoutLocationFromInput[]
    connectOrCreate?: RouteCreateOrConnectWithoutLocationFromInput | RouteCreateOrConnectWithoutLocationFromInput[]
    upsert?: RouteUpsertWithWhereUniqueWithoutLocationFromInput | RouteUpsertWithWhereUniqueWithoutLocationFromInput[]
    createMany?: RouteCreateManyLocationFromInputEnvelope
    set?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    disconnect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    delete?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    connect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    update?: RouteUpdateWithWhereUniqueWithoutLocationFromInput | RouteUpdateWithWhereUniqueWithoutLocationFromInput[]
    updateMany?: RouteUpdateManyWithWhereWithoutLocationFromInput | RouteUpdateManyWithWhereWithoutLocationFromInput[]
    deleteMany?: RouteScalarWhereInput | RouteScalarWhereInput[]
  }

  export type RouteUpdateManyWithoutLocationToNestedInput = {
    create?: XOR<RouteCreateWithoutLocationToInput, RouteUncheckedCreateWithoutLocationToInput> | RouteCreateWithoutLocationToInput[] | RouteUncheckedCreateWithoutLocationToInput[]
    connectOrCreate?: RouteCreateOrConnectWithoutLocationToInput | RouteCreateOrConnectWithoutLocationToInput[]
    upsert?: RouteUpsertWithWhereUniqueWithoutLocationToInput | RouteUpsertWithWhereUniqueWithoutLocationToInput[]
    createMany?: RouteCreateManyLocationToInputEnvelope
    set?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    disconnect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    delete?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    connect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    update?: RouteUpdateWithWhereUniqueWithoutLocationToInput | RouteUpdateWithWhereUniqueWithoutLocationToInput[]
    updateMany?: RouteUpdateManyWithWhereWithoutLocationToInput | RouteUpdateManyWithWhereWithoutLocationToInput[]
    deleteMany?: RouteScalarWhereInput | RouteScalarWhereInput[]
  }

  export type TeamLocationUpdateManyWithoutLocationNestedInput = {
    create?: XOR<TeamLocationCreateWithoutLocationInput, TeamLocationUncheckedCreateWithoutLocationInput> | TeamLocationCreateWithoutLocationInput[] | TeamLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TeamLocationCreateOrConnectWithoutLocationInput | TeamLocationCreateOrConnectWithoutLocationInput[]
    upsert?: TeamLocationUpsertWithWhereUniqueWithoutLocationInput | TeamLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: TeamLocationCreateManyLocationInputEnvelope
    set?: TeamLocationWhereUniqueInput | TeamLocationWhereUniqueInput[]
    disconnect?: TeamLocationWhereUniqueInput | TeamLocationWhereUniqueInput[]
    delete?: TeamLocationWhereUniqueInput | TeamLocationWhereUniqueInput[]
    connect?: TeamLocationWhereUniqueInput | TeamLocationWhereUniqueInput[]
    update?: TeamLocationUpdateWithWhereUniqueWithoutLocationInput | TeamLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: TeamLocationUpdateManyWithWhereWithoutLocationInput | TeamLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: TeamLocationScalarWhereInput | TeamLocationScalarWhereInput[]
  }

  export type TownInformationUpdateOneWithoutLocationNestedInput = {
    create?: XOR<TownInformationCreateWithoutLocationInput, TownInformationUncheckedCreateWithoutLocationInput>
    connectOrCreate?: TownInformationCreateOrConnectWithoutLocationInput
    upsert?: TownInformationUpsertWithoutLocationInput
    disconnect?: TownInformationWhereInput | boolean
    delete?: TownInformationWhereInput | boolean
    connect?: TownInformationWhereUniqueInput
    update?: XOR<XOR<TownInformationUpdateToOneWithWhereWithoutLocationInput, TownInformationUpdateWithoutLocationInput>, TownInformationUncheckedUpdateWithoutLocationInput>
  }

  export type LocationI18nUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<LocationI18nCreateWithoutLocationInput, LocationI18nUncheckedCreateWithoutLocationInput> | LocationI18nCreateWithoutLocationInput[] | LocationI18nUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationI18nCreateOrConnectWithoutLocationInput | LocationI18nCreateOrConnectWithoutLocationInput[]
    upsert?: LocationI18nUpsertWithWhereUniqueWithoutLocationInput | LocationI18nUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: LocationI18nCreateManyLocationInputEnvelope
    set?: LocationI18nWhereUniqueInput | LocationI18nWhereUniqueInput[]
    disconnect?: LocationI18nWhereUniqueInput | LocationI18nWhereUniqueInput[]
    delete?: LocationI18nWhereUniqueInput | LocationI18nWhereUniqueInput[]
    connect?: LocationI18nWhereUniqueInput | LocationI18nWhereUniqueInput[]
    update?: LocationI18nUpdateWithWhereUniqueWithoutLocationInput | LocationI18nUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: LocationI18nUpdateManyWithWhereWithoutLocationInput | LocationI18nUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: LocationI18nScalarWhereInput | LocationI18nScalarWhereInput[]
  }

  export type BuildingUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<BuildingCreateWithoutLocationInput, BuildingUncheckedCreateWithoutLocationInput> | BuildingCreateWithoutLocationInput[] | BuildingUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: BuildingCreateOrConnectWithoutLocationInput | BuildingCreateOrConnectWithoutLocationInput[]
    upsert?: BuildingUpsertWithWhereUniqueWithoutLocationInput | BuildingUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: BuildingCreateManyLocationInputEnvelope
    set?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    disconnect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    delete?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    connect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    update?: BuildingUpdateWithWhereUniqueWithoutLocationInput | BuildingUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: BuildingUpdateManyWithWhereWithoutLocationInput | BuildingUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: BuildingScalarWhereInput | BuildingScalarWhereInput[]
  }

  export type RouteUncheckedUpdateManyWithoutLocationFromNestedInput = {
    create?: XOR<RouteCreateWithoutLocationFromInput, RouteUncheckedCreateWithoutLocationFromInput> | RouteCreateWithoutLocationFromInput[] | RouteUncheckedCreateWithoutLocationFromInput[]
    connectOrCreate?: RouteCreateOrConnectWithoutLocationFromInput | RouteCreateOrConnectWithoutLocationFromInput[]
    upsert?: RouteUpsertWithWhereUniqueWithoutLocationFromInput | RouteUpsertWithWhereUniqueWithoutLocationFromInput[]
    createMany?: RouteCreateManyLocationFromInputEnvelope
    set?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    disconnect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    delete?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    connect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    update?: RouteUpdateWithWhereUniqueWithoutLocationFromInput | RouteUpdateWithWhereUniqueWithoutLocationFromInput[]
    updateMany?: RouteUpdateManyWithWhereWithoutLocationFromInput | RouteUpdateManyWithWhereWithoutLocationFromInput[]
    deleteMany?: RouteScalarWhereInput | RouteScalarWhereInput[]
  }

  export type RouteUncheckedUpdateManyWithoutLocationToNestedInput = {
    create?: XOR<RouteCreateWithoutLocationToInput, RouteUncheckedCreateWithoutLocationToInput> | RouteCreateWithoutLocationToInput[] | RouteUncheckedCreateWithoutLocationToInput[]
    connectOrCreate?: RouteCreateOrConnectWithoutLocationToInput | RouteCreateOrConnectWithoutLocationToInput[]
    upsert?: RouteUpsertWithWhereUniqueWithoutLocationToInput | RouteUpsertWithWhereUniqueWithoutLocationToInput[]
    createMany?: RouteCreateManyLocationToInputEnvelope
    set?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    disconnect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    delete?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    connect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    update?: RouteUpdateWithWhereUniqueWithoutLocationToInput | RouteUpdateWithWhereUniqueWithoutLocationToInput[]
    updateMany?: RouteUpdateManyWithWhereWithoutLocationToInput | RouteUpdateManyWithWhereWithoutLocationToInput[]
    deleteMany?: RouteScalarWhereInput | RouteScalarWhereInput[]
  }

  export type TeamLocationUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<TeamLocationCreateWithoutLocationInput, TeamLocationUncheckedCreateWithoutLocationInput> | TeamLocationCreateWithoutLocationInput[] | TeamLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TeamLocationCreateOrConnectWithoutLocationInput | TeamLocationCreateOrConnectWithoutLocationInput[]
    upsert?: TeamLocationUpsertWithWhereUniqueWithoutLocationInput | TeamLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: TeamLocationCreateManyLocationInputEnvelope
    set?: TeamLocationWhereUniqueInput | TeamLocationWhereUniqueInput[]
    disconnect?: TeamLocationWhereUniqueInput | TeamLocationWhereUniqueInput[]
    delete?: TeamLocationWhereUniqueInput | TeamLocationWhereUniqueInput[]
    connect?: TeamLocationWhereUniqueInput | TeamLocationWhereUniqueInput[]
    update?: TeamLocationUpdateWithWhereUniqueWithoutLocationInput | TeamLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: TeamLocationUpdateManyWithWhereWithoutLocationInput | TeamLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: TeamLocationScalarWhereInput | TeamLocationScalarWhereInput[]
  }

  export type TownInformationUncheckedUpdateOneWithoutLocationNestedInput = {
    create?: XOR<TownInformationCreateWithoutLocationInput, TownInformationUncheckedCreateWithoutLocationInput>
    connectOrCreate?: TownInformationCreateOrConnectWithoutLocationInput
    upsert?: TownInformationUpsertWithoutLocationInput
    disconnect?: TownInformationWhereInput | boolean
    delete?: TownInformationWhereInput | boolean
    connect?: TownInformationWhereUniqueInput
    update?: XOR<XOR<TownInformationUpdateToOneWithWhereWithoutLocationInput, TownInformationUpdateWithoutLocationInput>, TownInformationUncheckedUpdateWithoutLocationInput>
  }

  export type LocationCreateNestedOneWithoutI18nInput = {
    create?: XOR<LocationCreateWithoutI18nInput, LocationUncheckedCreateWithoutI18nInput>
    connectOrCreate?: LocationCreateOrConnectWithoutI18nInput
    connect?: LocationWhereUniqueInput
  }

  export type LocationUpdateOneRequiredWithoutI18nNestedInput = {
    create?: XOR<LocationCreateWithoutI18nInput, LocationUncheckedCreateWithoutI18nInput>
    connectOrCreate?: LocationCreateOrConnectWithoutI18nInput
    upsert?: LocationUpsertWithoutI18nInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutI18nInput, LocationUpdateWithoutI18nInput>, LocationUncheckedUpdateWithoutI18nInput>
  }

  export type LocationCreateNestedOneWithoutTownInfoInput = {
    create?: XOR<LocationCreateWithoutTownInfoInput, LocationUncheckedCreateWithoutTownInfoInput>
    connectOrCreate?: LocationCreateOrConnectWithoutTownInfoInput
    connect?: LocationWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LocationUpdateOneRequiredWithoutTownInfoNestedInput = {
    create?: XOR<LocationCreateWithoutTownInfoInput, LocationUncheckedCreateWithoutTownInfoInput>
    connectOrCreate?: LocationCreateOrConnectWithoutTownInfoInput
    upsert?: LocationUpsertWithoutTownInfoInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutTownInfoInput, LocationUpdateWithoutTownInfoInput>, LocationUncheckedUpdateWithoutTownInfoInput>
  }

  export type LocationCreateNestedOneWithoutRoutesFromInput = {
    create?: XOR<LocationCreateWithoutRoutesFromInput, LocationUncheckedCreateWithoutRoutesFromInput>
    connectOrCreate?: LocationCreateOrConnectWithoutRoutesFromInput
    connect?: LocationWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutRoutesToInput = {
    create?: XOR<LocationCreateWithoutRoutesToInput, LocationUncheckedCreateWithoutRoutesToInput>
    connectOrCreate?: LocationCreateOrConnectWithoutRoutesToInput
    connect?: LocationWhereUniqueInput
  }

  export type EnumRouteTypeFieldUpdateOperationsInput = {
    set?: $Enums.RouteType
  }

  export type LocationUpdateOneRequiredWithoutRoutesFromNestedInput = {
    create?: XOR<LocationCreateWithoutRoutesFromInput, LocationUncheckedCreateWithoutRoutesFromInput>
    connectOrCreate?: LocationCreateOrConnectWithoutRoutesFromInput
    upsert?: LocationUpsertWithoutRoutesFromInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutRoutesFromInput, LocationUpdateWithoutRoutesFromInput>, LocationUncheckedUpdateWithoutRoutesFromInput>
  }

  export type LocationUpdateOneRequiredWithoutRoutesToNestedInput = {
    create?: XOR<LocationCreateWithoutRoutesToInput, LocationUncheckedCreateWithoutRoutesToInput>
    connectOrCreate?: LocationCreateOrConnectWithoutRoutesToInput
    upsert?: LocationUpsertWithoutRoutesToInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutRoutesToInput, LocationUpdateWithoutRoutesToInput>, LocationUncheckedUpdateWithoutRoutesToInput>
  }

  export type BuildingTypeI18nCreateNestedManyWithoutBuildingTypeInput = {
    create?: XOR<BuildingTypeI18nCreateWithoutBuildingTypeInput, BuildingTypeI18nUncheckedCreateWithoutBuildingTypeInput> | BuildingTypeI18nCreateWithoutBuildingTypeInput[] | BuildingTypeI18nUncheckedCreateWithoutBuildingTypeInput[]
    connectOrCreate?: BuildingTypeI18nCreateOrConnectWithoutBuildingTypeInput | BuildingTypeI18nCreateOrConnectWithoutBuildingTypeInput[]
    createMany?: BuildingTypeI18nCreateManyBuildingTypeInputEnvelope
    connect?: BuildingTypeI18nWhereUniqueInput | BuildingTypeI18nWhereUniqueInput[]
  }

  export type BuildingCreateNestedManyWithoutBuildingTypeInput = {
    create?: XOR<BuildingCreateWithoutBuildingTypeInput, BuildingUncheckedCreateWithoutBuildingTypeInput> | BuildingCreateWithoutBuildingTypeInput[] | BuildingUncheckedCreateWithoutBuildingTypeInput[]
    connectOrCreate?: BuildingCreateOrConnectWithoutBuildingTypeInput | BuildingCreateOrConnectWithoutBuildingTypeInput[]
    createMany?: BuildingCreateManyBuildingTypeInputEnvelope
    connect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
  }

  export type BuildingTypeI18nUncheckedCreateNestedManyWithoutBuildingTypeInput = {
    create?: XOR<BuildingTypeI18nCreateWithoutBuildingTypeInput, BuildingTypeI18nUncheckedCreateWithoutBuildingTypeInput> | BuildingTypeI18nCreateWithoutBuildingTypeInput[] | BuildingTypeI18nUncheckedCreateWithoutBuildingTypeInput[]
    connectOrCreate?: BuildingTypeI18nCreateOrConnectWithoutBuildingTypeInput | BuildingTypeI18nCreateOrConnectWithoutBuildingTypeInput[]
    createMany?: BuildingTypeI18nCreateManyBuildingTypeInputEnvelope
    connect?: BuildingTypeI18nWhereUniqueInput | BuildingTypeI18nWhereUniqueInput[]
  }

  export type BuildingUncheckedCreateNestedManyWithoutBuildingTypeInput = {
    create?: XOR<BuildingCreateWithoutBuildingTypeInput, BuildingUncheckedCreateWithoutBuildingTypeInput> | BuildingCreateWithoutBuildingTypeInput[] | BuildingUncheckedCreateWithoutBuildingTypeInput[]
    connectOrCreate?: BuildingCreateOrConnectWithoutBuildingTypeInput | BuildingCreateOrConnectWithoutBuildingTypeInput[]
    createMany?: BuildingCreateManyBuildingTypeInputEnvelope
    connect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
  }

  export type BuildingTypeI18nUpdateManyWithoutBuildingTypeNestedInput = {
    create?: XOR<BuildingTypeI18nCreateWithoutBuildingTypeInput, BuildingTypeI18nUncheckedCreateWithoutBuildingTypeInput> | BuildingTypeI18nCreateWithoutBuildingTypeInput[] | BuildingTypeI18nUncheckedCreateWithoutBuildingTypeInput[]
    connectOrCreate?: BuildingTypeI18nCreateOrConnectWithoutBuildingTypeInput | BuildingTypeI18nCreateOrConnectWithoutBuildingTypeInput[]
    upsert?: BuildingTypeI18nUpsertWithWhereUniqueWithoutBuildingTypeInput | BuildingTypeI18nUpsertWithWhereUniqueWithoutBuildingTypeInput[]
    createMany?: BuildingTypeI18nCreateManyBuildingTypeInputEnvelope
    set?: BuildingTypeI18nWhereUniqueInput | BuildingTypeI18nWhereUniqueInput[]
    disconnect?: BuildingTypeI18nWhereUniqueInput | BuildingTypeI18nWhereUniqueInput[]
    delete?: BuildingTypeI18nWhereUniqueInput | BuildingTypeI18nWhereUniqueInput[]
    connect?: BuildingTypeI18nWhereUniqueInput | BuildingTypeI18nWhereUniqueInput[]
    update?: BuildingTypeI18nUpdateWithWhereUniqueWithoutBuildingTypeInput | BuildingTypeI18nUpdateWithWhereUniqueWithoutBuildingTypeInput[]
    updateMany?: BuildingTypeI18nUpdateManyWithWhereWithoutBuildingTypeInput | BuildingTypeI18nUpdateManyWithWhereWithoutBuildingTypeInput[]
    deleteMany?: BuildingTypeI18nScalarWhereInput | BuildingTypeI18nScalarWhereInput[]
  }

  export type BuildingUpdateManyWithoutBuildingTypeNestedInput = {
    create?: XOR<BuildingCreateWithoutBuildingTypeInput, BuildingUncheckedCreateWithoutBuildingTypeInput> | BuildingCreateWithoutBuildingTypeInput[] | BuildingUncheckedCreateWithoutBuildingTypeInput[]
    connectOrCreate?: BuildingCreateOrConnectWithoutBuildingTypeInput | BuildingCreateOrConnectWithoutBuildingTypeInput[]
    upsert?: BuildingUpsertWithWhereUniqueWithoutBuildingTypeInput | BuildingUpsertWithWhereUniqueWithoutBuildingTypeInput[]
    createMany?: BuildingCreateManyBuildingTypeInputEnvelope
    set?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    disconnect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    delete?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    connect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    update?: BuildingUpdateWithWhereUniqueWithoutBuildingTypeInput | BuildingUpdateWithWhereUniqueWithoutBuildingTypeInput[]
    updateMany?: BuildingUpdateManyWithWhereWithoutBuildingTypeInput | BuildingUpdateManyWithWhereWithoutBuildingTypeInput[]
    deleteMany?: BuildingScalarWhereInput | BuildingScalarWhereInput[]
  }

  export type BuildingTypeI18nUncheckedUpdateManyWithoutBuildingTypeNestedInput = {
    create?: XOR<BuildingTypeI18nCreateWithoutBuildingTypeInput, BuildingTypeI18nUncheckedCreateWithoutBuildingTypeInput> | BuildingTypeI18nCreateWithoutBuildingTypeInput[] | BuildingTypeI18nUncheckedCreateWithoutBuildingTypeInput[]
    connectOrCreate?: BuildingTypeI18nCreateOrConnectWithoutBuildingTypeInput | BuildingTypeI18nCreateOrConnectWithoutBuildingTypeInput[]
    upsert?: BuildingTypeI18nUpsertWithWhereUniqueWithoutBuildingTypeInput | BuildingTypeI18nUpsertWithWhereUniqueWithoutBuildingTypeInput[]
    createMany?: BuildingTypeI18nCreateManyBuildingTypeInputEnvelope
    set?: BuildingTypeI18nWhereUniqueInput | BuildingTypeI18nWhereUniqueInput[]
    disconnect?: BuildingTypeI18nWhereUniqueInput | BuildingTypeI18nWhereUniqueInput[]
    delete?: BuildingTypeI18nWhereUniqueInput | BuildingTypeI18nWhereUniqueInput[]
    connect?: BuildingTypeI18nWhereUniqueInput | BuildingTypeI18nWhereUniqueInput[]
    update?: BuildingTypeI18nUpdateWithWhereUniqueWithoutBuildingTypeInput | BuildingTypeI18nUpdateWithWhereUniqueWithoutBuildingTypeInput[]
    updateMany?: BuildingTypeI18nUpdateManyWithWhereWithoutBuildingTypeInput | BuildingTypeI18nUpdateManyWithWhereWithoutBuildingTypeInput[]
    deleteMany?: BuildingTypeI18nScalarWhereInput | BuildingTypeI18nScalarWhereInput[]
  }

  export type BuildingUncheckedUpdateManyWithoutBuildingTypeNestedInput = {
    create?: XOR<BuildingCreateWithoutBuildingTypeInput, BuildingUncheckedCreateWithoutBuildingTypeInput> | BuildingCreateWithoutBuildingTypeInput[] | BuildingUncheckedCreateWithoutBuildingTypeInput[]
    connectOrCreate?: BuildingCreateOrConnectWithoutBuildingTypeInput | BuildingCreateOrConnectWithoutBuildingTypeInput[]
    upsert?: BuildingUpsertWithWhereUniqueWithoutBuildingTypeInput | BuildingUpsertWithWhereUniqueWithoutBuildingTypeInput[]
    createMany?: BuildingCreateManyBuildingTypeInputEnvelope
    set?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    disconnect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    delete?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    connect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    update?: BuildingUpdateWithWhereUniqueWithoutBuildingTypeInput | BuildingUpdateWithWhereUniqueWithoutBuildingTypeInput[]
    updateMany?: BuildingUpdateManyWithWhereWithoutBuildingTypeInput | BuildingUpdateManyWithWhereWithoutBuildingTypeInput[]
    deleteMany?: BuildingScalarWhereInput | BuildingScalarWhereInput[]
  }

  export type BuildingTypeCreateNestedOneWithoutI18nInput = {
    create?: XOR<BuildingTypeCreateWithoutI18nInput, BuildingTypeUncheckedCreateWithoutI18nInput>
    connectOrCreate?: BuildingTypeCreateOrConnectWithoutI18nInput
    connect?: BuildingTypeWhereUniqueInput
  }

  export type BuildingTypeUpdateOneRequiredWithoutI18nNestedInput = {
    create?: XOR<BuildingTypeCreateWithoutI18nInput, BuildingTypeUncheckedCreateWithoutI18nInput>
    connectOrCreate?: BuildingTypeCreateOrConnectWithoutI18nInput
    upsert?: BuildingTypeUpsertWithoutI18nInput
    connect?: BuildingTypeWhereUniqueInput
    update?: XOR<XOR<BuildingTypeUpdateToOneWithWhereWithoutI18nInput, BuildingTypeUpdateWithoutI18nInput>, BuildingTypeUncheckedUpdateWithoutI18nInput>
  }

  export type BuildingTypeCreateNestedOneWithoutBuildingsInput = {
    create?: XOR<BuildingTypeCreateWithoutBuildingsInput, BuildingTypeUncheckedCreateWithoutBuildingsInput>
    connectOrCreate?: BuildingTypeCreateOrConnectWithoutBuildingsInput
    connect?: BuildingTypeWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutBuildingsInput = {
    create?: XOR<LocationCreateWithoutBuildingsInput, LocationUncheckedCreateWithoutBuildingsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutBuildingsInput
    connect?: LocationWhereUniqueInput
  }

  export type BuildingI18nCreateNestedManyWithoutBuildingInput = {
    create?: XOR<BuildingI18nCreateWithoutBuildingInput, BuildingI18nUncheckedCreateWithoutBuildingInput> | BuildingI18nCreateWithoutBuildingInput[] | BuildingI18nUncheckedCreateWithoutBuildingInput[]
    connectOrCreate?: BuildingI18nCreateOrConnectWithoutBuildingInput | BuildingI18nCreateOrConnectWithoutBuildingInput[]
    createMany?: BuildingI18nCreateManyBuildingInputEnvelope
    connect?: BuildingI18nWhereUniqueInput | BuildingI18nWhereUniqueInput[]
  }

  export type StadiumInfoCreateNestedOneWithoutBuildingInput = {
    create?: XOR<StadiumInfoCreateWithoutBuildingInput, StadiumInfoUncheckedCreateWithoutBuildingInput>
    connectOrCreate?: StadiumInfoCreateOrConnectWithoutBuildingInput
    connect?: StadiumInfoWhereUniqueInput
  }

  export type BuildingI18nUncheckedCreateNestedManyWithoutBuildingInput = {
    create?: XOR<BuildingI18nCreateWithoutBuildingInput, BuildingI18nUncheckedCreateWithoutBuildingInput> | BuildingI18nCreateWithoutBuildingInput[] | BuildingI18nUncheckedCreateWithoutBuildingInput[]
    connectOrCreate?: BuildingI18nCreateOrConnectWithoutBuildingInput | BuildingI18nCreateOrConnectWithoutBuildingInput[]
    createMany?: BuildingI18nCreateManyBuildingInputEnvelope
    connect?: BuildingI18nWhereUniqueInput | BuildingI18nWhereUniqueInput[]
  }

  export type StadiumInfoUncheckedCreateNestedOneWithoutBuildingInput = {
    create?: XOR<StadiumInfoCreateWithoutBuildingInput, StadiumInfoUncheckedCreateWithoutBuildingInput>
    connectOrCreate?: StadiumInfoCreateOrConnectWithoutBuildingInput
    connect?: StadiumInfoWhereUniqueInput
  }

  export type BuildingTypeUpdateOneRequiredWithoutBuildingsNestedInput = {
    create?: XOR<BuildingTypeCreateWithoutBuildingsInput, BuildingTypeUncheckedCreateWithoutBuildingsInput>
    connectOrCreate?: BuildingTypeCreateOrConnectWithoutBuildingsInput
    upsert?: BuildingTypeUpsertWithoutBuildingsInput
    connect?: BuildingTypeWhereUniqueInput
    update?: XOR<XOR<BuildingTypeUpdateToOneWithWhereWithoutBuildingsInput, BuildingTypeUpdateWithoutBuildingsInput>, BuildingTypeUncheckedUpdateWithoutBuildingsInput>
  }

  export type LocationUpdateOneRequiredWithoutBuildingsNestedInput = {
    create?: XOR<LocationCreateWithoutBuildingsInput, LocationUncheckedCreateWithoutBuildingsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutBuildingsInput
    upsert?: LocationUpsertWithoutBuildingsInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutBuildingsInput, LocationUpdateWithoutBuildingsInput>, LocationUncheckedUpdateWithoutBuildingsInput>
  }

  export type BuildingI18nUpdateManyWithoutBuildingNestedInput = {
    create?: XOR<BuildingI18nCreateWithoutBuildingInput, BuildingI18nUncheckedCreateWithoutBuildingInput> | BuildingI18nCreateWithoutBuildingInput[] | BuildingI18nUncheckedCreateWithoutBuildingInput[]
    connectOrCreate?: BuildingI18nCreateOrConnectWithoutBuildingInput | BuildingI18nCreateOrConnectWithoutBuildingInput[]
    upsert?: BuildingI18nUpsertWithWhereUniqueWithoutBuildingInput | BuildingI18nUpsertWithWhereUniqueWithoutBuildingInput[]
    createMany?: BuildingI18nCreateManyBuildingInputEnvelope
    set?: BuildingI18nWhereUniqueInput | BuildingI18nWhereUniqueInput[]
    disconnect?: BuildingI18nWhereUniqueInput | BuildingI18nWhereUniqueInput[]
    delete?: BuildingI18nWhereUniqueInput | BuildingI18nWhereUniqueInput[]
    connect?: BuildingI18nWhereUniqueInput | BuildingI18nWhereUniqueInput[]
    update?: BuildingI18nUpdateWithWhereUniqueWithoutBuildingInput | BuildingI18nUpdateWithWhereUniqueWithoutBuildingInput[]
    updateMany?: BuildingI18nUpdateManyWithWhereWithoutBuildingInput | BuildingI18nUpdateManyWithWhereWithoutBuildingInput[]
    deleteMany?: BuildingI18nScalarWhereInput | BuildingI18nScalarWhereInput[]
  }

  export type StadiumInfoUpdateOneWithoutBuildingNestedInput = {
    create?: XOR<StadiumInfoCreateWithoutBuildingInput, StadiumInfoUncheckedCreateWithoutBuildingInput>
    connectOrCreate?: StadiumInfoCreateOrConnectWithoutBuildingInput
    upsert?: StadiumInfoUpsertWithoutBuildingInput
    disconnect?: StadiumInfoWhereInput | boolean
    delete?: StadiumInfoWhereInput | boolean
    connect?: StadiumInfoWhereUniqueInput
    update?: XOR<XOR<StadiumInfoUpdateToOneWithWhereWithoutBuildingInput, StadiumInfoUpdateWithoutBuildingInput>, StadiumInfoUncheckedUpdateWithoutBuildingInput>
  }

  export type BuildingI18nUncheckedUpdateManyWithoutBuildingNestedInput = {
    create?: XOR<BuildingI18nCreateWithoutBuildingInput, BuildingI18nUncheckedCreateWithoutBuildingInput> | BuildingI18nCreateWithoutBuildingInput[] | BuildingI18nUncheckedCreateWithoutBuildingInput[]
    connectOrCreate?: BuildingI18nCreateOrConnectWithoutBuildingInput | BuildingI18nCreateOrConnectWithoutBuildingInput[]
    upsert?: BuildingI18nUpsertWithWhereUniqueWithoutBuildingInput | BuildingI18nUpsertWithWhereUniqueWithoutBuildingInput[]
    createMany?: BuildingI18nCreateManyBuildingInputEnvelope
    set?: BuildingI18nWhereUniqueInput | BuildingI18nWhereUniqueInput[]
    disconnect?: BuildingI18nWhereUniqueInput | BuildingI18nWhereUniqueInput[]
    delete?: BuildingI18nWhereUniqueInput | BuildingI18nWhereUniqueInput[]
    connect?: BuildingI18nWhereUniqueInput | BuildingI18nWhereUniqueInput[]
    update?: BuildingI18nUpdateWithWhereUniqueWithoutBuildingInput | BuildingI18nUpdateWithWhereUniqueWithoutBuildingInput[]
    updateMany?: BuildingI18nUpdateManyWithWhereWithoutBuildingInput | BuildingI18nUpdateManyWithWhereWithoutBuildingInput[]
    deleteMany?: BuildingI18nScalarWhereInput | BuildingI18nScalarWhereInput[]
  }

  export type StadiumInfoUncheckedUpdateOneWithoutBuildingNestedInput = {
    create?: XOR<StadiumInfoCreateWithoutBuildingInput, StadiumInfoUncheckedCreateWithoutBuildingInput>
    connectOrCreate?: StadiumInfoCreateOrConnectWithoutBuildingInput
    upsert?: StadiumInfoUpsertWithoutBuildingInput
    disconnect?: StadiumInfoWhereInput | boolean
    delete?: StadiumInfoWhereInput | boolean
    connect?: StadiumInfoWhereUniqueInput
    update?: XOR<XOR<StadiumInfoUpdateToOneWithWhereWithoutBuildingInput, StadiumInfoUpdateWithoutBuildingInput>, StadiumInfoUncheckedUpdateWithoutBuildingInput>
  }

  export type BuildingCreateNestedOneWithoutI18nInput = {
    create?: XOR<BuildingCreateWithoutI18nInput, BuildingUncheckedCreateWithoutI18nInput>
    connectOrCreate?: BuildingCreateOrConnectWithoutI18nInput
    connect?: BuildingWhereUniqueInput
  }

  export type BuildingUpdateOneRequiredWithoutI18nNestedInput = {
    create?: XOR<BuildingCreateWithoutI18nInput, BuildingUncheckedCreateWithoutI18nInput>
    connectOrCreate?: BuildingCreateOrConnectWithoutI18nInput
    upsert?: BuildingUpsertWithoutI18nInput
    connect?: BuildingWhereUniqueInput
    update?: XOR<XOR<BuildingUpdateToOneWithWhereWithoutI18nInput, BuildingUpdateWithoutI18nInput>, BuildingUncheckedUpdateWithoutI18nInput>
  }

  export type BuildingCreateNestedOneWithoutStadiumInfoInput = {
    create?: XOR<BuildingCreateWithoutStadiumInfoInput, BuildingUncheckedCreateWithoutStadiumInfoInput>
    connectOrCreate?: BuildingCreateOrConnectWithoutStadiumInfoInput
    connect?: BuildingWhereUniqueInput
  }

  export type BuildingUpdateOneRequiredWithoutStadiumInfoNestedInput = {
    create?: XOR<BuildingCreateWithoutStadiumInfoInput, BuildingUncheckedCreateWithoutStadiumInfoInput>
    connectOrCreate?: BuildingCreateOrConnectWithoutStadiumInfoInput
    upsert?: BuildingUpsertWithoutStadiumInfoInput
    connect?: BuildingWhereUniqueInput
    update?: XOR<XOR<BuildingUpdateToOneWithWhereWithoutStadiumInfoInput, BuildingUpdateWithoutStadiumInfoInput>, BuildingUncheckedUpdateWithoutStadiumInfoInput>
  }

  export type RaceI18nCreateNestedManyWithoutRaceInput = {
    create?: XOR<RaceI18nCreateWithoutRaceInput, RaceI18nUncheckedCreateWithoutRaceInput> | RaceI18nCreateWithoutRaceInput[] | RaceI18nUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: RaceI18nCreateOrConnectWithoutRaceInput | RaceI18nCreateOrConnectWithoutRaceInput[]
    createMany?: RaceI18nCreateManyRaceInputEnvelope
    connect?: RaceI18nWhereUniqueInput | RaceI18nWhereUniqueInput[]
  }

  export type CultureCreateNestedManyWithoutRaceInput = {
    create?: XOR<CultureCreateWithoutRaceInput, CultureUncheckedCreateWithoutRaceInput> | CultureCreateWithoutRaceInput[] | CultureUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: CultureCreateOrConnectWithoutRaceInput | CultureCreateOrConnectWithoutRaceInput[]
    createMany?: CultureCreateManyRaceInputEnvelope
    connect?: CultureWhereUniqueInput | CultureWhereUniqueInput[]
  }

  export type PersonCreateNestedManyWithoutRaceInput = {
    create?: XOR<PersonCreateWithoutRaceInput, PersonUncheckedCreateWithoutRaceInput> | PersonCreateWithoutRaceInput[] | PersonUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutRaceInput | PersonCreateOrConnectWithoutRaceInput[]
    createMany?: PersonCreateManyRaceInputEnvelope
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
  }

  export type RaceI18nUncheckedCreateNestedManyWithoutRaceInput = {
    create?: XOR<RaceI18nCreateWithoutRaceInput, RaceI18nUncheckedCreateWithoutRaceInput> | RaceI18nCreateWithoutRaceInput[] | RaceI18nUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: RaceI18nCreateOrConnectWithoutRaceInput | RaceI18nCreateOrConnectWithoutRaceInput[]
    createMany?: RaceI18nCreateManyRaceInputEnvelope
    connect?: RaceI18nWhereUniqueInput | RaceI18nWhereUniqueInput[]
  }

  export type CultureUncheckedCreateNestedManyWithoutRaceInput = {
    create?: XOR<CultureCreateWithoutRaceInput, CultureUncheckedCreateWithoutRaceInput> | CultureCreateWithoutRaceInput[] | CultureUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: CultureCreateOrConnectWithoutRaceInput | CultureCreateOrConnectWithoutRaceInput[]
    createMany?: CultureCreateManyRaceInputEnvelope
    connect?: CultureWhereUniqueInput | CultureWhereUniqueInput[]
  }

  export type PersonUncheckedCreateNestedManyWithoutRaceInput = {
    create?: XOR<PersonCreateWithoutRaceInput, PersonUncheckedCreateWithoutRaceInput> | PersonCreateWithoutRaceInput[] | PersonUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutRaceInput | PersonCreateOrConnectWithoutRaceInput[]
    createMany?: PersonCreateManyRaceInputEnvelope
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
  }

  export type RaceI18nUpdateManyWithoutRaceNestedInput = {
    create?: XOR<RaceI18nCreateWithoutRaceInput, RaceI18nUncheckedCreateWithoutRaceInput> | RaceI18nCreateWithoutRaceInput[] | RaceI18nUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: RaceI18nCreateOrConnectWithoutRaceInput | RaceI18nCreateOrConnectWithoutRaceInput[]
    upsert?: RaceI18nUpsertWithWhereUniqueWithoutRaceInput | RaceI18nUpsertWithWhereUniqueWithoutRaceInput[]
    createMany?: RaceI18nCreateManyRaceInputEnvelope
    set?: RaceI18nWhereUniqueInput | RaceI18nWhereUniqueInput[]
    disconnect?: RaceI18nWhereUniqueInput | RaceI18nWhereUniqueInput[]
    delete?: RaceI18nWhereUniqueInput | RaceI18nWhereUniqueInput[]
    connect?: RaceI18nWhereUniqueInput | RaceI18nWhereUniqueInput[]
    update?: RaceI18nUpdateWithWhereUniqueWithoutRaceInput | RaceI18nUpdateWithWhereUniqueWithoutRaceInput[]
    updateMany?: RaceI18nUpdateManyWithWhereWithoutRaceInput | RaceI18nUpdateManyWithWhereWithoutRaceInput[]
    deleteMany?: RaceI18nScalarWhereInput | RaceI18nScalarWhereInput[]
  }

  export type CultureUpdateManyWithoutRaceNestedInput = {
    create?: XOR<CultureCreateWithoutRaceInput, CultureUncheckedCreateWithoutRaceInput> | CultureCreateWithoutRaceInput[] | CultureUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: CultureCreateOrConnectWithoutRaceInput | CultureCreateOrConnectWithoutRaceInput[]
    upsert?: CultureUpsertWithWhereUniqueWithoutRaceInput | CultureUpsertWithWhereUniqueWithoutRaceInput[]
    createMany?: CultureCreateManyRaceInputEnvelope
    set?: CultureWhereUniqueInput | CultureWhereUniqueInput[]
    disconnect?: CultureWhereUniqueInput | CultureWhereUniqueInput[]
    delete?: CultureWhereUniqueInput | CultureWhereUniqueInput[]
    connect?: CultureWhereUniqueInput | CultureWhereUniqueInput[]
    update?: CultureUpdateWithWhereUniqueWithoutRaceInput | CultureUpdateWithWhereUniqueWithoutRaceInput[]
    updateMany?: CultureUpdateManyWithWhereWithoutRaceInput | CultureUpdateManyWithWhereWithoutRaceInput[]
    deleteMany?: CultureScalarWhereInput | CultureScalarWhereInput[]
  }

  export type PersonUpdateManyWithoutRaceNestedInput = {
    create?: XOR<PersonCreateWithoutRaceInput, PersonUncheckedCreateWithoutRaceInput> | PersonCreateWithoutRaceInput[] | PersonUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutRaceInput | PersonCreateOrConnectWithoutRaceInput[]
    upsert?: PersonUpsertWithWhereUniqueWithoutRaceInput | PersonUpsertWithWhereUniqueWithoutRaceInput[]
    createMany?: PersonCreateManyRaceInputEnvelope
    set?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    disconnect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    delete?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    update?: PersonUpdateWithWhereUniqueWithoutRaceInput | PersonUpdateWithWhereUniqueWithoutRaceInput[]
    updateMany?: PersonUpdateManyWithWhereWithoutRaceInput | PersonUpdateManyWithWhereWithoutRaceInput[]
    deleteMany?: PersonScalarWhereInput | PersonScalarWhereInput[]
  }

  export type RaceI18nUncheckedUpdateManyWithoutRaceNestedInput = {
    create?: XOR<RaceI18nCreateWithoutRaceInput, RaceI18nUncheckedCreateWithoutRaceInput> | RaceI18nCreateWithoutRaceInput[] | RaceI18nUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: RaceI18nCreateOrConnectWithoutRaceInput | RaceI18nCreateOrConnectWithoutRaceInput[]
    upsert?: RaceI18nUpsertWithWhereUniqueWithoutRaceInput | RaceI18nUpsertWithWhereUniqueWithoutRaceInput[]
    createMany?: RaceI18nCreateManyRaceInputEnvelope
    set?: RaceI18nWhereUniqueInput | RaceI18nWhereUniqueInput[]
    disconnect?: RaceI18nWhereUniqueInput | RaceI18nWhereUniqueInput[]
    delete?: RaceI18nWhereUniqueInput | RaceI18nWhereUniqueInput[]
    connect?: RaceI18nWhereUniqueInput | RaceI18nWhereUniqueInput[]
    update?: RaceI18nUpdateWithWhereUniqueWithoutRaceInput | RaceI18nUpdateWithWhereUniqueWithoutRaceInput[]
    updateMany?: RaceI18nUpdateManyWithWhereWithoutRaceInput | RaceI18nUpdateManyWithWhereWithoutRaceInput[]
    deleteMany?: RaceI18nScalarWhereInput | RaceI18nScalarWhereInput[]
  }

  export type CultureUncheckedUpdateManyWithoutRaceNestedInput = {
    create?: XOR<CultureCreateWithoutRaceInput, CultureUncheckedCreateWithoutRaceInput> | CultureCreateWithoutRaceInput[] | CultureUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: CultureCreateOrConnectWithoutRaceInput | CultureCreateOrConnectWithoutRaceInput[]
    upsert?: CultureUpsertWithWhereUniqueWithoutRaceInput | CultureUpsertWithWhereUniqueWithoutRaceInput[]
    createMany?: CultureCreateManyRaceInputEnvelope
    set?: CultureWhereUniqueInput | CultureWhereUniqueInput[]
    disconnect?: CultureWhereUniqueInput | CultureWhereUniqueInput[]
    delete?: CultureWhereUniqueInput | CultureWhereUniqueInput[]
    connect?: CultureWhereUniqueInput | CultureWhereUniqueInput[]
    update?: CultureUpdateWithWhereUniqueWithoutRaceInput | CultureUpdateWithWhereUniqueWithoutRaceInput[]
    updateMany?: CultureUpdateManyWithWhereWithoutRaceInput | CultureUpdateManyWithWhereWithoutRaceInput[]
    deleteMany?: CultureScalarWhereInput | CultureScalarWhereInput[]
  }

  export type PersonUncheckedUpdateManyWithoutRaceNestedInput = {
    create?: XOR<PersonCreateWithoutRaceInput, PersonUncheckedCreateWithoutRaceInput> | PersonCreateWithoutRaceInput[] | PersonUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: PersonCreateOrConnectWithoutRaceInput | PersonCreateOrConnectWithoutRaceInput[]
    upsert?: PersonUpsertWithWhereUniqueWithoutRaceInput | PersonUpsertWithWhereUniqueWithoutRaceInput[]
    createMany?: PersonCreateManyRaceInputEnvelope
    set?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    disconnect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    delete?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    connect?: PersonWhereUniqueInput | PersonWhereUniqueInput[]
    update?: PersonUpdateWithWhereUniqueWithoutRaceInput | PersonUpdateWithWhereUniqueWithoutRaceInput[]
    updateMany?: PersonUpdateManyWithWhereWithoutRaceInput | PersonUpdateManyWithWhereWithoutRaceInput[]
    deleteMany?: PersonScalarWhereInput | PersonScalarWhereInput[]
  }

  export type RaceCreateNestedOneWithoutI18nInput = {
    create?: XOR<RaceCreateWithoutI18nInput, RaceUncheckedCreateWithoutI18nInput>
    connectOrCreate?: RaceCreateOrConnectWithoutI18nInput
    connect?: RaceWhereUniqueInput
  }

  export type RaceUpdateOneRequiredWithoutI18nNestedInput = {
    create?: XOR<RaceCreateWithoutI18nInput, RaceUncheckedCreateWithoutI18nInput>
    connectOrCreate?: RaceCreateOrConnectWithoutI18nInput
    upsert?: RaceUpsertWithoutI18nInput
    connect?: RaceWhereUniqueInput
    update?: XOR<XOR<RaceUpdateToOneWithWhereWithoutI18nInput, RaceUpdateWithoutI18nInput>, RaceUncheckedUpdateWithoutI18nInput>
  }

  export type RaceCreateNestedOneWithoutCulturesInput = {
    create?: XOR<RaceCreateWithoutCulturesInput, RaceUncheckedCreateWithoutCulturesInput>
    connectOrCreate?: RaceCreateOrConnectWithoutCulturesInput
    connect?: RaceWhereUniqueInput
  }

  export type CultureI18nCreateNestedManyWithoutCultureInput = {
    create?: XOR<CultureI18nCreateWithoutCultureInput, CultureI18nUncheckedCreateWithoutCultureInput> | CultureI18nCreateWithoutCultureInput[] | CultureI18nUncheckedCreateWithoutCultureInput[]
    connectOrCreate?: CultureI18nCreateOrConnectWithoutCultureInput | CultureI18nCreateOrConnectWithoutCultureInput[]
    createMany?: CultureI18nCreateManyCultureInputEnvelope
    connect?: CultureI18nWhereUniqueInput | CultureI18nWhereUniqueInput[]
  }

  export type NameModelCreateNestedManyWithoutCultureInput = {
    create?: XOR<NameModelCreateWithoutCultureInput, NameModelUncheckedCreateWithoutCultureInput> | NameModelCreateWithoutCultureInput[] | NameModelUncheckedCreateWithoutCultureInput[]
    connectOrCreate?: NameModelCreateOrConnectWithoutCultureInput | NameModelCreateOrConnectWithoutCultureInput[]
    createMany?: NameModelCreateManyCultureInputEnvelope
    connect?: NameModelWhereUniqueInput | NameModelWhereUniqueInput[]
  }

  export type RegionPopulationCreateNestedManyWithoutCultureInput = {
    create?: XOR<RegionPopulationCreateWithoutCultureInput, RegionPopulationUncheckedCreateWithoutCultureInput> | RegionPopulationCreateWithoutCultureInput[] | RegionPopulationUncheckedCreateWithoutCultureInput[]
    connectOrCreate?: RegionPopulationCreateOrConnectWithoutCultureInput | RegionPopulationCreateOrConnectWithoutCultureInput[]
    createMany?: RegionPopulationCreateManyCultureInputEnvelope
    connect?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
  }

  export type CultureI18nUncheckedCreateNestedManyWithoutCultureInput = {
    create?: XOR<CultureI18nCreateWithoutCultureInput, CultureI18nUncheckedCreateWithoutCultureInput> | CultureI18nCreateWithoutCultureInput[] | CultureI18nUncheckedCreateWithoutCultureInput[]
    connectOrCreate?: CultureI18nCreateOrConnectWithoutCultureInput | CultureI18nCreateOrConnectWithoutCultureInput[]
    createMany?: CultureI18nCreateManyCultureInputEnvelope
    connect?: CultureI18nWhereUniqueInput | CultureI18nWhereUniqueInput[]
  }

  export type NameModelUncheckedCreateNestedManyWithoutCultureInput = {
    create?: XOR<NameModelCreateWithoutCultureInput, NameModelUncheckedCreateWithoutCultureInput> | NameModelCreateWithoutCultureInput[] | NameModelUncheckedCreateWithoutCultureInput[]
    connectOrCreate?: NameModelCreateOrConnectWithoutCultureInput | NameModelCreateOrConnectWithoutCultureInput[]
    createMany?: NameModelCreateManyCultureInputEnvelope
    connect?: NameModelWhereUniqueInput | NameModelWhereUniqueInput[]
  }

  export type RegionPopulationUncheckedCreateNestedManyWithoutCultureInput = {
    create?: XOR<RegionPopulationCreateWithoutCultureInput, RegionPopulationUncheckedCreateWithoutCultureInput> | RegionPopulationCreateWithoutCultureInput[] | RegionPopulationUncheckedCreateWithoutCultureInput[]
    connectOrCreate?: RegionPopulationCreateOrConnectWithoutCultureInput | RegionPopulationCreateOrConnectWithoutCultureInput[]
    createMany?: RegionPopulationCreateManyCultureInputEnvelope
    connect?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
  }

  export type RaceUpdateOneRequiredWithoutCulturesNestedInput = {
    create?: XOR<RaceCreateWithoutCulturesInput, RaceUncheckedCreateWithoutCulturesInput>
    connectOrCreate?: RaceCreateOrConnectWithoutCulturesInput
    upsert?: RaceUpsertWithoutCulturesInput
    connect?: RaceWhereUniqueInput
    update?: XOR<XOR<RaceUpdateToOneWithWhereWithoutCulturesInput, RaceUpdateWithoutCulturesInput>, RaceUncheckedUpdateWithoutCulturesInput>
  }

  export type CultureI18nUpdateManyWithoutCultureNestedInput = {
    create?: XOR<CultureI18nCreateWithoutCultureInput, CultureI18nUncheckedCreateWithoutCultureInput> | CultureI18nCreateWithoutCultureInput[] | CultureI18nUncheckedCreateWithoutCultureInput[]
    connectOrCreate?: CultureI18nCreateOrConnectWithoutCultureInput | CultureI18nCreateOrConnectWithoutCultureInput[]
    upsert?: CultureI18nUpsertWithWhereUniqueWithoutCultureInput | CultureI18nUpsertWithWhereUniqueWithoutCultureInput[]
    createMany?: CultureI18nCreateManyCultureInputEnvelope
    set?: CultureI18nWhereUniqueInput | CultureI18nWhereUniqueInput[]
    disconnect?: CultureI18nWhereUniqueInput | CultureI18nWhereUniqueInput[]
    delete?: CultureI18nWhereUniqueInput | CultureI18nWhereUniqueInput[]
    connect?: CultureI18nWhereUniqueInput | CultureI18nWhereUniqueInput[]
    update?: CultureI18nUpdateWithWhereUniqueWithoutCultureInput | CultureI18nUpdateWithWhereUniqueWithoutCultureInput[]
    updateMany?: CultureI18nUpdateManyWithWhereWithoutCultureInput | CultureI18nUpdateManyWithWhereWithoutCultureInput[]
    deleteMany?: CultureI18nScalarWhereInput | CultureI18nScalarWhereInput[]
  }

  export type NameModelUpdateManyWithoutCultureNestedInput = {
    create?: XOR<NameModelCreateWithoutCultureInput, NameModelUncheckedCreateWithoutCultureInput> | NameModelCreateWithoutCultureInput[] | NameModelUncheckedCreateWithoutCultureInput[]
    connectOrCreate?: NameModelCreateOrConnectWithoutCultureInput | NameModelCreateOrConnectWithoutCultureInput[]
    upsert?: NameModelUpsertWithWhereUniqueWithoutCultureInput | NameModelUpsertWithWhereUniqueWithoutCultureInput[]
    createMany?: NameModelCreateManyCultureInputEnvelope
    set?: NameModelWhereUniqueInput | NameModelWhereUniqueInput[]
    disconnect?: NameModelWhereUniqueInput | NameModelWhereUniqueInput[]
    delete?: NameModelWhereUniqueInput | NameModelWhereUniqueInput[]
    connect?: NameModelWhereUniqueInput | NameModelWhereUniqueInput[]
    update?: NameModelUpdateWithWhereUniqueWithoutCultureInput | NameModelUpdateWithWhereUniqueWithoutCultureInput[]
    updateMany?: NameModelUpdateManyWithWhereWithoutCultureInput | NameModelUpdateManyWithWhereWithoutCultureInput[]
    deleteMany?: NameModelScalarWhereInput | NameModelScalarWhereInput[]
  }

  export type RegionPopulationUpdateManyWithoutCultureNestedInput = {
    create?: XOR<RegionPopulationCreateWithoutCultureInput, RegionPopulationUncheckedCreateWithoutCultureInput> | RegionPopulationCreateWithoutCultureInput[] | RegionPopulationUncheckedCreateWithoutCultureInput[]
    connectOrCreate?: RegionPopulationCreateOrConnectWithoutCultureInput | RegionPopulationCreateOrConnectWithoutCultureInput[]
    upsert?: RegionPopulationUpsertWithWhereUniqueWithoutCultureInput | RegionPopulationUpsertWithWhereUniqueWithoutCultureInput[]
    createMany?: RegionPopulationCreateManyCultureInputEnvelope
    set?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    disconnect?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    delete?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    connect?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    update?: RegionPopulationUpdateWithWhereUniqueWithoutCultureInput | RegionPopulationUpdateWithWhereUniqueWithoutCultureInput[]
    updateMany?: RegionPopulationUpdateManyWithWhereWithoutCultureInput | RegionPopulationUpdateManyWithWhereWithoutCultureInput[]
    deleteMany?: RegionPopulationScalarWhereInput | RegionPopulationScalarWhereInput[]
  }

  export type CultureI18nUncheckedUpdateManyWithoutCultureNestedInput = {
    create?: XOR<CultureI18nCreateWithoutCultureInput, CultureI18nUncheckedCreateWithoutCultureInput> | CultureI18nCreateWithoutCultureInput[] | CultureI18nUncheckedCreateWithoutCultureInput[]
    connectOrCreate?: CultureI18nCreateOrConnectWithoutCultureInput | CultureI18nCreateOrConnectWithoutCultureInput[]
    upsert?: CultureI18nUpsertWithWhereUniqueWithoutCultureInput | CultureI18nUpsertWithWhereUniqueWithoutCultureInput[]
    createMany?: CultureI18nCreateManyCultureInputEnvelope
    set?: CultureI18nWhereUniqueInput | CultureI18nWhereUniqueInput[]
    disconnect?: CultureI18nWhereUniqueInput | CultureI18nWhereUniqueInput[]
    delete?: CultureI18nWhereUniqueInput | CultureI18nWhereUniqueInput[]
    connect?: CultureI18nWhereUniqueInput | CultureI18nWhereUniqueInput[]
    update?: CultureI18nUpdateWithWhereUniqueWithoutCultureInput | CultureI18nUpdateWithWhereUniqueWithoutCultureInput[]
    updateMany?: CultureI18nUpdateManyWithWhereWithoutCultureInput | CultureI18nUpdateManyWithWhereWithoutCultureInput[]
    deleteMany?: CultureI18nScalarWhereInput | CultureI18nScalarWhereInput[]
  }

  export type NameModelUncheckedUpdateManyWithoutCultureNestedInput = {
    create?: XOR<NameModelCreateWithoutCultureInput, NameModelUncheckedCreateWithoutCultureInput> | NameModelCreateWithoutCultureInput[] | NameModelUncheckedCreateWithoutCultureInput[]
    connectOrCreate?: NameModelCreateOrConnectWithoutCultureInput | NameModelCreateOrConnectWithoutCultureInput[]
    upsert?: NameModelUpsertWithWhereUniqueWithoutCultureInput | NameModelUpsertWithWhereUniqueWithoutCultureInput[]
    createMany?: NameModelCreateManyCultureInputEnvelope
    set?: NameModelWhereUniqueInput | NameModelWhereUniqueInput[]
    disconnect?: NameModelWhereUniqueInput | NameModelWhereUniqueInput[]
    delete?: NameModelWhereUniqueInput | NameModelWhereUniqueInput[]
    connect?: NameModelWhereUniqueInput | NameModelWhereUniqueInput[]
    update?: NameModelUpdateWithWhereUniqueWithoutCultureInput | NameModelUpdateWithWhereUniqueWithoutCultureInput[]
    updateMany?: NameModelUpdateManyWithWhereWithoutCultureInput | NameModelUpdateManyWithWhereWithoutCultureInput[]
    deleteMany?: NameModelScalarWhereInput | NameModelScalarWhereInput[]
  }

  export type RegionPopulationUncheckedUpdateManyWithoutCultureNestedInput = {
    create?: XOR<RegionPopulationCreateWithoutCultureInput, RegionPopulationUncheckedCreateWithoutCultureInput> | RegionPopulationCreateWithoutCultureInput[] | RegionPopulationUncheckedCreateWithoutCultureInput[]
    connectOrCreate?: RegionPopulationCreateOrConnectWithoutCultureInput | RegionPopulationCreateOrConnectWithoutCultureInput[]
    upsert?: RegionPopulationUpsertWithWhereUniqueWithoutCultureInput | RegionPopulationUpsertWithWhereUniqueWithoutCultureInput[]
    createMany?: RegionPopulationCreateManyCultureInputEnvelope
    set?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    disconnect?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    delete?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    connect?: RegionPopulationWhereUniqueInput | RegionPopulationWhereUniqueInput[]
    update?: RegionPopulationUpdateWithWhereUniqueWithoutCultureInput | RegionPopulationUpdateWithWhereUniqueWithoutCultureInput[]
    updateMany?: RegionPopulationUpdateManyWithWhereWithoutCultureInput | RegionPopulationUpdateManyWithWhereWithoutCultureInput[]
    deleteMany?: RegionPopulationScalarWhereInput | RegionPopulationScalarWhereInput[]
  }

  export type CultureCreateNestedOneWithoutI18nInput = {
    create?: XOR<CultureCreateWithoutI18nInput, CultureUncheckedCreateWithoutI18nInput>
    connectOrCreate?: CultureCreateOrConnectWithoutI18nInput
    connect?: CultureWhereUniqueInput
  }

  export type CultureUpdateOneRequiredWithoutI18nNestedInput = {
    create?: XOR<CultureCreateWithoutI18nInput, CultureUncheckedCreateWithoutI18nInput>
    connectOrCreate?: CultureCreateOrConnectWithoutI18nInput
    upsert?: CultureUpsertWithoutI18nInput
    connect?: CultureWhereUniqueInput
    update?: XOR<XOR<CultureUpdateToOneWithWhereWithoutI18nInput, CultureUpdateWithoutI18nInput>, CultureUncheckedUpdateWithoutI18nInput>
  }

  export type RegionCreateNestedOneWithoutRegionPopulationsInput = {
    create?: XOR<RegionCreateWithoutRegionPopulationsInput, RegionUncheckedCreateWithoutRegionPopulationsInput>
    connectOrCreate?: RegionCreateOrConnectWithoutRegionPopulationsInput
    connect?: RegionWhereUniqueInput
  }

  export type CultureCreateNestedOneWithoutRegionPopulationsInput = {
    create?: XOR<CultureCreateWithoutRegionPopulationsInput, CultureUncheckedCreateWithoutRegionPopulationsInput>
    connectOrCreate?: CultureCreateOrConnectWithoutRegionPopulationsInput
    connect?: CultureWhereUniqueInput
  }

  export type RegionUpdateOneRequiredWithoutRegionPopulationsNestedInput = {
    create?: XOR<RegionCreateWithoutRegionPopulationsInput, RegionUncheckedCreateWithoutRegionPopulationsInput>
    connectOrCreate?: RegionCreateOrConnectWithoutRegionPopulationsInput
    upsert?: RegionUpsertWithoutRegionPopulationsInput
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutRegionPopulationsInput, RegionUpdateWithoutRegionPopulationsInput>, RegionUncheckedUpdateWithoutRegionPopulationsInput>
  }

  export type CultureUpdateOneRequiredWithoutRegionPopulationsNestedInput = {
    create?: XOR<CultureCreateWithoutRegionPopulationsInput, CultureUncheckedCreateWithoutRegionPopulationsInput>
    connectOrCreate?: CultureCreateOrConnectWithoutRegionPopulationsInput
    upsert?: CultureUpsertWithoutRegionPopulationsInput
    connect?: CultureWhereUniqueInput
    update?: XOR<XOR<CultureUpdateToOneWithWhereWithoutRegionPopulationsInput, CultureUpdateWithoutRegionPopulationsInput>, CultureUncheckedUpdateWithoutRegionPopulationsInput>
  }

  export type CultureCreateNestedOneWithoutNameModelsInput = {
    create?: XOR<CultureCreateWithoutNameModelsInput, CultureUncheckedCreateWithoutNameModelsInput>
    connectOrCreate?: CultureCreateOrConnectWithoutNameModelsInput
    connect?: CultureWhereUniqueInput
  }

  export type EnumSexTypeFieldUpdateOperationsInput = {
    set?: $Enums.SexType
  }

  export type CultureUpdateOneRequiredWithoutNameModelsNestedInput = {
    create?: XOR<CultureCreateWithoutNameModelsInput, CultureUncheckedCreateWithoutNameModelsInput>
    connectOrCreate?: CultureCreateOrConnectWithoutNameModelsInput
    upsert?: CultureUpsertWithoutNameModelsInput
    connect?: CultureWhereUniqueInput
    update?: XOR<XOR<CultureUpdateToOneWithWhereWithoutNameModelsInput, CultureUpdateWithoutNameModelsInput>, CultureUncheckedUpdateWithoutNameModelsInput>
  }

  export type NameComponentValueCreateNestedManyWithoutKeyInput = {
    create?: XOR<NameComponentValueCreateWithoutKeyInput, NameComponentValueUncheckedCreateWithoutKeyInput> | NameComponentValueCreateWithoutKeyInput[] | NameComponentValueUncheckedCreateWithoutKeyInput[]
    connectOrCreate?: NameComponentValueCreateOrConnectWithoutKeyInput | NameComponentValueCreateOrConnectWithoutKeyInput[]
    createMany?: NameComponentValueCreateManyKeyInputEnvelope
    connect?: NameComponentValueWhereUniqueInput | NameComponentValueWhereUniqueInput[]
  }

  export type NameComponentValueUncheckedCreateNestedManyWithoutKeyInput = {
    create?: XOR<NameComponentValueCreateWithoutKeyInput, NameComponentValueUncheckedCreateWithoutKeyInput> | NameComponentValueCreateWithoutKeyInput[] | NameComponentValueUncheckedCreateWithoutKeyInput[]
    connectOrCreate?: NameComponentValueCreateOrConnectWithoutKeyInput | NameComponentValueCreateOrConnectWithoutKeyInput[]
    createMany?: NameComponentValueCreateManyKeyInputEnvelope
    connect?: NameComponentValueWhereUniqueInput | NameComponentValueWhereUniqueInput[]
  }

  export type NameComponentValueUpdateManyWithoutKeyNestedInput = {
    create?: XOR<NameComponentValueCreateWithoutKeyInput, NameComponentValueUncheckedCreateWithoutKeyInput> | NameComponentValueCreateWithoutKeyInput[] | NameComponentValueUncheckedCreateWithoutKeyInput[]
    connectOrCreate?: NameComponentValueCreateOrConnectWithoutKeyInput | NameComponentValueCreateOrConnectWithoutKeyInput[]
    upsert?: NameComponentValueUpsertWithWhereUniqueWithoutKeyInput | NameComponentValueUpsertWithWhereUniqueWithoutKeyInput[]
    createMany?: NameComponentValueCreateManyKeyInputEnvelope
    set?: NameComponentValueWhereUniqueInput | NameComponentValueWhereUniqueInput[]
    disconnect?: NameComponentValueWhereUniqueInput | NameComponentValueWhereUniqueInput[]
    delete?: NameComponentValueWhereUniqueInput | NameComponentValueWhereUniqueInput[]
    connect?: NameComponentValueWhereUniqueInput | NameComponentValueWhereUniqueInput[]
    update?: NameComponentValueUpdateWithWhereUniqueWithoutKeyInput | NameComponentValueUpdateWithWhereUniqueWithoutKeyInput[]
    updateMany?: NameComponentValueUpdateManyWithWhereWithoutKeyInput | NameComponentValueUpdateManyWithWhereWithoutKeyInput[]
    deleteMany?: NameComponentValueScalarWhereInput | NameComponentValueScalarWhereInput[]
  }

  export type NameComponentValueUncheckedUpdateManyWithoutKeyNestedInput = {
    create?: XOR<NameComponentValueCreateWithoutKeyInput, NameComponentValueUncheckedCreateWithoutKeyInput> | NameComponentValueCreateWithoutKeyInput[] | NameComponentValueUncheckedCreateWithoutKeyInput[]
    connectOrCreate?: NameComponentValueCreateOrConnectWithoutKeyInput | NameComponentValueCreateOrConnectWithoutKeyInput[]
    upsert?: NameComponentValueUpsertWithWhereUniqueWithoutKeyInput | NameComponentValueUpsertWithWhereUniqueWithoutKeyInput[]
    createMany?: NameComponentValueCreateManyKeyInputEnvelope
    set?: NameComponentValueWhereUniqueInput | NameComponentValueWhereUniqueInput[]
    disconnect?: NameComponentValueWhereUniqueInput | NameComponentValueWhereUniqueInput[]
    delete?: NameComponentValueWhereUniqueInput | NameComponentValueWhereUniqueInput[]
    connect?: NameComponentValueWhereUniqueInput | NameComponentValueWhereUniqueInput[]
    update?: NameComponentValueUpdateWithWhereUniqueWithoutKeyInput | NameComponentValueUpdateWithWhereUniqueWithoutKeyInput[]
    updateMany?: NameComponentValueUpdateManyWithWhereWithoutKeyInput | NameComponentValueUpdateManyWithWhereWithoutKeyInput[]
    deleteMany?: NameComponentValueScalarWhereInput | NameComponentValueScalarWhereInput[]
  }

  export type NameComponentKeyCreateNestedOneWithoutValuesInput = {
    create?: XOR<NameComponentKeyCreateWithoutValuesInput, NameComponentKeyUncheckedCreateWithoutValuesInput>
    connectOrCreate?: NameComponentKeyCreateOrConnectWithoutValuesInput
    connect?: NameComponentKeyWhereUniqueInput
  }

  export type NameComponentKeyUpdateOneRequiredWithoutValuesNestedInput = {
    create?: XOR<NameComponentKeyCreateWithoutValuesInput, NameComponentKeyUncheckedCreateWithoutValuesInput>
    connectOrCreate?: NameComponentKeyCreateOrConnectWithoutValuesInput
    upsert?: NameComponentKeyUpsertWithoutValuesInput
    connect?: NameComponentKeyWhereUniqueInput
    update?: XOR<XOR<NameComponentKeyUpdateToOneWithWhereWithoutValuesInput, NameComponentKeyUpdateWithoutValuesInput>, NameComponentKeyUncheckedUpdateWithoutValuesInput>
  }

  export type RaceCreateNestedOneWithoutPersonsInput = {
    create?: XOR<RaceCreateWithoutPersonsInput, RaceUncheckedCreateWithoutPersonsInput>
    connectOrCreate?: RaceCreateOrConnectWithoutPersonsInput
    connect?: RaceWhereUniqueInput
  }

  export type PlayerCharacteristicsCreateNestedOneWithoutPlayerInput = {
    create?: XOR<PlayerCharacteristicsCreateWithoutPlayerInput, PlayerCharacteristicsUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: PlayerCharacteristicsCreateOrConnectWithoutPlayerInput
    connect?: PlayerCharacteristicsWhereUniqueInput
  }

  export type PersonContractCreateNestedManyWithoutPersonInput = {
    create?: XOR<PersonContractCreateWithoutPersonInput, PersonContractUncheckedCreateWithoutPersonInput> | PersonContractCreateWithoutPersonInput[] | PersonContractUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: PersonContractCreateOrConnectWithoutPersonInput | PersonContractCreateOrConnectWithoutPersonInput[]
    createMany?: PersonContractCreateManyPersonInputEnvelope
    connect?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
  }

  export type PlayerCharacteristicsUncheckedCreateNestedOneWithoutPlayerInput = {
    create?: XOR<PlayerCharacteristicsCreateWithoutPlayerInput, PlayerCharacteristicsUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: PlayerCharacteristicsCreateOrConnectWithoutPlayerInput
    connect?: PlayerCharacteristicsWhereUniqueInput
  }

  export type PersonContractUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<PersonContractCreateWithoutPersonInput, PersonContractUncheckedCreateWithoutPersonInput> | PersonContractCreateWithoutPersonInput[] | PersonContractUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: PersonContractCreateOrConnectWithoutPersonInput | PersonContractCreateOrConnectWithoutPersonInput[]
    createMany?: PersonContractCreateManyPersonInputEnvelope
    connect?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
  }

  export type RaceUpdateOneRequiredWithoutPersonsNestedInput = {
    create?: XOR<RaceCreateWithoutPersonsInput, RaceUncheckedCreateWithoutPersonsInput>
    connectOrCreate?: RaceCreateOrConnectWithoutPersonsInput
    upsert?: RaceUpsertWithoutPersonsInput
    connect?: RaceWhereUniqueInput
    update?: XOR<XOR<RaceUpdateToOneWithWhereWithoutPersonsInput, RaceUpdateWithoutPersonsInput>, RaceUncheckedUpdateWithoutPersonsInput>
  }

  export type PlayerCharacteristicsUpdateOneWithoutPlayerNestedInput = {
    create?: XOR<PlayerCharacteristicsCreateWithoutPlayerInput, PlayerCharacteristicsUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: PlayerCharacteristicsCreateOrConnectWithoutPlayerInput
    upsert?: PlayerCharacteristicsUpsertWithoutPlayerInput
    disconnect?: PlayerCharacteristicsWhereInput | boolean
    delete?: PlayerCharacteristicsWhereInput | boolean
    connect?: PlayerCharacteristicsWhereUniqueInput
    update?: XOR<XOR<PlayerCharacteristicsUpdateToOneWithWhereWithoutPlayerInput, PlayerCharacteristicsUpdateWithoutPlayerInput>, PlayerCharacteristicsUncheckedUpdateWithoutPlayerInput>
  }

  export type PersonContractUpdateManyWithoutPersonNestedInput = {
    create?: XOR<PersonContractCreateWithoutPersonInput, PersonContractUncheckedCreateWithoutPersonInput> | PersonContractCreateWithoutPersonInput[] | PersonContractUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: PersonContractCreateOrConnectWithoutPersonInput | PersonContractCreateOrConnectWithoutPersonInput[]
    upsert?: PersonContractUpsertWithWhereUniqueWithoutPersonInput | PersonContractUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: PersonContractCreateManyPersonInputEnvelope
    set?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    disconnect?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    delete?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    connect?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    update?: PersonContractUpdateWithWhereUniqueWithoutPersonInput | PersonContractUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: PersonContractUpdateManyWithWhereWithoutPersonInput | PersonContractUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: PersonContractScalarWhereInput | PersonContractScalarWhereInput[]
  }

  export type PlayerCharacteristicsUncheckedUpdateOneWithoutPlayerNestedInput = {
    create?: XOR<PlayerCharacteristicsCreateWithoutPlayerInput, PlayerCharacteristicsUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: PlayerCharacteristicsCreateOrConnectWithoutPlayerInput
    upsert?: PlayerCharacteristicsUpsertWithoutPlayerInput
    disconnect?: PlayerCharacteristicsWhereInput | boolean
    delete?: PlayerCharacteristicsWhereInput | boolean
    connect?: PlayerCharacteristicsWhereUniqueInput
    update?: XOR<XOR<PlayerCharacteristicsUpdateToOneWithWhereWithoutPlayerInput, PlayerCharacteristicsUpdateWithoutPlayerInput>, PlayerCharacteristicsUncheckedUpdateWithoutPlayerInput>
  }

  export type PersonContractUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<PersonContractCreateWithoutPersonInput, PersonContractUncheckedCreateWithoutPersonInput> | PersonContractCreateWithoutPersonInput[] | PersonContractUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: PersonContractCreateOrConnectWithoutPersonInput | PersonContractCreateOrConnectWithoutPersonInput[]
    upsert?: PersonContractUpsertWithWhereUniqueWithoutPersonInput | PersonContractUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: PersonContractCreateManyPersonInputEnvelope
    set?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    disconnect?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    delete?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    connect?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    update?: PersonContractUpdateWithWhereUniqueWithoutPersonInput | PersonContractUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: PersonContractUpdateManyWithWhereWithoutPersonInput | PersonContractUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: PersonContractScalarWhereInput | PersonContractScalarWhereInput[]
  }

  export type PersonCreateNestedOneWithoutPlayercharacteristicsInput = {
    create?: XOR<PersonCreateWithoutPlayercharacteristicsInput, PersonUncheckedCreateWithoutPlayercharacteristicsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutPlayercharacteristicsInput
    connect?: PersonWhereUniqueInput
  }

  export type PersonUpdateOneRequiredWithoutPlayercharacteristicsNestedInput = {
    create?: XOR<PersonCreateWithoutPlayercharacteristicsInput, PersonUncheckedCreateWithoutPlayercharacteristicsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutPlayercharacteristicsInput
    upsert?: PersonUpsertWithoutPlayercharacteristicsInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutPlayercharacteristicsInput, PersonUpdateWithoutPlayercharacteristicsInput>, PersonUncheckedUpdateWithoutPlayercharacteristicsInput>
  }

  export type UserCreateNestedOneWithoutTeamsInput = {
    create?: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamsInput
    connect?: UserWhereUniqueInput
  }

  export type TeamLocationCreateNestedOneWithoutTeamInput = {
    create?: XOR<TeamLocationCreateWithoutTeamInput, TeamLocationUncheckedCreateWithoutTeamInput>
    connectOrCreate?: TeamLocationCreateOrConnectWithoutTeamInput
    connect?: TeamLocationWhereUniqueInput
  }

  export type PersonContractCreateNestedManyWithoutTeamInput = {
    create?: XOR<PersonContractCreateWithoutTeamInput, PersonContractUncheckedCreateWithoutTeamInput> | PersonContractCreateWithoutTeamInput[] | PersonContractUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PersonContractCreateOrConnectWithoutTeamInput | PersonContractCreateOrConnectWithoutTeamInput[]
    createMany?: PersonContractCreateManyTeamInputEnvelope
    connect?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
  }

  export type TeamLocationUncheckedCreateNestedOneWithoutTeamInput = {
    create?: XOR<TeamLocationCreateWithoutTeamInput, TeamLocationUncheckedCreateWithoutTeamInput>
    connectOrCreate?: TeamLocationCreateOrConnectWithoutTeamInput
    connect?: TeamLocationWhereUniqueInput
  }

  export type PersonContractUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<PersonContractCreateWithoutTeamInput, PersonContractUncheckedCreateWithoutTeamInput> | PersonContractCreateWithoutTeamInput[] | PersonContractUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PersonContractCreateOrConnectWithoutTeamInput | PersonContractCreateOrConnectWithoutTeamInput[]
    createMany?: PersonContractCreateManyTeamInputEnvelope
    connect?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutTeamsNestedInput = {
    create?: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamsInput
    upsert?: UserUpsertWithoutTeamsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamsInput, UserUpdateWithoutTeamsInput>, UserUncheckedUpdateWithoutTeamsInput>
  }

  export type TeamLocationUpdateOneWithoutTeamNestedInput = {
    create?: XOR<TeamLocationCreateWithoutTeamInput, TeamLocationUncheckedCreateWithoutTeamInput>
    connectOrCreate?: TeamLocationCreateOrConnectWithoutTeamInput
    upsert?: TeamLocationUpsertWithoutTeamInput
    disconnect?: TeamLocationWhereInput | boolean
    delete?: TeamLocationWhereInput | boolean
    connect?: TeamLocationWhereUniqueInput
    update?: XOR<XOR<TeamLocationUpdateToOneWithWhereWithoutTeamInput, TeamLocationUpdateWithoutTeamInput>, TeamLocationUncheckedUpdateWithoutTeamInput>
  }

  export type PersonContractUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PersonContractCreateWithoutTeamInput, PersonContractUncheckedCreateWithoutTeamInput> | PersonContractCreateWithoutTeamInput[] | PersonContractUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PersonContractCreateOrConnectWithoutTeamInput | PersonContractCreateOrConnectWithoutTeamInput[]
    upsert?: PersonContractUpsertWithWhereUniqueWithoutTeamInput | PersonContractUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PersonContractCreateManyTeamInputEnvelope
    set?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    disconnect?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    delete?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    connect?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    update?: PersonContractUpdateWithWhereUniqueWithoutTeamInput | PersonContractUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PersonContractUpdateManyWithWhereWithoutTeamInput | PersonContractUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PersonContractScalarWhereInput | PersonContractScalarWhereInput[]
  }

  export type TeamLocationUncheckedUpdateOneWithoutTeamNestedInput = {
    create?: XOR<TeamLocationCreateWithoutTeamInput, TeamLocationUncheckedCreateWithoutTeamInput>
    connectOrCreate?: TeamLocationCreateOrConnectWithoutTeamInput
    upsert?: TeamLocationUpsertWithoutTeamInput
    disconnect?: TeamLocationWhereInput | boolean
    delete?: TeamLocationWhereInput | boolean
    connect?: TeamLocationWhereUniqueInput
    update?: XOR<XOR<TeamLocationUpdateToOneWithWhereWithoutTeamInput, TeamLocationUpdateWithoutTeamInput>, TeamLocationUncheckedUpdateWithoutTeamInput>
  }

  export type PersonContractUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PersonContractCreateWithoutTeamInput, PersonContractUncheckedCreateWithoutTeamInput> | PersonContractCreateWithoutTeamInput[] | PersonContractUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PersonContractCreateOrConnectWithoutTeamInput | PersonContractCreateOrConnectWithoutTeamInput[]
    upsert?: PersonContractUpsertWithWhereUniqueWithoutTeamInput | PersonContractUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PersonContractCreateManyTeamInputEnvelope
    set?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    disconnect?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    delete?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    connect?: PersonContractWhereUniqueInput | PersonContractWhereUniqueInput[]
    update?: PersonContractUpdateWithWhereUniqueWithoutTeamInput | PersonContractUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PersonContractUpdateManyWithWhereWithoutTeamInput | PersonContractUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PersonContractScalarWhereInput | PersonContractScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutTeamLocationInput = {
    create?: XOR<TeamCreateWithoutTeamLocationInput, TeamUncheckedCreateWithoutTeamLocationInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamLocationInput
    connect?: TeamWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutTeamsInput = {
    create?: XOR<LocationCreateWithoutTeamsInput, LocationUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutTeamsInput
    connect?: LocationWhereUniqueInput
  }

  export type TeamUpdateOneRequiredWithoutTeamLocationNestedInput = {
    create?: XOR<TeamCreateWithoutTeamLocationInput, TeamUncheckedCreateWithoutTeamLocationInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamLocationInput
    upsert?: TeamUpsertWithoutTeamLocationInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutTeamLocationInput, TeamUpdateWithoutTeamLocationInput>, TeamUncheckedUpdateWithoutTeamLocationInput>
  }

  export type LocationUpdateOneRequiredWithoutTeamsNestedInput = {
    create?: XOR<LocationCreateWithoutTeamsInput, LocationUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutTeamsInput
    upsert?: LocationUpsertWithoutTeamsInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutTeamsInput, LocationUpdateWithoutTeamsInput>, LocationUncheckedUpdateWithoutTeamsInput>
  }

  export type PersonCreateNestedOneWithoutPersonContractInput = {
    create?: XOR<PersonCreateWithoutPersonContractInput, PersonUncheckedCreateWithoutPersonContractInput>
    connectOrCreate?: PersonCreateOrConnectWithoutPersonContractInput
    connect?: PersonWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutPersonContractInput = {
    create?: XOR<TeamCreateWithoutPersonContractInput, TeamUncheckedCreateWithoutPersonContractInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPersonContractInput
    connect?: TeamWhereUniqueInput
  }

  export type EnumContractTypeFieldUpdateOperationsInput = {
    set?: $Enums.ContractType
  }

  export type PersonUpdateOneRequiredWithoutPersonContractNestedInput = {
    create?: XOR<PersonCreateWithoutPersonContractInput, PersonUncheckedCreateWithoutPersonContractInput>
    connectOrCreate?: PersonCreateOrConnectWithoutPersonContractInput
    upsert?: PersonUpsertWithoutPersonContractInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutPersonContractInput, PersonUpdateWithoutPersonContractInput>, PersonUncheckedUpdateWithoutPersonContractInput>
  }

  export type TeamUpdateOneRequiredWithoutPersonContractNestedInput = {
    create?: XOR<TeamCreateWithoutPersonContractInput, TeamUncheckedCreateWithoutPersonContractInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPersonContractInput
    upsert?: TeamUpsertWithoutPersonContractInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutPersonContractInput, TeamUpdateWithoutPersonContractInput>, TeamUncheckedUpdateWithoutPersonContractInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumLocationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LocationType | EnumLocationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LocationType[] | ListEnumLocationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LocationType[] | ListEnumLocationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLocationTypeFilter<$PrismaModel> | $Enums.LocationType
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumLocationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LocationType | EnumLocationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LocationType[] | ListEnumLocationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LocationType[] | ListEnumLocationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLocationTypeWithAggregatesFilter<$PrismaModel> | $Enums.LocationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLocationTypeFilter<$PrismaModel>
    _max?: NestedEnumLocationTypeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumRouteTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RouteType | EnumRouteTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RouteType[] | ListEnumRouteTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RouteType[] | ListEnumRouteTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRouteTypeFilter<$PrismaModel> | $Enums.RouteType
  }

  export type NestedEnumRouteTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RouteType | EnumRouteTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RouteType[] | ListEnumRouteTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RouteType[] | ListEnumRouteTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRouteTypeWithAggregatesFilter<$PrismaModel> | $Enums.RouteType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRouteTypeFilter<$PrismaModel>
    _max?: NestedEnumRouteTypeFilter<$PrismaModel>
  }

  export type NestedEnumSexTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SexType | EnumSexTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SexType[] | ListEnumSexTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SexType[] | ListEnumSexTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSexTypeFilter<$PrismaModel> | $Enums.SexType
  }

  export type NestedEnumSexTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SexType | EnumSexTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SexType[] | ListEnumSexTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SexType[] | ListEnumSexTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSexTypeWithAggregatesFilter<$PrismaModel> | $Enums.SexType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSexTypeFilter<$PrismaModel>
    _max?: NestedEnumSexTypeFilter<$PrismaModel>
  }

  export type NestedEnumContractTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContractTypeFilter<$PrismaModel> | $Enums.ContractType
  }

  export type NestedEnumContractTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContractTypeWithAggregatesFilter<$PrismaModel> | $Enums.ContractType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractTypeFilter<$PrismaModel>
    _max?: NestedEnumContractTypeFilter<$PrismaModel>
  }

  export type SessionCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TeamCreateWithoutOwnerInput = {
    id?: string
    name: string
    shortName: string
    isActive: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
    teamLocation?: TeamLocationCreateNestedOneWithoutTeamInput
    PersonContract?: PersonContractCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    shortName: string
    isActive: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
    teamLocation?: TeamLocationUncheckedCreateNestedOneWithoutTeamInput
    PersonContract?: PersonContractUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutOwnerInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutOwnerInput, TeamUncheckedCreateWithoutOwnerInput>
  }

  export type TeamCreateManyOwnerInputEnvelope = {
    data: TeamCreateManyOwnerInput | TeamCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type TeamUpsertWithWhereUniqueWithoutOwnerInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutOwnerInput, TeamUncheckedUpdateWithoutOwnerInput>
    create: XOR<TeamCreateWithoutOwnerInput, TeamUncheckedCreateWithoutOwnerInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutOwnerInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutOwnerInput, TeamUncheckedUpdateWithoutOwnerInput>
  }

  export type TeamUpdateManyWithWhereWithoutOwnerInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutOwnerInput>
  }

  export type TeamScalarWhereInput = {
    AND?: TeamScalarWhereInput | TeamScalarWhereInput[]
    OR?: TeamScalarWhereInput[]
    NOT?: TeamScalarWhereInput | TeamScalarWhereInput[]
    id?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    shortName?: StringFilter<"Team"> | string
    isActive?: BoolFilter<"Team"> | boolean
    ownerId?: StringFilter<"Team"> | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    createdAt?: DateTimeFilter<"Team"> | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    teams?: TeamCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    teams?: TeamUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    teams?: TeamUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    teams?: TeamUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    teams?: TeamCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    teams?: TeamUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    teams?: TeamUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    teams?: TeamUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type RegionI18nCreateWithoutRegionInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RegionI18nUncheckedCreateWithoutRegionInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RegionI18nCreateOrConnectWithoutRegionInput = {
    where: RegionI18nWhereUniqueInput
    create: XOR<RegionI18nCreateWithoutRegionInput, RegionI18nUncheckedCreateWithoutRegionInput>
  }

  export type RegionI18nCreateManyRegionInputEnvelope = {
    data: RegionI18nCreateManyRegionInput | RegionI18nCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type LocationCreateWithoutRegionInput = {
    id: string
    type: $Enums.LocationType
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nCreateNestedManyWithoutLocationInput
    buildings?: BuildingCreateNestedManyWithoutLocationInput
    routesFrom?: RouteCreateNestedManyWithoutLocationFromInput
    routesTo?: RouteCreateNestedManyWithoutLocationToInput
    teams?: TeamLocationCreateNestedManyWithoutLocationInput
    townInfo?: TownInformationCreateNestedOneWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutRegionInput = {
    id: string
    type: $Enums.LocationType
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nUncheckedCreateNestedManyWithoutLocationInput
    buildings?: BuildingUncheckedCreateNestedManyWithoutLocationInput
    routesFrom?: RouteUncheckedCreateNestedManyWithoutLocationFromInput
    routesTo?: RouteUncheckedCreateNestedManyWithoutLocationToInput
    teams?: TeamLocationUncheckedCreateNestedManyWithoutLocationInput
    townInfo?: TownInformationUncheckedCreateNestedOneWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutRegionInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutRegionInput, LocationUncheckedCreateWithoutRegionInput>
  }

  export type LocationCreateManyRegionInputEnvelope = {
    data: LocationCreateManyRegionInput | LocationCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type RegionPopulationCreateWithoutRegionInput = {
    id?: string
    percentage: number
    updatedAt?: Date | string
    createdAt?: Date | string
    culture: CultureCreateNestedOneWithoutRegionPopulationsInput
  }

  export type RegionPopulationUncheckedCreateWithoutRegionInput = {
    id?: string
    cultureId: string
    percentage: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RegionPopulationCreateOrConnectWithoutRegionInput = {
    where: RegionPopulationWhereUniqueInput
    create: XOR<RegionPopulationCreateWithoutRegionInput, RegionPopulationUncheckedCreateWithoutRegionInput>
  }

  export type RegionPopulationCreateManyRegionInputEnvelope = {
    data: RegionPopulationCreateManyRegionInput | RegionPopulationCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type RegionI18nUpsertWithWhereUniqueWithoutRegionInput = {
    where: RegionI18nWhereUniqueInput
    update: XOR<RegionI18nUpdateWithoutRegionInput, RegionI18nUncheckedUpdateWithoutRegionInput>
    create: XOR<RegionI18nCreateWithoutRegionInput, RegionI18nUncheckedCreateWithoutRegionInput>
  }

  export type RegionI18nUpdateWithWhereUniqueWithoutRegionInput = {
    where: RegionI18nWhereUniqueInput
    data: XOR<RegionI18nUpdateWithoutRegionInput, RegionI18nUncheckedUpdateWithoutRegionInput>
  }

  export type RegionI18nUpdateManyWithWhereWithoutRegionInput = {
    where: RegionI18nScalarWhereInput
    data: XOR<RegionI18nUpdateManyMutationInput, RegionI18nUncheckedUpdateManyWithoutRegionInput>
  }

  export type RegionI18nScalarWhereInput = {
    AND?: RegionI18nScalarWhereInput | RegionI18nScalarWhereInput[]
    OR?: RegionI18nScalarWhereInput[]
    NOT?: RegionI18nScalarWhereInput | RegionI18nScalarWhereInput[]
    id?: StringFilter<"RegionI18n"> | string
    regionId?: StringFilter<"RegionI18n"> | string
    language?: StringFilter<"RegionI18n"> | string
    name?: StringFilter<"RegionI18n"> | string
    updatedAt?: DateTimeFilter<"RegionI18n"> | Date | string
    createdAt?: DateTimeFilter<"RegionI18n"> | Date | string
  }

  export type LocationUpsertWithWhereUniqueWithoutRegionInput = {
    where: LocationWhereUniqueInput
    update: XOR<LocationUpdateWithoutRegionInput, LocationUncheckedUpdateWithoutRegionInput>
    create: XOR<LocationCreateWithoutRegionInput, LocationUncheckedCreateWithoutRegionInput>
  }

  export type LocationUpdateWithWhereUniqueWithoutRegionInput = {
    where: LocationWhereUniqueInput
    data: XOR<LocationUpdateWithoutRegionInput, LocationUncheckedUpdateWithoutRegionInput>
  }

  export type LocationUpdateManyWithWhereWithoutRegionInput = {
    where: LocationScalarWhereInput
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyWithoutRegionInput>
  }

  export type LocationScalarWhereInput = {
    AND?: LocationScalarWhereInput | LocationScalarWhereInput[]
    OR?: LocationScalarWhereInput[]
    NOT?: LocationScalarWhereInput | LocationScalarWhereInput[]
    id?: StringFilter<"Location"> | string
    type?: EnumLocationTypeFilter<"Location"> | $Enums.LocationType
    regionId?: StringFilter<"Location"> | string
    latitude?: FloatFilter<"Location"> | number
    longitude?: FloatFilter<"Location"> | number
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    createdAt?: DateTimeFilter<"Location"> | Date | string
  }

  export type RegionPopulationUpsertWithWhereUniqueWithoutRegionInput = {
    where: RegionPopulationWhereUniqueInput
    update: XOR<RegionPopulationUpdateWithoutRegionInput, RegionPopulationUncheckedUpdateWithoutRegionInput>
    create: XOR<RegionPopulationCreateWithoutRegionInput, RegionPopulationUncheckedCreateWithoutRegionInput>
  }

  export type RegionPopulationUpdateWithWhereUniqueWithoutRegionInput = {
    where: RegionPopulationWhereUniqueInput
    data: XOR<RegionPopulationUpdateWithoutRegionInput, RegionPopulationUncheckedUpdateWithoutRegionInput>
  }

  export type RegionPopulationUpdateManyWithWhereWithoutRegionInput = {
    where: RegionPopulationScalarWhereInput
    data: XOR<RegionPopulationUpdateManyMutationInput, RegionPopulationUncheckedUpdateManyWithoutRegionInput>
  }

  export type RegionPopulationScalarWhereInput = {
    AND?: RegionPopulationScalarWhereInput | RegionPopulationScalarWhereInput[]
    OR?: RegionPopulationScalarWhereInput[]
    NOT?: RegionPopulationScalarWhereInput | RegionPopulationScalarWhereInput[]
    id?: StringFilter<"RegionPopulation"> | string
    regionId?: StringFilter<"RegionPopulation"> | string
    cultureId?: StringFilter<"RegionPopulation"> | string
    percentage?: IntFilter<"RegionPopulation"> | number
    updatedAt?: DateTimeFilter<"RegionPopulation"> | Date | string
    createdAt?: DateTimeFilter<"RegionPopulation"> | Date | string
  }

  export type RegionCreateWithoutI18nInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    locations?: LocationCreateNestedManyWithoutRegionInput
    regionPopulations?: RegionPopulationCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutI18nInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    locations?: LocationUncheckedCreateNestedManyWithoutRegionInput
    regionPopulations?: RegionPopulationUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutI18nInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutI18nInput, RegionUncheckedCreateWithoutI18nInput>
  }

  export type RegionUpsertWithoutI18nInput = {
    update: XOR<RegionUpdateWithoutI18nInput, RegionUncheckedUpdateWithoutI18nInput>
    create: XOR<RegionCreateWithoutI18nInput, RegionUncheckedCreateWithoutI18nInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutI18nInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutI18nInput, RegionUncheckedUpdateWithoutI18nInput>
  }

  export type RegionUpdateWithoutI18nInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: LocationUpdateManyWithoutRegionNestedInput
    regionPopulations?: RegionPopulationUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutI18nInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: LocationUncheckedUpdateManyWithoutRegionNestedInput
    regionPopulations?: RegionPopulationUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type LocationI18nCreateWithoutLocationInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type LocationI18nUncheckedCreateWithoutLocationInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type LocationI18nCreateOrConnectWithoutLocationInput = {
    where: LocationI18nWhereUniqueInput
    create: XOR<LocationI18nCreateWithoutLocationInput, LocationI18nUncheckedCreateWithoutLocationInput>
  }

  export type LocationI18nCreateManyLocationInputEnvelope = {
    data: LocationI18nCreateManyLocationInput | LocationI18nCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type BuildingCreateWithoutLocationInput = {
    id?: string
    updatedAt?: Date | string
    createdAt?: Date | string
    buildingType: BuildingTypeCreateNestedOneWithoutBuildingsInput
    i18n?: BuildingI18nCreateNestedManyWithoutBuildingInput
    stadiumInfo?: StadiumInfoCreateNestedOneWithoutBuildingInput
  }

  export type BuildingUncheckedCreateWithoutLocationInput = {
    id?: string
    buildingTypeId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: BuildingI18nUncheckedCreateNestedManyWithoutBuildingInput
    stadiumInfo?: StadiumInfoUncheckedCreateNestedOneWithoutBuildingInput
  }

  export type BuildingCreateOrConnectWithoutLocationInput = {
    where: BuildingWhereUniqueInput
    create: XOR<BuildingCreateWithoutLocationInput, BuildingUncheckedCreateWithoutLocationInput>
  }

  export type BuildingCreateManyLocationInputEnvelope = {
    data: BuildingCreateManyLocationInput | BuildingCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type RegionCreateWithoutLocationsInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: RegionI18nCreateNestedManyWithoutRegionInput
    regionPopulations?: RegionPopulationCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutLocationsInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: RegionI18nUncheckedCreateNestedManyWithoutRegionInput
    regionPopulations?: RegionPopulationUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutLocationsInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutLocationsInput, RegionUncheckedCreateWithoutLocationsInput>
  }

  export type RouteCreateWithoutLocationFromInput = {
    id?: string
    type: $Enums.RouteType
    distance: number
    updatedAt?: Date | string
    createdAt?: Date | string
    locationTo: LocationCreateNestedOneWithoutRoutesToInput
  }

  export type RouteUncheckedCreateWithoutLocationFromInput = {
    id?: string
    type: $Enums.RouteType
    toId: string
    distance: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RouteCreateOrConnectWithoutLocationFromInput = {
    where: RouteWhereUniqueInput
    create: XOR<RouteCreateWithoutLocationFromInput, RouteUncheckedCreateWithoutLocationFromInput>
  }

  export type RouteCreateManyLocationFromInputEnvelope = {
    data: RouteCreateManyLocationFromInput | RouteCreateManyLocationFromInput[]
    skipDuplicates?: boolean
  }

  export type RouteCreateWithoutLocationToInput = {
    id?: string
    type: $Enums.RouteType
    distance: number
    updatedAt?: Date | string
    createdAt?: Date | string
    locationFrom: LocationCreateNestedOneWithoutRoutesFromInput
  }

  export type RouteUncheckedCreateWithoutLocationToInput = {
    id?: string
    type: $Enums.RouteType
    fromId: string
    distance: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RouteCreateOrConnectWithoutLocationToInput = {
    where: RouteWhereUniqueInput
    create: XOR<RouteCreateWithoutLocationToInput, RouteUncheckedCreateWithoutLocationToInput>
  }

  export type RouteCreateManyLocationToInputEnvelope = {
    data: RouteCreateManyLocationToInput | RouteCreateManyLocationToInput[]
    skipDuplicates?: boolean
  }

  export type TeamLocationCreateWithoutLocationInput = {
    id?: string
    updatedAt?: Date | string
    createdAt?: Date | string
    team: TeamCreateNestedOneWithoutTeamLocationInput
  }

  export type TeamLocationUncheckedCreateWithoutLocationInput = {
    id?: string
    teamId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type TeamLocationCreateOrConnectWithoutLocationInput = {
    where: TeamLocationWhereUniqueInput
    create: XOR<TeamLocationCreateWithoutLocationInput, TeamLocationUncheckedCreateWithoutLocationInput>
  }

  export type TeamLocationCreateManyLocationInputEnvelope = {
    data: TeamLocationCreateManyLocationInput | TeamLocationCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type TownInformationCreateWithoutLocationInput = {
    id?: string
    population: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type TownInformationUncheckedCreateWithoutLocationInput = {
    id?: string
    population: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type TownInformationCreateOrConnectWithoutLocationInput = {
    where: TownInformationWhereUniqueInput
    create: XOR<TownInformationCreateWithoutLocationInput, TownInformationUncheckedCreateWithoutLocationInput>
  }

  export type LocationI18nUpsertWithWhereUniqueWithoutLocationInput = {
    where: LocationI18nWhereUniqueInput
    update: XOR<LocationI18nUpdateWithoutLocationInput, LocationI18nUncheckedUpdateWithoutLocationInput>
    create: XOR<LocationI18nCreateWithoutLocationInput, LocationI18nUncheckedCreateWithoutLocationInput>
  }

  export type LocationI18nUpdateWithWhereUniqueWithoutLocationInput = {
    where: LocationI18nWhereUniqueInput
    data: XOR<LocationI18nUpdateWithoutLocationInput, LocationI18nUncheckedUpdateWithoutLocationInput>
  }

  export type LocationI18nUpdateManyWithWhereWithoutLocationInput = {
    where: LocationI18nScalarWhereInput
    data: XOR<LocationI18nUpdateManyMutationInput, LocationI18nUncheckedUpdateManyWithoutLocationInput>
  }

  export type LocationI18nScalarWhereInput = {
    AND?: LocationI18nScalarWhereInput | LocationI18nScalarWhereInput[]
    OR?: LocationI18nScalarWhereInput[]
    NOT?: LocationI18nScalarWhereInput | LocationI18nScalarWhereInput[]
    id?: StringFilter<"LocationI18n"> | string
    locationId?: StringFilter<"LocationI18n"> | string
    language?: StringFilter<"LocationI18n"> | string
    name?: StringFilter<"LocationI18n"> | string
    updatedAt?: DateTimeFilter<"LocationI18n"> | Date | string
    createdAt?: DateTimeFilter<"LocationI18n"> | Date | string
  }

  export type BuildingUpsertWithWhereUniqueWithoutLocationInput = {
    where: BuildingWhereUniqueInput
    update: XOR<BuildingUpdateWithoutLocationInput, BuildingUncheckedUpdateWithoutLocationInput>
    create: XOR<BuildingCreateWithoutLocationInput, BuildingUncheckedCreateWithoutLocationInput>
  }

  export type BuildingUpdateWithWhereUniqueWithoutLocationInput = {
    where: BuildingWhereUniqueInput
    data: XOR<BuildingUpdateWithoutLocationInput, BuildingUncheckedUpdateWithoutLocationInput>
  }

  export type BuildingUpdateManyWithWhereWithoutLocationInput = {
    where: BuildingScalarWhereInput
    data: XOR<BuildingUpdateManyMutationInput, BuildingUncheckedUpdateManyWithoutLocationInput>
  }

  export type BuildingScalarWhereInput = {
    AND?: BuildingScalarWhereInput | BuildingScalarWhereInput[]
    OR?: BuildingScalarWhereInput[]
    NOT?: BuildingScalarWhereInput | BuildingScalarWhereInput[]
    id?: StringFilter<"Building"> | string
    buildingTypeId?: StringFilter<"Building"> | string
    locationId?: StringFilter<"Building"> | string
    updatedAt?: DateTimeFilter<"Building"> | Date | string
    createdAt?: DateTimeFilter<"Building"> | Date | string
  }

  export type RegionUpsertWithoutLocationsInput = {
    update: XOR<RegionUpdateWithoutLocationsInput, RegionUncheckedUpdateWithoutLocationsInput>
    create: XOR<RegionCreateWithoutLocationsInput, RegionUncheckedCreateWithoutLocationsInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutLocationsInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutLocationsInput, RegionUncheckedUpdateWithoutLocationsInput>
  }

  export type RegionUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: RegionI18nUpdateManyWithoutRegionNestedInput
    regionPopulations?: RegionPopulationUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: RegionI18nUncheckedUpdateManyWithoutRegionNestedInput
    regionPopulations?: RegionPopulationUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RouteUpsertWithWhereUniqueWithoutLocationFromInput = {
    where: RouteWhereUniqueInput
    update: XOR<RouteUpdateWithoutLocationFromInput, RouteUncheckedUpdateWithoutLocationFromInput>
    create: XOR<RouteCreateWithoutLocationFromInput, RouteUncheckedCreateWithoutLocationFromInput>
  }

  export type RouteUpdateWithWhereUniqueWithoutLocationFromInput = {
    where: RouteWhereUniqueInput
    data: XOR<RouteUpdateWithoutLocationFromInput, RouteUncheckedUpdateWithoutLocationFromInput>
  }

  export type RouteUpdateManyWithWhereWithoutLocationFromInput = {
    where: RouteScalarWhereInput
    data: XOR<RouteUpdateManyMutationInput, RouteUncheckedUpdateManyWithoutLocationFromInput>
  }

  export type RouteScalarWhereInput = {
    AND?: RouteScalarWhereInput | RouteScalarWhereInput[]
    OR?: RouteScalarWhereInput[]
    NOT?: RouteScalarWhereInput | RouteScalarWhereInput[]
    id?: StringFilter<"Route"> | string
    type?: EnumRouteTypeFilter<"Route"> | $Enums.RouteType
    fromId?: StringFilter<"Route"> | string
    toId?: StringFilter<"Route"> | string
    distance?: FloatFilter<"Route"> | number
    updatedAt?: DateTimeFilter<"Route"> | Date | string
    createdAt?: DateTimeFilter<"Route"> | Date | string
  }

  export type RouteUpsertWithWhereUniqueWithoutLocationToInput = {
    where: RouteWhereUniqueInput
    update: XOR<RouteUpdateWithoutLocationToInput, RouteUncheckedUpdateWithoutLocationToInput>
    create: XOR<RouteCreateWithoutLocationToInput, RouteUncheckedCreateWithoutLocationToInput>
  }

  export type RouteUpdateWithWhereUniqueWithoutLocationToInput = {
    where: RouteWhereUniqueInput
    data: XOR<RouteUpdateWithoutLocationToInput, RouteUncheckedUpdateWithoutLocationToInput>
  }

  export type RouteUpdateManyWithWhereWithoutLocationToInput = {
    where: RouteScalarWhereInput
    data: XOR<RouteUpdateManyMutationInput, RouteUncheckedUpdateManyWithoutLocationToInput>
  }

  export type TeamLocationUpsertWithWhereUniqueWithoutLocationInput = {
    where: TeamLocationWhereUniqueInput
    update: XOR<TeamLocationUpdateWithoutLocationInput, TeamLocationUncheckedUpdateWithoutLocationInput>
    create: XOR<TeamLocationCreateWithoutLocationInput, TeamLocationUncheckedCreateWithoutLocationInput>
  }

  export type TeamLocationUpdateWithWhereUniqueWithoutLocationInput = {
    where: TeamLocationWhereUniqueInput
    data: XOR<TeamLocationUpdateWithoutLocationInput, TeamLocationUncheckedUpdateWithoutLocationInput>
  }

  export type TeamLocationUpdateManyWithWhereWithoutLocationInput = {
    where: TeamLocationScalarWhereInput
    data: XOR<TeamLocationUpdateManyMutationInput, TeamLocationUncheckedUpdateManyWithoutLocationInput>
  }

  export type TeamLocationScalarWhereInput = {
    AND?: TeamLocationScalarWhereInput | TeamLocationScalarWhereInput[]
    OR?: TeamLocationScalarWhereInput[]
    NOT?: TeamLocationScalarWhereInput | TeamLocationScalarWhereInput[]
    id?: StringFilter<"TeamLocation"> | string
    teamId?: StringFilter<"TeamLocation"> | string
    locationId?: StringFilter<"TeamLocation"> | string
    updatedAt?: DateTimeFilter<"TeamLocation"> | Date | string
    createdAt?: DateTimeFilter<"TeamLocation"> | Date | string
  }

  export type TownInformationUpsertWithoutLocationInput = {
    update: XOR<TownInformationUpdateWithoutLocationInput, TownInformationUncheckedUpdateWithoutLocationInput>
    create: XOR<TownInformationCreateWithoutLocationInput, TownInformationUncheckedCreateWithoutLocationInput>
    where?: TownInformationWhereInput
  }

  export type TownInformationUpdateToOneWithWhereWithoutLocationInput = {
    where?: TownInformationWhereInput
    data: XOR<TownInformationUpdateWithoutLocationInput, TownInformationUncheckedUpdateWithoutLocationInput>
  }

  export type TownInformationUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TownInformationUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateWithoutI18nInput = {
    id: string
    type: $Enums.LocationType
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    buildings?: BuildingCreateNestedManyWithoutLocationInput
    region: RegionCreateNestedOneWithoutLocationsInput
    routesFrom?: RouteCreateNestedManyWithoutLocationFromInput
    routesTo?: RouteCreateNestedManyWithoutLocationToInput
    teams?: TeamLocationCreateNestedManyWithoutLocationInput
    townInfo?: TownInformationCreateNestedOneWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutI18nInput = {
    id: string
    type: $Enums.LocationType
    regionId: string
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    buildings?: BuildingUncheckedCreateNestedManyWithoutLocationInput
    routesFrom?: RouteUncheckedCreateNestedManyWithoutLocationFromInput
    routesTo?: RouteUncheckedCreateNestedManyWithoutLocationToInput
    teams?: TeamLocationUncheckedCreateNestedManyWithoutLocationInput
    townInfo?: TownInformationUncheckedCreateNestedOneWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutI18nInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutI18nInput, LocationUncheckedCreateWithoutI18nInput>
  }

  export type LocationUpsertWithoutI18nInput = {
    update: XOR<LocationUpdateWithoutI18nInput, LocationUncheckedUpdateWithoutI18nInput>
    create: XOR<LocationCreateWithoutI18nInput, LocationUncheckedCreateWithoutI18nInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutI18nInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutI18nInput, LocationUncheckedUpdateWithoutI18nInput>
  }

  export type LocationUpdateWithoutI18nInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buildings?: BuildingUpdateManyWithoutLocationNestedInput
    region?: RegionUpdateOneRequiredWithoutLocationsNestedInput
    routesFrom?: RouteUpdateManyWithoutLocationFromNestedInput
    routesTo?: RouteUpdateManyWithoutLocationToNestedInput
    teams?: TeamLocationUpdateManyWithoutLocationNestedInput
    townInfo?: TownInformationUpdateOneWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutI18nInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    regionId?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buildings?: BuildingUncheckedUpdateManyWithoutLocationNestedInput
    routesFrom?: RouteUncheckedUpdateManyWithoutLocationFromNestedInput
    routesTo?: RouteUncheckedUpdateManyWithoutLocationToNestedInput
    teams?: TeamLocationUncheckedUpdateManyWithoutLocationNestedInput
    townInfo?: TownInformationUncheckedUpdateOneWithoutLocationNestedInput
  }

  export type LocationCreateWithoutTownInfoInput = {
    id: string
    type: $Enums.LocationType
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nCreateNestedManyWithoutLocationInput
    buildings?: BuildingCreateNestedManyWithoutLocationInput
    region: RegionCreateNestedOneWithoutLocationsInput
    routesFrom?: RouteCreateNestedManyWithoutLocationFromInput
    routesTo?: RouteCreateNestedManyWithoutLocationToInput
    teams?: TeamLocationCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutTownInfoInput = {
    id: string
    type: $Enums.LocationType
    regionId: string
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nUncheckedCreateNestedManyWithoutLocationInput
    buildings?: BuildingUncheckedCreateNestedManyWithoutLocationInput
    routesFrom?: RouteUncheckedCreateNestedManyWithoutLocationFromInput
    routesTo?: RouteUncheckedCreateNestedManyWithoutLocationToInput
    teams?: TeamLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutTownInfoInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutTownInfoInput, LocationUncheckedCreateWithoutTownInfoInput>
  }

  export type LocationUpsertWithoutTownInfoInput = {
    update: XOR<LocationUpdateWithoutTownInfoInput, LocationUncheckedUpdateWithoutTownInfoInput>
    create: XOR<LocationCreateWithoutTownInfoInput, LocationUncheckedCreateWithoutTownInfoInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutTownInfoInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutTownInfoInput, LocationUncheckedUpdateWithoutTownInfoInput>
  }

  export type LocationUpdateWithoutTownInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUpdateManyWithoutLocationNestedInput
    buildings?: BuildingUpdateManyWithoutLocationNestedInput
    region?: RegionUpdateOneRequiredWithoutLocationsNestedInput
    routesFrom?: RouteUpdateManyWithoutLocationFromNestedInput
    routesTo?: RouteUpdateManyWithoutLocationToNestedInput
    teams?: TeamLocationUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutTownInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    regionId?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUncheckedUpdateManyWithoutLocationNestedInput
    buildings?: BuildingUncheckedUpdateManyWithoutLocationNestedInput
    routesFrom?: RouteUncheckedUpdateManyWithoutLocationFromNestedInput
    routesTo?: RouteUncheckedUpdateManyWithoutLocationToNestedInput
    teams?: TeamLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateWithoutRoutesFromInput = {
    id: string
    type: $Enums.LocationType
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nCreateNestedManyWithoutLocationInput
    buildings?: BuildingCreateNestedManyWithoutLocationInput
    region: RegionCreateNestedOneWithoutLocationsInput
    routesTo?: RouteCreateNestedManyWithoutLocationToInput
    teams?: TeamLocationCreateNestedManyWithoutLocationInput
    townInfo?: TownInformationCreateNestedOneWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutRoutesFromInput = {
    id: string
    type: $Enums.LocationType
    regionId: string
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nUncheckedCreateNestedManyWithoutLocationInput
    buildings?: BuildingUncheckedCreateNestedManyWithoutLocationInput
    routesTo?: RouteUncheckedCreateNestedManyWithoutLocationToInput
    teams?: TeamLocationUncheckedCreateNestedManyWithoutLocationInput
    townInfo?: TownInformationUncheckedCreateNestedOneWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutRoutesFromInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutRoutesFromInput, LocationUncheckedCreateWithoutRoutesFromInput>
  }

  export type LocationCreateWithoutRoutesToInput = {
    id: string
    type: $Enums.LocationType
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nCreateNestedManyWithoutLocationInput
    buildings?: BuildingCreateNestedManyWithoutLocationInput
    region: RegionCreateNestedOneWithoutLocationsInput
    routesFrom?: RouteCreateNestedManyWithoutLocationFromInput
    teams?: TeamLocationCreateNestedManyWithoutLocationInput
    townInfo?: TownInformationCreateNestedOneWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutRoutesToInput = {
    id: string
    type: $Enums.LocationType
    regionId: string
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nUncheckedCreateNestedManyWithoutLocationInput
    buildings?: BuildingUncheckedCreateNestedManyWithoutLocationInput
    routesFrom?: RouteUncheckedCreateNestedManyWithoutLocationFromInput
    teams?: TeamLocationUncheckedCreateNestedManyWithoutLocationInput
    townInfo?: TownInformationUncheckedCreateNestedOneWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutRoutesToInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutRoutesToInput, LocationUncheckedCreateWithoutRoutesToInput>
  }

  export type LocationUpsertWithoutRoutesFromInput = {
    update: XOR<LocationUpdateWithoutRoutesFromInput, LocationUncheckedUpdateWithoutRoutesFromInput>
    create: XOR<LocationCreateWithoutRoutesFromInput, LocationUncheckedCreateWithoutRoutesFromInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutRoutesFromInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutRoutesFromInput, LocationUncheckedUpdateWithoutRoutesFromInput>
  }

  export type LocationUpdateWithoutRoutesFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUpdateManyWithoutLocationNestedInput
    buildings?: BuildingUpdateManyWithoutLocationNestedInput
    region?: RegionUpdateOneRequiredWithoutLocationsNestedInput
    routesTo?: RouteUpdateManyWithoutLocationToNestedInput
    teams?: TeamLocationUpdateManyWithoutLocationNestedInput
    townInfo?: TownInformationUpdateOneWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutRoutesFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    regionId?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUncheckedUpdateManyWithoutLocationNestedInput
    buildings?: BuildingUncheckedUpdateManyWithoutLocationNestedInput
    routesTo?: RouteUncheckedUpdateManyWithoutLocationToNestedInput
    teams?: TeamLocationUncheckedUpdateManyWithoutLocationNestedInput
    townInfo?: TownInformationUncheckedUpdateOneWithoutLocationNestedInput
  }

  export type LocationUpsertWithoutRoutesToInput = {
    update: XOR<LocationUpdateWithoutRoutesToInput, LocationUncheckedUpdateWithoutRoutesToInput>
    create: XOR<LocationCreateWithoutRoutesToInput, LocationUncheckedCreateWithoutRoutesToInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutRoutesToInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutRoutesToInput, LocationUncheckedUpdateWithoutRoutesToInput>
  }

  export type LocationUpdateWithoutRoutesToInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUpdateManyWithoutLocationNestedInput
    buildings?: BuildingUpdateManyWithoutLocationNestedInput
    region?: RegionUpdateOneRequiredWithoutLocationsNestedInput
    routesFrom?: RouteUpdateManyWithoutLocationFromNestedInput
    teams?: TeamLocationUpdateManyWithoutLocationNestedInput
    townInfo?: TownInformationUpdateOneWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutRoutesToInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    regionId?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUncheckedUpdateManyWithoutLocationNestedInput
    buildings?: BuildingUncheckedUpdateManyWithoutLocationNestedInput
    routesFrom?: RouteUncheckedUpdateManyWithoutLocationFromNestedInput
    teams?: TeamLocationUncheckedUpdateManyWithoutLocationNestedInput
    townInfo?: TownInformationUncheckedUpdateOneWithoutLocationNestedInput
  }

  export type BuildingTypeI18nCreateWithoutBuildingTypeInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingTypeI18nUncheckedCreateWithoutBuildingTypeInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingTypeI18nCreateOrConnectWithoutBuildingTypeInput = {
    where: BuildingTypeI18nWhereUniqueInput
    create: XOR<BuildingTypeI18nCreateWithoutBuildingTypeInput, BuildingTypeI18nUncheckedCreateWithoutBuildingTypeInput>
  }

  export type BuildingTypeI18nCreateManyBuildingTypeInputEnvelope = {
    data: BuildingTypeI18nCreateManyBuildingTypeInput | BuildingTypeI18nCreateManyBuildingTypeInput[]
    skipDuplicates?: boolean
  }

  export type BuildingCreateWithoutBuildingTypeInput = {
    id?: string
    updatedAt?: Date | string
    createdAt?: Date | string
    location: LocationCreateNestedOneWithoutBuildingsInput
    i18n?: BuildingI18nCreateNestedManyWithoutBuildingInput
    stadiumInfo?: StadiumInfoCreateNestedOneWithoutBuildingInput
  }

  export type BuildingUncheckedCreateWithoutBuildingTypeInput = {
    id?: string
    locationId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: BuildingI18nUncheckedCreateNestedManyWithoutBuildingInput
    stadiumInfo?: StadiumInfoUncheckedCreateNestedOneWithoutBuildingInput
  }

  export type BuildingCreateOrConnectWithoutBuildingTypeInput = {
    where: BuildingWhereUniqueInput
    create: XOR<BuildingCreateWithoutBuildingTypeInput, BuildingUncheckedCreateWithoutBuildingTypeInput>
  }

  export type BuildingCreateManyBuildingTypeInputEnvelope = {
    data: BuildingCreateManyBuildingTypeInput | BuildingCreateManyBuildingTypeInput[]
    skipDuplicates?: boolean
  }

  export type BuildingTypeI18nUpsertWithWhereUniqueWithoutBuildingTypeInput = {
    where: BuildingTypeI18nWhereUniqueInput
    update: XOR<BuildingTypeI18nUpdateWithoutBuildingTypeInput, BuildingTypeI18nUncheckedUpdateWithoutBuildingTypeInput>
    create: XOR<BuildingTypeI18nCreateWithoutBuildingTypeInput, BuildingTypeI18nUncheckedCreateWithoutBuildingTypeInput>
  }

  export type BuildingTypeI18nUpdateWithWhereUniqueWithoutBuildingTypeInput = {
    where: BuildingTypeI18nWhereUniqueInput
    data: XOR<BuildingTypeI18nUpdateWithoutBuildingTypeInput, BuildingTypeI18nUncheckedUpdateWithoutBuildingTypeInput>
  }

  export type BuildingTypeI18nUpdateManyWithWhereWithoutBuildingTypeInput = {
    where: BuildingTypeI18nScalarWhereInput
    data: XOR<BuildingTypeI18nUpdateManyMutationInput, BuildingTypeI18nUncheckedUpdateManyWithoutBuildingTypeInput>
  }

  export type BuildingTypeI18nScalarWhereInput = {
    AND?: BuildingTypeI18nScalarWhereInput | BuildingTypeI18nScalarWhereInput[]
    OR?: BuildingTypeI18nScalarWhereInput[]
    NOT?: BuildingTypeI18nScalarWhereInput | BuildingTypeI18nScalarWhereInput[]
    id?: StringFilter<"BuildingTypeI18n"> | string
    buildingTypeId?: StringFilter<"BuildingTypeI18n"> | string
    language?: StringFilter<"BuildingTypeI18n"> | string
    name?: StringFilter<"BuildingTypeI18n"> | string
    updatedAt?: DateTimeFilter<"BuildingTypeI18n"> | Date | string
    createdAt?: DateTimeFilter<"BuildingTypeI18n"> | Date | string
  }

  export type BuildingUpsertWithWhereUniqueWithoutBuildingTypeInput = {
    where: BuildingWhereUniqueInput
    update: XOR<BuildingUpdateWithoutBuildingTypeInput, BuildingUncheckedUpdateWithoutBuildingTypeInput>
    create: XOR<BuildingCreateWithoutBuildingTypeInput, BuildingUncheckedCreateWithoutBuildingTypeInput>
  }

  export type BuildingUpdateWithWhereUniqueWithoutBuildingTypeInput = {
    where: BuildingWhereUniqueInput
    data: XOR<BuildingUpdateWithoutBuildingTypeInput, BuildingUncheckedUpdateWithoutBuildingTypeInput>
  }

  export type BuildingUpdateManyWithWhereWithoutBuildingTypeInput = {
    where: BuildingScalarWhereInput
    data: XOR<BuildingUpdateManyMutationInput, BuildingUncheckedUpdateManyWithoutBuildingTypeInput>
  }

  export type BuildingTypeCreateWithoutI18nInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    buildings?: BuildingCreateNestedManyWithoutBuildingTypeInput
  }

  export type BuildingTypeUncheckedCreateWithoutI18nInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    buildings?: BuildingUncheckedCreateNestedManyWithoutBuildingTypeInput
  }

  export type BuildingTypeCreateOrConnectWithoutI18nInput = {
    where: BuildingTypeWhereUniqueInput
    create: XOR<BuildingTypeCreateWithoutI18nInput, BuildingTypeUncheckedCreateWithoutI18nInput>
  }

  export type BuildingTypeUpsertWithoutI18nInput = {
    update: XOR<BuildingTypeUpdateWithoutI18nInput, BuildingTypeUncheckedUpdateWithoutI18nInput>
    create: XOR<BuildingTypeCreateWithoutI18nInput, BuildingTypeUncheckedCreateWithoutI18nInput>
    where?: BuildingTypeWhereInput
  }

  export type BuildingTypeUpdateToOneWithWhereWithoutI18nInput = {
    where?: BuildingTypeWhereInput
    data: XOR<BuildingTypeUpdateWithoutI18nInput, BuildingTypeUncheckedUpdateWithoutI18nInput>
  }

  export type BuildingTypeUpdateWithoutI18nInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buildings?: BuildingUpdateManyWithoutBuildingTypeNestedInput
  }

  export type BuildingTypeUncheckedUpdateWithoutI18nInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buildings?: BuildingUncheckedUpdateManyWithoutBuildingTypeNestedInput
  }

  export type BuildingTypeCreateWithoutBuildingsInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: BuildingTypeI18nCreateNestedManyWithoutBuildingTypeInput
  }

  export type BuildingTypeUncheckedCreateWithoutBuildingsInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: BuildingTypeI18nUncheckedCreateNestedManyWithoutBuildingTypeInput
  }

  export type BuildingTypeCreateOrConnectWithoutBuildingsInput = {
    where: BuildingTypeWhereUniqueInput
    create: XOR<BuildingTypeCreateWithoutBuildingsInput, BuildingTypeUncheckedCreateWithoutBuildingsInput>
  }

  export type LocationCreateWithoutBuildingsInput = {
    id: string
    type: $Enums.LocationType
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nCreateNestedManyWithoutLocationInput
    region: RegionCreateNestedOneWithoutLocationsInput
    routesFrom?: RouteCreateNestedManyWithoutLocationFromInput
    routesTo?: RouteCreateNestedManyWithoutLocationToInput
    teams?: TeamLocationCreateNestedManyWithoutLocationInput
    townInfo?: TownInformationCreateNestedOneWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutBuildingsInput = {
    id: string
    type: $Enums.LocationType
    regionId: string
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nUncheckedCreateNestedManyWithoutLocationInput
    routesFrom?: RouteUncheckedCreateNestedManyWithoutLocationFromInput
    routesTo?: RouteUncheckedCreateNestedManyWithoutLocationToInput
    teams?: TeamLocationUncheckedCreateNestedManyWithoutLocationInput
    townInfo?: TownInformationUncheckedCreateNestedOneWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutBuildingsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutBuildingsInput, LocationUncheckedCreateWithoutBuildingsInput>
  }

  export type BuildingI18nCreateWithoutBuildingInput = {
    id?: string
    language: string
    name: string
    description?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingI18nUncheckedCreateWithoutBuildingInput = {
    id?: string
    language: string
    name: string
    description?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingI18nCreateOrConnectWithoutBuildingInput = {
    where: BuildingI18nWhereUniqueInput
    create: XOR<BuildingI18nCreateWithoutBuildingInput, BuildingI18nUncheckedCreateWithoutBuildingInput>
  }

  export type BuildingI18nCreateManyBuildingInputEnvelope = {
    data: BuildingI18nCreateManyBuildingInput | BuildingI18nCreateManyBuildingInput[]
    skipDuplicates?: boolean
  }

  export type StadiumInfoCreateWithoutBuildingInput = {
    id?: string
    capacity: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type StadiumInfoUncheckedCreateWithoutBuildingInput = {
    id?: string
    capacity: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type StadiumInfoCreateOrConnectWithoutBuildingInput = {
    where: StadiumInfoWhereUniqueInput
    create: XOR<StadiumInfoCreateWithoutBuildingInput, StadiumInfoUncheckedCreateWithoutBuildingInput>
  }

  export type BuildingTypeUpsertWithoutBuildingsInput = {
    update: XOR<BuildingTypeUpdateWithoutBuildingsInput, BuildingTypeUncheckedUpdateWithoutBuildingsInput>
    create: XOR<BuildingTypeCreateWithoutBuildingsInput, BuildingTypeUncheckedCreateWithoutBuildingsInput>
    where?: BuildingTypeWhereInput
  }

  export type BuildingTypeUpdateToOneWithWhereWithoutBuildingsInput = {
    where?: BuildingTypeWhereInput
    data: XOR<BuildingTypeUpdateWithoutBuildingsInput, BuildingTypeUncheckedUpdateWithoutBuildingsInput>
  }

  export type BuildingTypeUpdateWithoutBuildingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: BuildingTypeI18nUpdateManyWithoutBuildingTypeNestedInput
  }

  export type BuildingTypeUncheckedUpdateWithoutBuildingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: BuildingTypeI18nUncheckedUpdateManyWithoutBuildingTypeNestedInput
  }

  export type LocationUpsertWithoutBuildingsInput = {
    update: XOR<LocationUpdateWithoutBuildingsInput, LocationUncheckedUpdateWithoutBuildingsInput>
    create: XOR<LocationCreateWithoutBuildingsInput, LocationUncheckedCreateWithoutBuildingsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutBuildingsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutBuildingsInput, LocationUncheckedUpdateWithoutBuildingsInput>
  }

  export type LocationUpdateWithoutBuildingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUpdateManyWithoutLocationNestedInput
    region?: RegionUpdateOneRequiredWithoutLocationsNestedInput
    routesFrom?: RouteUpdateManyWithoutLocationFromNestedInput
    routesTo?: RouteUpdateManyWithoutLocationToNestedInput
    teams?: TeamLocationUpdateManyWithoutLocationNestedInput
    townInfo?: TownInformationUpdateOneWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutBuildingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    regionId?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUncheckedUpdateManyWithoutLocationNestedInput
    routesFrom?: RouteUncheckedUpdateManyWithoutLocationFromNestedInput
    routesTo?: RouteUncheckedUpdateManyWithoutLocationToNestedInput
    teams?: TeamLocationUncheckedUpdateManyWithoutLocationNestedInput
    townInfo?: TownInformationUncheckedUpdateOneWithoutLocationNestedInput
  }

  export type BuildingI18nUpsertWithWhereUniqueWithoutBuildingInput = {
    where: BuildingI18nWhereUniqueInput
    update: XOR<BuildingI18nUpdateWithoutBuildingInput, BuildingI18nUncheckedUpdateWithoutBuildingInput>
    create: XOR<BuildingI18nCreateWithoutBuildingInput, BuildingI18nUncheckedCreateWithoutBuildingInput>
  }

  export type BuildingI18nUpdateWithWhereUniqueWithoutBuildingInput = {
    where: BuildingI18nWhereUniqueInput
    data: XOR<BuildingI18nUpdateWithoutBuildingInput, BuildingI18nUncheckedUpdateWithoutBuildingInput>
  }

  export type BuildingI18nUpdateManyWithWhereWithoutBuildingInput = {
    where: BuildingI18nScalarWhereInput
    data: XOR<BuildingI18nUpdateManyMutationInput, BuildingI18nUncheckedUpdateManyWithoutBuildingInput>
  }

  export type BuildingI18nScalarWhereInput = {
    AND?: BuildingI18nScalarWhereInput | BuildingI18nScalarWhereInput[]
    OR?: BuildingI18nScalarWhereInput[]
    NOT?: BuildingI18nScalarWhereInput | BuildingI18nScalarWhereInput[]
    id?: StringFilter<"BuildingI18n"> | string
    buildingId?: StringFilter<"BuildingI18n"> | string
    language?: StringFilter<"BuildingI18n"> | string
    name?: StringFilter<"BuildingI18n"> | string
    description?: StringNullableFilter<"BuildingI18n"> | string | null
    updatedAt?: DateTimeFilter<"BuildingI18n"> | Date | string
    createdAt?: DateTimeFilter<"BuildingI18n"> | Date | string
  }

  export type StadiumInfoUpsertWithoutBuildingInput = {
    update: XOR<StadiumInfoUpdateWithoutBuildingInput, StadiumInfoUncheckedUpdateWithoutBuildingInput>
    create: XOR<StadiumInfoCreateWithoutBuildingInput, StadiumInfoUncheckedCreateWithoutBuildingInput>
    where?: StadiumInfoWhereInput
  }

  export type StadiumInfoUpdateToOneWithWhereWithoutBuildingInput = {
    where?: StadiumInfoWhereInput
    data: XOR<StadiumInfoUpdateWithoutBuildingInput, StadiumInfoUncheckedUpdateWithoutBuildingInput>
  }

  export type StadiumInfoUpdateWithoutBuildingInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StadiumInfoUncheckedUpdateWithoutBuildingInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingCreateWithoutI18nInput = {
    id?: string
    updatedAt?: Date | string
    createdAt?: Date | string
    buildingType: BuildingTypeCreateNestedOneWithoutBuildingsInput
    location: LocationCreateNestedOneWithoutBuildingsInput
    stadiumInfo?: StadiumInfoCreateNestedOneWithoutBuildingInput
  }

  export type BuildingUncheckedCreateWithoutI18nInput = {
    id?: string
    buildingTypeId: string
    locationId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    stadiumInfo?: StadiumInfoUncheckedCreateNestedOneWithoutBuildingInput
  }

  export type BuildingCreateOrConnectWithoutI18nInput = {
    where: BuildingWhereUniqueInput
    create: XOR<BuildingCreateWithoutI18nInput, BuildingUncheckedCreateWithoutI18nInput>
  }

  export type BuildingUpsertWithoutI18nInput = {
    update: XOR<BuildingUpdateWithoutI18nInput, BuildingUncheckedUpdateWithoutI18nInput>
    create: XOR<BuildingCreateWithoutI18nInput, BuildingUncheckedCreateWithoutI18nInput>
    where?: BuildingWhereInput
  }

  export type BuildingUpdateToOneWithWhereWithoutI18nInput = {
    where?: BuildingWhereInput
    data: XOR<BuildingUpdateWithoutI18nInput, BuildingUncheckedUpdateWithoutI18nInput>
  }

  export type BuildingUpdateWithoutI18nInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buildingType?: BuildingTypeUpdateOneRequiredWithoutBuildingsNestedInput
    location?: LocationUpdateOneRequiredWithoutBuildingsNestedInput
    stadiumInfo?: StadiumInfoUpdateOneWithoutBuildingNestedInput
  }

  export type BuildingUncheckedUpdateWithoutI18nInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingTypeId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stadiumInfo?: StadiumInfoUncheckedUpdateOneWithoutBuildingNestedInput
  }

  export type BuildingCreateWithoutStadiumInfoInput = {
    id?: string
    updatedAt?: Date | string
    createdAt?: Date | string
    buildingType: BuildingTypeCreateNestedOneWithoutBuildingsInput
    location: LocationCreateNestedOneWithoutBuildingsInput
    i18n?: BuildingI18nCreateNestedManyWithoutBuildingInput
  }

  export type BuildingUncheckedCreateWithoutStadiumInfoInput = {
    id?: string
    buildingTypeId: string
    locationId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: BuildingI18nUncheckedCreateNestedManyWithoutBuildingInput
  }

  export type BuildingCreateOrConnectWithoutStadiumInfoInput = {
    where: BuildingWhereUniqueInput
    create: XOR<BuildingCreateWithoutStadiumInfoInput, BuildingUncheckedCreateWithoutStadiumInfoInput>
  }

  export type BuildingUpsertWithoutStadiumInfoInput = {
    update: XOR<BuildingUpdateWithoutStadiumInfoInput, BuildingUncheckedUpdateWithoutStadiumInfoInput>
    create: XOR<BuildingCreateWithoutStadiumInfoInput, BuildingUncheckedCreateWithoutStadiumInfoInput>
    where?: BuildingWhereInput
  }

  export type BuildingUpdateToOneWithWhereWithoutStadiumInfoInput = {
    where?: BuildingWhereInput
    data: XOR<BuildingUpdateWithoutStadiumInfoInput, BuildingUncheckedUpdateWithoutStadiumInfoInput>
  }

  export type BuildingUpdateWithoutStadiumInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buildingType?: BuildingTypeUpdateOneRequiredWithoutBuildingsNestedInput
    location?: LocationUpdateOneRequiredWithoutBuildingsNestedInput
    i18n?: BuildingI18nUpdateManyWithoutBuildingNestedInput
  }

  export type BuildingUncheckedUpdateWithoutStadiumInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingTypeId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: BuildingI18nUncheckedUpdateManyWithoutBuildingNestedInput
  }

  export type RaceI18nCreateWithoutRaceInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RaceI18nUncheckedCreateWithoutRaceInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RaceI18nCreateOrConnectWithoutRaceInput = {
    where: RaceI18nWhereUniqueInput
    create: XOR<RaceI18nCreateWithoutRaceInput, RaceI18nUncheckedCreateWithoutRaceInput>
  }

  export type RaceI18nCreateManyRaceInputEnvelope = {
    data: RaceI18nCreateManyRaceInput | RaceI18nCreateManyRaceInput[]
    skipDuplicates?: boolean
  }

  export type CultureCreateWithoutRaceInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: CultureI18nCreateNestedManyWithoutCultureInput
    nameModels?: NameModelCreateNestedManyWithoutCultureInput
    regionPopulations?: RegionPopulationCreateNestedManyWithoutCultureInput
  }

  export type CultureUncheckedCreateWithoutRaceInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: CultureI18nUncheckedCreateNestedManyWithoutCultureInput
    nameModels?: NameModelUncheckedCreateNestedManyWithoutCultureInput
    regionPopulations?: RegionPopulationUncheckedCreateNestedManyWithoutCultureInput
  }

  export type CultureCreateOrConnectWithoutRaceInput = {
    where: CultureWhereUniqueInput
    create: XOR<CultureCreateWithoutRaceInput, CultureUncheckedCreateWithoutRaceInput>
  }

  export type CultureCreateManyRaceInputEnvelope = {
    data: CultureCreateManyRaceInput | CultureCreateManyRaceInput[]
    skipDuplicates?: boolean
  }

  export type PersonCreateWithoutRaceInput = {
    id?: string
    name: string
    shortName: string
    updatedAt?: Date | string
    createdAt?: Date | string
    playercharacteristics?: PlayerCharacteristicsCreateNestedOneWithoutPlayerInput
    PersonContract?: PersonContractCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutRaceInput = {
    id?: string
    name: string
    shortName: string
    updatedAt?: Date | string
    createdAt?: Date | string
    playercharacteristics?: PlayerCharacteristicsUncheckedCreateNestedOneWithoutPlayerInput
    PersonContract?: PersonContractUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutRaceInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutRaceInput, PersonUncheckedCreateWithoutRaceInput>
  }

  export type PersonCreateManyRaceInputEnvelope = {
    data: PersonCreateManyRaceInput | PersonCreateManyRaceInput[]
    skipDuplicates?: boolean
  }

  export type RaceI18nUpsertWithWhereUniqueWithoutRaceInput = {
    where: RaceI18nWhereUniqueInput
    update: XOR<RaceI18nUpdateWithoutRaceInput, RaceI18nUncheckedUpdateWithoutRaceInput>
    create: XOR<RaceI18nCreateWithoutRaceInput, RaceI18nUncheckedCreateWithoutRaceInput>
  }

  export type RaceI18nUpdateWithWhereUniqueWithoutRaceInput = {
    where: RaceI18nWhereUniqueInput
    data: XOR<RaceI18nUpdateWithoutRaceInput, RaceI18nUncheckedUpdateWithoutRaceInput>
  }

  export type RaceI18nUpdateManyWithWhereWithoutRaceInput = {
    where: RaceI18nScalarWhereInput
    data: XOR<RaceI18nUpdateManyMutationInput, RaceI18nUncheckedUpdateManyWithoutRaceInput>
  }

  export type RaceI18nScalarWhereInput = {
    AND?: RaceI18nScalarWhereInput | RaceI18nScalarWhereInput[]
    OR?: RaceI18nScalarWhereInput[]
    NOT?: RaceI18nScalarWhereInput | RaceI18nScalarWhereInput[]
    id?: StringFilter<"RaceI18n"> | string
    raceId?: StringFilter<"RaceI18n"> | string
    language?: StringFilter<"RaceI18n"> | string
    name?: StringFilter<"RaceI18n"> | string
    updatedAt?: DateTimeFilter<"RaceI18n"> | Date | string
    createdAt?: DateTimeFilter<"RaceI18n"> | Date | string
  }

  export type CultureUpsertWithWhereUniqueWithoutRaceInput = {
    where: CultureWhereUniqueInput
    update: XOR<CultureUpdateWithoutRaceInput, CultureUncheckedUpdateWithoutRaceInput>
    create: XOR<CultureCreateWithoutRaceInput, CultureUncheckedCreateWithoutRaceInput>
  }

  export type CultureUpdateWithWhereUniqueWithoutRaceInput = {
    where: CultureWhereUniqueInput
    data: XOR<CultureUpdateWithoutRaceInput, CultureUncheckedUpdateWithoutRaceInput>
  }

  export type CultureUpdateManyWithWhereWithoutRaceInput = {
    where: CultureScalarWhereInput
    data: XOR<CultureUpdateManyMutationInput, CultureUncheckedUpdateManyWithoutRaceInput>
  }

  export type CultureScalarWhereInput = {
    AND?: CultureScalarWhereInput | CultureScalarWhereInput[]
    OR?: CultureScalarWhereInput[]
    NOT?: CultureScalarWhereInput | CultureScalarWhereInput[]
    id?: StringFilter<"Culture"> | string
    raceId?: StringFilter<"Culture"> | string
    updatedAt?: DateTimeFilter<"Culture"> | Date | string
    createdAt?: DateTimeFilter<"Culture"> | Date | string
  }

  export type PersonUpsertWithWhereUniqueWithoutRaceInput = {
    where: PersonWhereUniqueInput
    update: XOR<PersonUpdateWithoutRaceInput, PersonUncheckedUpdateWithoutRaceInput>
    create: XOR<PersonCreateWithoutRaceInput, PersonUncheckedCreateWithoutRaceInput>
  }

  export type PersonUpdateWithWhereUniqueWithoutRaceInput = {
    where: PersonWhereUniqueInput
    data: XOR<PersonUpdateWithoutRaceInput, PersonUncheckedUpdateWithoutRaceInput>
  }

  export type PersonUpdateManyWithWhereWithoutRaceInput = {
    where: PersonScalarWhereInput
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyWithoutRaceInput>
  }

  export type PersonScalarWhereInput = {
    AND?: PersonScalarWhereInput | PersonScalarWhereInput[]
    OR?: PersonScalarWhereInput[]
    NOT?: PersonScalarWhereInput | PersonScalarWhereInput[]
    id?: StringFilter<"Person"> | string
    name?: StringFilter<"Person"> | string
    shortName?: StringFilter<"Person"> | string
    raceId?: StringFilter<"Person"> | string
    updatedAt?: DateTimeFilter<"Person"> | Date | string
    createdAt?: DateTimeFilter<"Person"> | Date | string
  }

  export type RaceCreateWithoutI18nInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    cultures?: CultureCreateNestedManyWithoutRaceInput
    persons?: PersonCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateWithoutI18nInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    cultures?: CultureUncheckedCreateNestedManyWithoutRaceInput
    persons?: PersonUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceCreateOrConnectWithoutI18nInput = {
    where: RaceWhereUniqueInput
    create: XOR<RaceCreateWithoutI18nInput, RaceUncheckedCreateWithoutI18nInput>
  }

  export type RaceUpsertWithoutI18nInput = {
    update: XOR<RaceUpdateWithoutI18nInput, RaceUncheckedUpdateWithoutI18nInput>
    create: XOR<RaceCreateWithoutI18nInput, RaceUncheckedCreateWithoutI18nInput>
    where?: RaceWhereInput
  }

  export type RaceUpdateToOneWithWhereWithoutI18nInput = {
    where?: RaceWhereInput
    data: XOR<RaceUpdateWithoutI18nInput, RaceUncheckedUpdateWithoutI18nInput>
  }

  export type RaceUpdateWithoutI18nInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cultures?: CultureUpdateManyWithoutRaceNestedInput
    persons?: PersonUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateWithoutI18nInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cultures?: CultureUncheckedUpdateManyWithoutRaceNestedInput
    persons?: PersonUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type RaceCreateWithoutCulturesInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: RaceI18nCreateNestedManyWithoutRaceInput
    persons?: PersonCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateWithoutCulturesInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: RaceI18nUncheckedCreateNestedManyWithoutRaceInput
    persons?: PersonUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceCreateOrConnectWithoutCulturesInput = {
    where: RaceWhereUniqueInput
    create: XOR<RaceCreateWithoutCulturesInput, RaceUncheckedCreateWithoutCulturesInput>
  }

  export type CultureI18nCreateWithoutCultureInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type CultureI18nUncheckedCreateWithoutCultureInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type CultureI18nCreateOrConnectWithoutCultureInput = {
    where: CultureI18nWhereUniqueInput
    create: XOR<CultureI18nCreateWithoutCultureInput, CultureI18nUncheckedCreateWithoutCultureInput>
  }

  export type CultureI18nCreateManyCultureInputEnvelope = {
    data: CultureI18nCreateManyCultureInput | CultureI18nCreateManyCultureInput[]
    skipDuplicates?: boolean
  }

  export type NameModelCreateWithoutCultureInput = {
    id?: string
    sex: $Enums.SexType
    firstnameTemplate: string
    lastnameTemplate: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type NameModelUncheckedCreateWithoutCultureInput = {
    id?: string
    sex: $Enums.SexType
    firstnameTemplate: string
    lastnameTemplate: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type NameModelCreateOrConnectWithoutCultureInput = {
    where: NameModelWhereUniqueInput
    create: XOR<NameModelCreateWithoutCultureInput, NameModelUncheckedCreateWithoutCultureInput>
  }

  export type NameModelCreateManyCultureInputEnvelope = {
    data: NameModelCreateManyCultureInput | NameModelCreateManyCultureInput[]
    skipDuplicates?: boolean
  }

  export type RegionPopulationCreateWithoutCultureInput = {
    id?: string
    percentage: number
    updatedAt?: Date | string
    createdAt?: Date | string
    region: RegionCreateNestedOneWithoutRegionPopulationsInput
  }

  export type RegionPopulationUncheckedCreateWithoutCultureInput = {
    id?: string
    regionId: string
    percentage: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RegionPopulationCreateOrConnectWithoutCultureInput = {
    where: RegionPopulationWhereUniqueInput
    create: XOR<RegionPopulationCreateWithoutCultureInput, RegionPopulationUncheckedCreateWithoutCultureInput>
  }

  export type RegionPopulationCreateManyCultureInputEnvelope = {
    data: RegionPopulationCreateManyCultureInput | RegionPopulationCreateManyCultureInput[]
    skipDuplicates?: boolean
  }

  export type RaceUpsertWithoutCulturesInput = {
    update: XOR<RaceUpdateWithoutCulturesInput, RaceUncheckedUpdateWithoutCulturesInput>
    create: XOR<RaceCreateWithoutCulturesInput, RaceUncheckedCreateWithoutCulturesInput>
    where?: RaceWhereInput
  }

  export type RaceUpdateToOneWithWhereWithoutCulturesInput = {
    where?: RaceWhereInput
    data: XOR<RaceUpdateWithoutCulturesInput, RaceUncheckedUpdateWithoutCulturesInput>
  }

  export type RaceUpdateWithoutCulturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: RaceI18nUpdateManyWithoutRaceNestedInput
    persons?: PersonUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateWithoutCulturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: RaceI18nUncheckedUpdateManyWithoutRaceNestedInput
    persons?: PersonUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type CultureI18nUpsertWithWhereUniqueWithoutCultureInput = {
    where: CultureI18nWhereUniqueInput
    update: XOR<CultureI18nUpdateWithoutCultureInput, CultureI18nUncheckedUpdateWithoutCultureInput>
    create: XOR<CultureI18nCreateWithoutCultureInput, CultureI18nUncheckedCreateWithoutCultureInput>
  }

  export type CultureI18nUpdateWithWhereUniqueWithoutCultureInput = {
    where: CultureI18nWhereUniqueInput
    data: XOR<CultureI18nUpdateWithoutCultureInput, CultureI18nUncheckedUpdateWithoutCultureInput>
  }

  export type CultureI18nUpdateManyWithWhereWithoutCultureInput = {
    where: CultureI18nScalarWhereInput
    data: XOR<CultureI18nUpdateManyMutationInput, CultureI18nUncheckedUpdateManyWithoutCultureInput>
  }

  export type CultureI18nScalarWhereInput = {
    AND?: CultureI18nScalarWhereInput | CultureI18nScalarWhereInput[]
    OR?: CultureI18nScalarWhereInput[]
    NOT?: CultureI18nScalarWhereInput | CultureI18nScalarWhereInput[]
    id?: StringFilter<"CultureI18n"> | string
    cultureId?: StringFilter<"CultureI18n"> | string
    language?: StringFilter<"CultureI18n"> | string
    name?: StringFilter<"CultureI18n"> | string
    updatedAt?: DateTimeFilter<"CultureI18n"> | Date | string
    createdAt?: DateTimeFilter<"CultureI18n"> | Date | string
  }

  export type NameModelUpsertWithWhereUniqueWithoutCultureInput = {
    where: NameModelWhereUniqueInput
    update: XOR<NameModelUpdateWithoutCultureInput, NameModelUncheckedUpdateWithoutCultureInput>
    create: XOR<NameModelCreateWithoutCultureInput, NameModelUncheckedCreateWithoutCultureInput>
  }

  export type NameModelUpdateWithWhereUniqueWithoutCultureInput = {
    where: NameModelWhereUniqueInput
    data: XOR<NameModelUpdateWithoutCultureInput, NameModelUncheckedUpdateWithoutCultureInput>
  }

  export type NameModelUpdateManyWithWhereWithoutCultureInput = {
    where: NameModelScalarWhereInput
    data: XOR<NameModelUpdateManyMutationInput, NameModelUncheckedUpdateManyWithoutCultureInput>
  }

  export type NameModelScalarWhereInput = {
    AND?: NameModelScalarWhereInput | NameModelScalarWhereInput[]
    OR?: NameModelScalarWhereInput[]
    NOT?: NameModelScalarWhereInput | NameModelScalarWhereInput[]
    id?: StringFilter<"NameModel"> | string
    cultureId?: StringFilter<"NameModel"> | string
    sex?: EnumSexTypeFilter<"NameModel"> | $Enums.SexType
    firstnameTemplate?: StringFilter<"NameModel"> | string
    lastnameTemplate?: StringFilter<"NameModel"> | string
    updatedAt?: DateTimeFilter<"NameModel"> | Date | string
    createdAt?: DateTimeFilter<"NameModel"> | Date | string
  }

  export type RegionPopulationUpsertWithWhereUniqueWithoutCultureInput = {
    where: RegionPopulationWhereUniqueInput
    update: XOR<RegionPopulationUpdateWithoutCultureInput, RegionPopulationUncheckedUpdateWithoutCultureInput>
    create: XOR<RegionPopulationCreateWithoutCultureInput, RegionPopulationUncheckedCreateWithoutCultureInput>
  }

  export type RegionPopulationUpdateWithWhereUniqueWithoutCultureInput = {
    where: RegionPopulationWhereUniqueInput
    data: XOR<RegionPopulationUpdateWithoutCultureInput, RegionPopulationUncheckedUpdateWithoutCultureInput>
  }

  export type RegionPopulationUpdateManyWithWhereWithoutCultureInput = {
    where: RegionPopulationScalarWhereInput
    data: XOR<RegionPopulationUpdateManyMutationInput, RegionPopulationUncheckedUpdateManyWithoutCultureInput>
  }

  export type CultureCreateWithoutI18nInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    race: RaceCreateNestedOneWithoutCulturesInput
    nameModels?: NameModelCreateNestedManyWithoutCultureInput
    regionPopulations?: RegionPopulationCreateNestedManyWithoutCultureInput
  }

  export type CultureUncheckedCreateWithoutI18nInput = {
    id: string
    raceId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    nameModels?: NameModelUncheckedCreateNestedManyWithoutCultureInput
    regionPopulations?: RegionPopulationUncheckedCreateNestedManyWithoutCultureInput
  }

  export type CultureCreateOrConnectWithoutI18nInput = {
    where: CultureWhereUniqueInput
    create: XOR<CultureCreateWithoutI18nInput, CultureUncheckedCreateWithoutI18nInput>
  }

  export type CultureUpsertWithoutI18nInput = {
    update: XOR<CultureUpdateWithoutI18nInput, CultureUncheckedUpdateWithoutI18nInput>
    create: XOR<CultureCreateWithoutI18nInput, CultureUncheckedCreateWithoutI18nInput>
    where?: CultureWhereInput
  }

  export type CultureUpdateToOneWithWhereWithoutI18nInput = {
    where?: CultureWhereInput
    data: XOR<CultureUpdateWithoutI18nInput, CultureUncheckedUpdateWithoutI18nInput>
  }

  export type CultureUpdateWithoutI18nInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    race?: RaceUpdateOneRequiredWithoutCulturesNestedInput
    nameModels?: NameModelUpdateManyWithoutCultureNestedInput
    regionPopulations?: RegionPopulationUpdateManyWithoutCultureNestedInput
  }

  export type CultureUncheckedUpdateWithoutI18nInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nameModels?: NameModelUncheckedUpdateManyWithoutCultureNestedInput
    regionPopulations?: RegionPopulationUncheckedUpdateManyWithoutCultureNestedInput
  }

  export type RegionCreateWithoutRegionPopulationsInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: RegionI18nCreateNestedManyWithoutRegionInput
    locations?: LocationCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutRegionPopulationsInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: RegionI18nUncheckedCreateNestedManyWithoutRegionInput
    locations?: LocationUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutRegionPopulationsInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutRegionPopulationsInput, RegionUncheckedCreateWithoutRegionPopulationsInput>
  }

  export type CultureCreateWithoutRegionPopulationsInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    race: RaceCreateNestedOneWithoutCulturesInput
    i18n?: CultureI18nCreateNestedManyWithoutCultureInput
    nameModels?: NameModelCreateNestedManyWithoutCultureInput
  }

  export type CultureUncheckedCreateWithoutRegionPopulationsInput = {
    id: string
    raceId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: CultureI18nUncheckedCreateNestedManyWithoutCultureInput
    nameModels?: NameModelUncheckedCreateNestedManyWithoutCultureInput
  }

  export type CultureCreateOrConnectWithoutRegionPopulationsInput = {
    where: CultureWhereUniqueInput
    create: XOR<CultureCreateWithoutRegionPopulationsInput, CultureUncheckedCreateWithoutRegionPopulationsInput>
  }

  export type RegionUpsertWithoutRegionPopulationsInput = {
    update: XOR<RegionUpdateWithoutRegionPopulationsInput, RegionUncheckedUpdateWithoutRegionPopulationsInput>
    create: XOR<RegionCreateWithoutRegionPopulationsInput, RegionUncheckedCreateWithoutRegionPopulationsInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutRegionPopulationsInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutRegionPopulationsInput, RegionUncheckedUpdateWithoutRegionPopulationsInput>
  }

  export type RegionUpdateWithoutRegionPopulationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: RegionI18nUpdateManyWithoutRegionNestedInput
    locations?: LocationUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutRegionPopulationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: RegionI18nUncheckedUpdateManyWithoutRegionNestedInput
    locations?: LocationUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type CultureUpsertWithoutRegionPopulationsInput = {
    update: XOR<CultureUpdateWithoutRegionPopulationsInput, CultureUncheckedUpdateWithoutRegionPopulationsInput>
    create: XOR<CultureCreateWithoutRegionPopulationsInput, CultureUncheckedCreateWithoutRegionPopulationsInput>
    where?: CultureWhereInput
  }

  export type CultureUpdateToOneWithWhereWithoutRegionPopulationsInput = {
    where?: CultureWhereInput
    data: XOR<CultureUpdateWithoutRegionPopulationsInput, CultureUncheckedUpdateWithoutRegionPopulationsInput>
  }

  export type CultureUpdateWithoutRegionPopulationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    race?: RaceUpdateOneRequiredWithoutCulturesNestedInput
    i18n?: CultureI18nUpdateManyWithoutCultureNestedInput
    nameModels?: NameModelUpdateManyWithoutCultureNestedInput
  }

  export type CultureUncheckedUpdateWithoutRegionPopulationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: CultureI18nUncheckedUpdateManyWithoutCultureNestedInput
    nameModels?: NameModelUncheckedUpdateManyWithoutCultureNestedInput
  }

  export type CultureCreateWithoutNameModelsInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    race: RaceCreateNestedOneWithoutCulturesInput
    i18n?: CultureI18nCreateNestedManyWithoutCultureInput
    regionPopulations?: RegionPopulationCreateNestedManyWithoutCultureInput
  }

  export type CultureUncheckedCreateWithoutNameModelsInput = {
    id: string
    raceId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: CultureI18nUncheckedCreateNestedManyWithoutCultureInput
    regionPopulations?: RegionPopulationUncheckedCreateNestedManyWithoutCultureInput
  }

  export type CultureCreateOrConnectWithoutNameModelsInput = {
    where: CultureWhereUniqueInput
    create: XOR<CultureCreateWithoutNameModelsInput, CultureUncheckedCreateWithoutNameModelsInput>
  }

  export type CultureUpsertWithoutNameModelsInput = {
    update: XOR<CultureUpdateWithoutNameModelsInput, CultureUncheckedUpdateWithoutNameModelsInput>
    create: XOR<CultureCreateWithoutNameModelsInput, CultureUncheckedCreateWithoutNameModelsInput>
    where?: CultureWhereInput
  }

  export type CultureUpdateToOneWithWhereWithoutNameModelsInput = {
    where?: CultureWhereInput
    data: XOR<CultureUpdateWithoutNameModelsInput, CultureUncheckedUpdateWithoutNameModelsInput>
  }

  export type CultureUpdateWithoutNameModelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    race?: RaceUpdateOneRequiredWithoutCulturesNestedInput
    i18n?: CultureI18nUpdateManyWithoutCultureNestedInput
    regionPopulations?: RegionPopulationUpdateManyWithoutCultureNestedInput
  }

  export type CultureUncheckedUpdateWithoutNameModelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: CultureI18nUncheckedUpdateManyWithoutCultureNestedInput
    regionPopulations?: RegionPopulationUncheckedUpdateManyWithoutCultureNestedInput
  }

  export type NameComponentValueCreateWithoutKeyInput = {
    id?: string
    value: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type NameComponentValueUncheckedCreateWithoutKeyInput = {
    id?: string
    value: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type NameComponentValueCreateOrConnectWithoutKeyInput = {
    where: NameComponentValueWhereUniqueInput
    create: XOR<NameComponentValueCreateWithoutKeyInput, NameComponentValueUncheckedCreateWithoutKeyInput>
  }

  export type NameComponentValueCreateManyKeyInputEnvelope = {
    data: NameComponentValueCreateManyKeyInput | NameComponentValueCreateManyKeyInput[]
    skipDuplicates?: boolean
  }

  export type NameComponentValueUpsertWithWhereUniqueWithoutKeyInput = {
    where: NameComponentValueWhereUniqueInput
    update: XOR<NameComponentValueUpdateWithoutKeyInput, NameComponentValueUncheckedUpdateWithoutKeyInput>
    create: XOR<NameComponentValueCreateWithoutKeyInput, NameComponentValueUncheckedCreateWithoutKeyInput>
  }

  export type NameComponentValueUpdateWithWhereUniqueWithoutKeyInput = {
    where: NameComponentValueWhereUniqueInput
    data: XOR<NameComponentValueUpdateWithoutKeyInput, NameComponentValueUncheckedUpdateWithoutKeyInput>
  }

  export type NameComponentValueUpdateManyWithWhereWithoutKeyInput = {
    where: NameComponentValueScalarWhereInput
    data: XOR<NameComponentValueUpdateManyMutationInput, NameComponentValueUncheckedUpdateManyWithoutKeyInput>
  }

  export type NameComponentValueScalarWhereInput = {
    AND?: NameComponentValueScalarWhereInput | NameComponentValueScalarWhereInput[]
    OR?: NameComponentValueScalarWhereInput[]
    NOT?: NameComponentValueScalarWhereInput | NameComponentValueScalarWhereInput[]
    id?: StringFilter<"NameComponentValue"> | string
    keyId?: StringFilter<"NameComponentValue"> | string
    value?: StringFilter<"NameComponentValue"> | string
    updatedAt?: DateTimeFilter<"NameComponentValue"> | Date | string
    createdAt?: DateTimeFilter<"NameComponentValue"> | Date | string
  }

  export type NameComponentKeyCreateWithoutValuesInput = {
    id?: string
    key: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type NameComponentKeyUncheckedCreateWithoutValuesInput = {
    id?: string
    key: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type NameComponentKeyCreateOrConnectWithoutValuesInput = {
    where: NameComponentKeyWhereUniqueInput
    create: XOR<NameComponentKeyCreateWithoutValuesInput, NameComponentKeyUncheckedCreateWithoutValuesInput>
  }

  export type NameComponentKeyUpsertWithoutValuesInput = {
    update: XOR<NameComponentKeyUpdateWithoutValuesInput, NameComponentKeyUncheckedUpdateWithoutValuesInput>
    create: XOR<NameComponentKeyCreateWithoutValuesInput, NameComponentKeyUncheckedCreateWithoutValuesInput>
    where?: NameComponentKeyWhereInput
  }

  export type NameComponentKeyUpdateToOneWithWhereWithoutValuesInput = {
    where?: NameComponentKeyWhereInput
    data: XOR<NameComponentKeyUpdateWithoutValuesInput, NameComponentKeyUncheckedUpdateWithoutValuesInput>
  }

  export type NameComponentKeyUpdateWithoutValuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameComponentKeyUncheckedUpdateWithoutValuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RaceCreateWithoutPersonsInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: RaceI18nCreateNestedManyWithoutRaceInput
    cultures?: CultureCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateWithoutPersonsInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: RaceI18nUncheckedCreateNestedManyWithoutRaceInput
    cultures?: CultureUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceCreateOrConnectWithoutPersonsInput = {
    where: RaceWhereUniqueInput
    create: XOR<RaceCreateWithoutPersonsInput, RaceUncheckedCreateWithoutPersonsInput>
  }

  export type PlayerCharacteristicsCreateWithoutPlayerInput = {
    id?: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PlayerCharacteristicsUncheckedCreateWithoutPlayerInput = {
    id?: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PlayerCharacteristicsCreateOrConnectWithoutPlayerInput = {
    where: PlayerCharacteristicsWhereUniqueInput
    create: XOR<PlayerCharacteristicsCreateWithoutPlayerInput, PlayerCharacteristicsUncheckedCreateWithoutPlayerInput>
  }

  export type PersonContractCreateWithoutPersonInput = {
    id?: string
    contractType: $Enums.ContractType
    updatedAt?: Date | string
    createdAt?: Date | string
    team: TeamCreateNestedOneWithoutPersonContractInput
  }

  export type PersonContractUncheckedCreateWithoutPersonInput = {
    id?: string
    teamId: string
    contractType: $Enums.ContractType
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PersonContractCreateOrConnectWithoutPersonInput = {
    where: PersonContractWhereUniqueInput
    create: XOR<PersonContractCreateWithoutPersonInput, PersonContractUncheckedCreateWithoutPersonInput>
  }

  export type PersonContractCreateManyPersonInputEnvelope = {
    data: PersonContractCreateManyPersonInput | PersonContractCreateManyPersonInput[]
    skipDuplicates?: boolean
  }

  export type RaceUpsertWithoutPersonsInput = {
    update: XOR<RaceUpdateWithoutPersonsInput, RaceUncheckedUpdateWithoutPersonsInput>
    create: XOR<RaceCreateWithoutPersonsInput, RaceUncheckedCreateWithoutPersonsInput>
    where?: RaceWhereInput
  }

  export type RaceUpdateToOneWithWhereWithoutPersonsInput = {
    where?: RaceWhereInput
    data: XOR<RaceUpdateWithoutPersonsInput, RaceUncheckedUpdateWithoutPersonsInput>
  }

  export type RaceUpdateWithoutPersonsInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: RaceI18nUpdateManyWithoutRaceNestedInput
    cultures?: CultureUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateWithoutPersonsInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: RaceI18nUncheckedUpdateManyWithoutRaceNestedInput
    cultures?: CultureUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type PlayerCharacteristicsUpsertWithoutPlayerInput = {
    update: XOR<PlayerCharacteristicsUpdateWithoutPlayerInput, PlayerCharacteristicsUncheckedUpdateWithoutPlayerInput>
    create: XOR<PlayerCharacteristicsCreateWithoutPlayerInput, PlayerCharacteristicsUncheckedCreateWithoutPlayerInput>
    where?: PlayerCharacteristicsWhereInput
  }

  export type PlayerCharacteristicsUpdateToOneWithWhereWithoutPlayerInput = {
    where?: PlayerCharacteristicsWhereInput
    data: XOR<PlayerCharacteristicsUpdateWithoutPlayerInput, PlayerCharacteristicsUncheckedUpdateWithoutPlayerInput>
  }

  export type PlayerCharacteristicsUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerCharacteristicsUncheckedUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonContractUpsertWithWhereUniqueWithoutPersonInput = {
    where: PersonContractWhereUniqueInput
    update: XOR<PersonContractUpdateWithoutPersonInput, PersonContractUncheckedUpdateWithoutPersonInput>
    create: XOR<PersonContractCreateWithoutPersonInput, PersonContractUncheckedCreateWithoutPersonInput>
  }

  export type PersonContractUpdateWithWhereUniqueWithoutPersonInput = {
    where: PersonContractWhereUniqueInput
    data: XOR<PersonContractUpdateWithoutPersonInput, PersonContractUncheckedUpdateWithoutPersonInput>
  }

  export type PersonContractUpdateManyWithWhereWithoutPersonInput = {
    where: PersonContractScalarWhereInput
    data: XOR<PersonContractUpdateManyMutationInput, PersonContractUncheckedUpdateManyWithoutPersonInput>
  }

  export type PersonContractScalarWhereInput = {
    AND?: PersonContractScalarWhereInput | PersonContractScalarWhereInput[]
    OR?: PersonContractScalarWhereInput[]
    NOT?: PersonContractScalarWhereInput | PersonContractScalarWhereInput[]
    id?: StringFilter<"PersonContract"> | string
    personId?: StringFilter<"PersonContract"> | string
    teamId?: StringFilter<"PersonContract"> | string
    contractType?: EnumContractTypeFilter<"PersonContract"> | $Enums.ContractType
    updatedAt?: DateTimeFilter<"PersonContract"> | Date | string
    createdAt?: DateTimeFilter<"PersonContract"> | Date | string
  }

  export type PersonCreateWithoutPlayercharacteristicsInput = {
    id?: string
    name: string
    shortName: string
    updatedAt?: Date | string
    createdAt?: Date | string
    race: RaceCreateNestedOneWithoutPersonsInput
    PersonContract?: PersonContractCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutPlayercharacteristicsInput = {
    id?: string
    name: string
    shortName: string
    raceId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    PersonContract?: PersonContractUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutPlayercharacteristicsInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutPlayercharacteristicsInput, PersonUncheckedCreateWithoutPlayercharacteristicsInput>
  }

  export type PersonUpsertWithoutPlayercharacteristicsInput = {
    update: XOR<PersonUpdateWithoutPlayercharacteristicsInput, PersonUncheckedUpdateWithoutPlayercharacteristicsInput>
    create: XOR<PersonCreateWithoutPlayercharacteristicsInput, PersonUncheckedCreateWithoutPlayercharacteristicsInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutPlayercharacteristicsInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutPlayercharacteristicsInput, PersonUncheckedUpdateWithoutPlayercharacteristicsInput>
  }

  export type PersonUpdateWithoutPlayercharacteristicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    race?: RaceUpdateOneRequiredWithoutPersonsNestedInput
    PersonContract?: PersonContractUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutPlayercharacteristicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    raceId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PersonContract?: PersonContractUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type UserCreateWithoutTeamsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    role?: string
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
  }

  export type TeamLocationCreateWithoutTeamInput = {
    id?: string
    updatedAt?: Date | string
    createdAt?: Date | string
    location: LocationCreateNestedOneWithoutTeamsInput
  }

  export type TeamLocationUncheckedCreateWithoutTeamInput = {
    id?: string
    locationId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type TeamLocationCreateOrConnectWithoutTeamInput = {
    where: TeamLocationWhereUniqueInput
    create: XOR<TeamLocationCreateWithoutTeamInput, TeamLocationUncheckedCreateWithoutTeamInput>
  }

  export type PersonContractCreateWithoutTeamInput = {
    id?: string
    contractType: $Enums.ContractType
    updatedAt?: Date | string
    createdAt?: Date | string
    person: PersonCreateNestedOneWithoutPersonContractInput
  }

  export type PersonContractUncheckedCreateWithoutTeamInput = {
    id?: string
    personId: string
    contractType: $Enums.ContractType
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PersonContractCreateOrConnectWithoutTeamInput = {
    where: PersonContractWhereUniqueInput
    create: XOR<PersonContractCreateWithoutTeamInput, PersonContractUncheckedCreateWithoutTeamInput>
  }

  export type PersonContractCreateManyTeamInputEnvelope = {
    data: PersonContractCreateManyTeamInput | PersonContractCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTeamsInput = {
    update: XOR<UserUpdateWithoutTeamsInput, UserUncheckedUpdateWithoutTeamsInput>
    create: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamsInput, UserUncheckedUpdateWithoutTeamsInput>
  }

  export type UserUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TeamLocationUpsertWithoutTeamInput = {
    update: XOR<TeamLocationUpdateWithoutTeamInput, TeamLocationUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamLocationCreateWithoutTeamInput, TeamLocationUncheckedCreateWithoutTeamInput>
    where?: TeamLocationWhereInput
  }

  export type TeamLocationUpdateToOneWithWhereWithoutTeamInput = {
    where?: TeamLocationWhereInput
    data: XOR<TeamLocationUpdateWithoutTeamInput, TeamLocationUncheckedUpdateWithoutTeamInput>
  }

  export type TeamLocationUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutTeamsNestedInput
  }

  export type TeamLocationUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonContractUpsertWithWhereUniqueWithoutTeamInput = {
    where: PersonContractWhereUniqueInput
    update: XOR<PersonContractUpdateWithoutTeamInput, PersonContractUncheckedUpdateWithoutTeamInput>
    create: XOR<PersonContractCreateWithoutTeamInput, PersonContractUncheckedCreateWithoutTeamInput>
  }

  export type PersonContractUpdateWithWhereUniqueWithoutTeamInput = {
    where: PersonContractWhereUniqueInput
    data: XOR<PersonContractUpdateWithoutTeamInput, PersonContractUncheckedUpdateWithoutTeamInput>
  }

  export type PersonContractUpdateManyWithWhereWithoutTeamInput = {
    where: PersonContractScalarWhereInput
    data: XOR<PersonContractUpdateManyMutationInput, PersonContractUncheckedUpdateManyWithoutTeamInput>
  }

  export type TeamCreateWithoutTeamLocationInput = {
    id?: string
    name: string
    shortName: string
    isActive: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
    owner?: UserCreateNestedOneWithoutTeamsInput
    PersonContract?: PersonContractCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutTeamLocationInput = {
    id?: string
    name: string
    shortName: string
    isActive: boolean
    ownerId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    PersonContract?: PersonContractUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutTeamLocationInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutTeamLocationInput, TeamUncheckedCreateWithoutTeamLocationInput>
  }

  export type LocationCreateWithoutTeamsInput = {
    id: string
    type: $Enums.LocationType
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nCreateNestedManyWithoutLocationInput
    buildings?: BuildingCreateNestedManyWithoutLocationInput
    region: RegionCreateNestedOneWithoutLocationsInput
    routesFrom?: RouteCreateNestedManyWithoutLocationFromInput
    routesTo?: RouteCreateNestedManyWithoutLocationToInput
    townInfo?: TownInformationCreateNestedOneWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutTeamsInput = {
    id: string
    type: $Enums.LocationType
    regionId: string
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
    i18n?: LocationI18nUncheckedCreateNestedManyWithoutLocationInput
    buildings?: BuildingUncheckedCreateNestedManyWithoutLocationInput
    routesFrom?: RouteUncheckedCreateNestedManyWithoutLocationFromInput
    routesTo?: RouteUncheckedCreateNestedManyWithoutLocationToInput
    townInfo?: TownInformationUncheckedCreateNestedOneWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutTeamsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutTeamsInput, LocationUncheckedCreateWithoutTeamsInput>
  }

  export type TeamUpsertWithoutTeamLocationInput = {
    update: XOR<TeamUpdateWithoutTeamLocationInput, TeamUncheckedUpdateWithoutTeamLocationInput>
    create: XOR<TeamCreateWithoutTeamLocationInput, TeamUncheckedCreateWithoutTeamLocationInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutTeamLocationInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutTeamLocationInput, TeamUncheckedUpdateWithoutTeamLocationInput>
  }

  export type TeamUpdateWithoutTeamLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutTeamsNestedInput
    PersonContract?: PersonContractUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutTeamLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PersonContract?: PersonContractUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type LocationUpsertWithoutTeamsInput = {
    update: XOR<LocationUpdateWithoutTeamsInput, LocationUncheckedUpdateWithoutTeamsInput>
    create: XOR<LocationCreateWithoutTeamsInput, LocationUncheckedCreateWithoutTeamsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutTeamsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutTeamsInput, LocationUncheckedUpdateWithoutTeamsInput>
  }

  export type LocationUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUpdateManyWithoutLocationNestedInput
    buildings?: BuildingUpdateManyWithoutLocationNestedInput
    region?: RegionUpdateOneRequiredWithoutLocationsNestedInput
    routesFrom?: RouteUpdateManyWithoutLocationFromNestedInput
    routesTo?: RouteUpdateManyWithoutLocationToNestedInput
    townInfo?: TownInformationUpdateOneWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    regionId?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUncheckedUpdateManyWithoutLocationNestedInput
    buildings?: BuildingUncheckedUpdateManyWithoutLocationNestedInput
    routesFrom?: RouteUncheckedUpdateManyWithoutLocationFromNestedInput
    routesTo?: RouteUncheckedUpdateManyWithoutLocationToNestedInput
    townInfo?: TownInformationUncheckedUpdateOneWithoutLocationNestedInput
  }

  export type PersonCreateWithoutPersonContractInput = {
    id?: string
    name: string
    shortName: string
    updatedAt?: Date | string
    createdAt?: Date | string
    race: RaceCreateNestedOneWithoutPersonsInput
    playercharacteristics?: PlayerCharacteristicsCreateNestedOneWithoutPlayerInput
  }

  export type PersonUncheckedCreateWithoutPersonContractInput = {
    id?: string
    name: string
    shortName: string
    raceId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    playercharacteristics?: PlayerCharacteristicsUncheckedCreateNestedOneWithoutPlayerInput
  }

  export type PersonCreateOrConnectWithoutPersonContractInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutPersonContractInput, PersonUncheckedCreateWithoutPersonContractInput>
  }

  export type TeamCreateWithoutPersonContractInput = {
    id?: string
    name: string
    shortName: string
    isActive: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
    owner?: UserCreateNestedOneWithoutTeamsInput
    teamLocation?: TeamLocationCreateNestedOneWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutPersonContractInput = {
    id?: string
    name: string
    shortName: string
    isActive: boolean
    ownerId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    teamLocation?: TeamLocationUncheckedCreateNestedOneWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutPersonContractInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutPersonContractInput, TeamUncheckedCreateWithoutPersonContractInput>
  }

  export type PersonUpsertWithoutPersonContractInput = {
    update: XOR<PersonUpdateWithoutPersonContractInput, PersonUncheckedUpdateWithoutPersonContractInput>
    create: XOR<PersonCreateWithoutPersonContractInput, PersonUncheckedCreateWithoutPersonContractInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutPersonContractInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutPersonContractInput, PersonUncheckedUpdateWithoutPersonContractInput>
  }

  export type PersonUpdateWithoutPersonContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    race?: RaceUpdateOneRequiredWithoutPersonsNestedInput
    playercharacteristics?: PlayerCharacteristicsUpdateOneWithoutPlayerNestedInput
  }

  export type PersonUncheckedUpdateWithoutPersonContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    raceId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playercharacteristics?: PlayerCharacteristicsUncheckedUpdateOneWithoutPlayerNestedInput
  }

  export type TeamUpsertWithoutPersonContractInput = {
    update: XOR<TeamUpdateWithoutPersonContractInput, TeamUncheckedUpdateWithoutPersonContractInput>
    create: XOR<TeamCreateWithoutPersonContractInput, TeamUncheckedCreateWithoutPersonContractInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutPersonContractInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutPersonContractInput, TeamUncheckedUpdateWithoutPersonContractInput>
  }

  export type TeamUpdateWithoutPersonContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutTeamsNestedInput
    teamLocation?: TeamLocationUpdateOneWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutPersonContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamLocation?: TeamLocationUncheckedUpdateOneWithoutTeamNestedInput
  }

  export type SessionCreateManyUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
  }

  export type AccountCreateManyUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type TeamCreateManyOwnerInput = {
    id?: string
    name: string
    shortName: string
    isActive: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamLocation?: TeamLocationUpdateOneWithoutTeamNestedInput
    PersonContract?: PersonContractUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamLocation?: TeamLocationUncheckedUpdateOneWithoutTeamNestedInput
    PersonContract?: PersonContractUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionI18nCreateManyRegionInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type LocationCreateManyRegionInput = {
    id: string
    type: $Enums.LocationType
    latitude: number
    longitude: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RegionPopulationCreateManyRegionInput = {
    id?: string
    cultureId: string
    percentage: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RegionI18nUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionI18nUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionI18nUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUpdateManyWithoutLocationNestedInput
    buildings?: BuildingUpdateManyWithoutLocationNestedInput
    routesFrom?: RouteUpdateManyWithoutLocationFromNestedInput
    routesTo?: RouteUpdateManyWithoutLocationToNestedInput
    teams?: TeamLocationUpdateManyWithoutLocationNestedInput
    townInfo?: TownInformationUpdateOneWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: LocationI18nUncheckedUpdateManyWithoutLocationNestedInput
    buildings?: BuildingUncheckedUpdateManyWithoutLocationNestedInput
    routesFrom?: RouteUncheckedUpdateManyWithoutLocationFromNestedInput
    routesTo?: RouteUncheckedUpdateManyWithoutLocationToNestedInput
    teams?: TeamLocationUncheckedUpdateManyWithoutLocationNestedInput
    townInfo?: TownInformationUncheckedUpdateOneWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLocationTypeFieldUpdateOperationsInput | $Enums.LocationType
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionPopulationUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    percentage?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    culture?: CultureUpdateOneRequiredWithoutRegionPopulationsNestedInput
  }

  export type RegionPopulationUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    cultureId?: StringFieldUpdateOperationsInput | string
    percentage?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionPopulationUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    cultureId?: StringFieldUpdateOperationsInput | string
    percentage?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationI18nCreateManyLocationInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingCreateManyLocationInput = {
    id?: string
    buildingTypeId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RouteCreateManyLocationFromInput = {
    id?: string
    type: $Enums.RouteType
    toId: string
    distance: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RouteCreateManyLocationToInput = {
    id?: string
    type: $Enums.RouteType
    fromId: string
    distance: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type TeamLocationCreateManyLocationInput = {
    id?: string
    teamId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type LocationI18nUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationI18nUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationI18nUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buildingType?: BuildingTypeUpdateOneRequiredWithoutBuildingsNestedInput
    i18n?: BuildingI18nUpdateManyWithoutBuildingNestedInput
    stadiumInfo?: StadiumInfoUpdateOneWithoutBuildingNestedInput
  }

  export type BuildingUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingTypeId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: BuildingI18nUncheckedUpdateManyWithoutBuildingNestedInput
    stadiumInfo?: StadiumInfoUncheckedUpdateOneWithoutBuildingNestedInput
  }

  export type BuildingUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingTypeId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteUpdateWithoutLocationFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRouteTypeFieldUpdateOperationsInput | $Enums.RouteType
    distance?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationTo?: LocationUpdateOneRequiredWithoutRoutesToNestedInput
  }

  export type RouteUncheckedUpdateWithoutLocationFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRouteTypeFieldUpdateOperationsInput | $Enums.RouteType
    toId?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteUncheckedUpdateManyWithoutLocationFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRouteTypeFieldUpdateOperationsInput | $Enums.RouteType
    toId?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteUpdateWithoutLocationToInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRouteTypeFieldUpdateOperationsInput | $Enums.RouteType
    distance?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationFrom?: LocationUpdateOneRequiredWithoutRoutesFromNestedInput
  }

  export type RouteUncheckedUpdateWithoutLocationToInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRouteTypeFieldUpdateOperationsInput | $Enums.RouteType
    fromId?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteUncheckedUpdateManyWithoutLocationToInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRouteTypeFieldUpdateOperationsInput | $Enums.RouteType
    fromId?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamLocationUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutTeamLocationNestedInput
  }

  export type TeamLocationUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamLocationUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingTypeI18nCreateManyBuildingTypeInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingCreateManyBuildingTypeInput = {
    id?: string
    locationId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingTypeI18nUpdateWithoutBuildingTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingTypeI18nUncheckedUpdateWithoutBuildingTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingTypeI18nUncheckedUpdateManyWithoutBuildingTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingUpdateWithoutBuildingTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutBuildingsNestedInput
    i18n?: BuildingI18nUpdateManyWithoutBuildingNestedInput
    stadiumInfo?: StadiumInfoUpdateOneWithoutBuildingNestedInput
  }

  export type BuildingUncheckedUpdateWithoutBuildingTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: BuildingI18nUncheckedUpdateManyWithoutBuildingNestedInput
    stadiumInfo?: StadiumInfoUncheckedUpdateOneWithoutBuildingNestedInput
  }

  export type BuildingUncheckedUpdateManyWithoutBuildingTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingI18nCreateManyBuildingInput = {
    id?: string
    language: string
    name: string
    description?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type BuildingI18nUpdateWithoutBuildingInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingI18nUncheckedUpdateWithoutBuildingInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingI18nUncheckedUpdateManyWithoutBuildingInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RaceI18nCreateManyRaceInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type CultureCreateManyRaceInput = {
    id: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PersonCreateManyRaceInput = {
    id?: string
    name: string
    shortName: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RaceI18nUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RaceI18nUncheckedUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RaceI18nUncheckedUpdateManyWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CultureUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: CultureI18nUpdateManyWithoutCultureNestedInput
    nameModels?: NameModelUpdateManyWithoutCultureNestedInput
    regionPopulations?: RegionPopulationUpdateManyWithoutCultureNestedInput
  }

  export type CultureUncheckedUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    i18n?: CultureI18nUncheckedUpdateManyWithoutCultureNestedInput
    nameModels?: NameModelUncheckedUpdateManyWithoutCultureNestedInput
    regionPopulations?: RegionPopulationUncheckedUpdateManyWithoutCultureNestedInput
  }

  export type CultureUncheckedUpdateManyWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playercharacteristics?: PlayerCharacteristicsUpdateOneWithoutPlayerNestedInput
    PersonContract?: PersonContractUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playercharacteristics?: PlayerCharacteristicsUncheckedUpdateOneWithoutPlayerNestedInput
    PersonContract?: PersonContractUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateManyWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CultureI18nCreateManyCultureInput = {
    id?: string
    language: string
    name: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type NameModelCreateManyCultureInput = {
    id?: string
    sex: $Enums.SexType
    firstnameTemplate: string
    lastnameTemplate: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RegionPopulationCreateManyCultureInput = {
    id?: string
    regionId: string
    percentage: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type CultureI18nUpdateWithoutCultureInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CultureI18nUncheckedUpdateWithoutCultureInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CultureI18nUncheckedUpdateManyWithoutCultureInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameModelUpdateWithoutCultureInput = {
    id?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexTypeFieldUpdateOperationsInput | $Enums.SexType
    firstnameTemplate?: StringFieldUpdateOperationsInput | string
    lastnameTemplate?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameModelUncheckedUpdateWithoutCultureInput = {
    id?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexTypeFieldUpdateOperationsInput | $Enums.SexType
    firstnameTemplate?: StringFieldUpdateOperationsInput | string
    lastnameTemplate?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameModelUncheckedUpdateManyWithoutCultureInput = {
    id?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexTypeFieldUpdateOperationsInput | $Enums.SexType
    firstnameTemplate?: StringFieldUpdateOperationsInput | string
    lastnameTemplate?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionPopulationUpdateWithoutCultureInput = {
    id?: StringFieldUpdateOperationsInput | string
    percentage?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutRegionPopulationsNestedInput
  }

  export type RegionPopulationUncheckedUpdateWithoutCultureInput = {
    id?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    percentage?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionPopulationUncheckedUpdateManyWithoutCultureInput = {
    id?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    percentage?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameComponentValueCreateManyKeyInput = {
    id?: string
    value: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type NameComponentValueUpdateWithoutKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameComponentValueUncheckedUpdateWithoutKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameComponentValueUncheckedUpdateManyWithoutKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonContractCreateManyPersonInput = {
    id?: string
    teamId: string
    contractType: $Enums.ContractType
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PersonContractUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutPersonContractNestedInput
  }

  export type PersonContractUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonContractUncheckedUpdateManyWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonContractCreateManyTeamInput = {
    id?: string
    personId: string
    contractType: $Enums.ContractType
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PersonContractUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutPersonContractNestedInput
  }

  export type PersonContractUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonContractUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
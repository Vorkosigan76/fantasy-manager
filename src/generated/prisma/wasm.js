
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  role: 'role',
  banned: 'banned',
  banReason: 'banReason',
  banExpires: 'banExpires'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId',
  impersonatedBy: 'impersonatedBy'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.RegionI18nScalarFieldEnum = {
  id: 'id',
  regionId: 'regionId',
  language: 'language',
  name: 'name',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  regionId: 'regionId',
  latitude: 'latitude',
  longitude: 'longitude',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.LocationI18nScalarFieldEnum = {
  id: 'id',
  locationId: 'locationId',
  language: 'language',
  name: 'name',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TownInformationScalarFieldEnum = {
  id: 'id',
  locationId: 'locationId',
  population: 'population',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.RouteScalarFieldEnum = {
  id: 'id',
  type: 'type',
  fromId: 'fromId',
  toId: 'toId',
  distance: 'distance',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.BuildingTypeScalarFieldEnum = {
  id: 'id',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.BuildingTypeI18nScalarFieldEnum = {
  id: 'id',
  buildingTypeId: 'buildingTypeId',
  language: 'language',
  name: 'name',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.BuildingScalarFieldEnum = {
  id: 'id',
  buildingTypeId: 'buildingTypeId',
  locationId: 'locationId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.BuildingI18nScalarFieldEnum = {
  id: 'id',
  buildingId: 'buildingId',
  language: 'language',
  name: 'name',
  description: 'description',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.StadiumInfoScalarFieldEnum = {
  id: 'id',
  buildingId: 'buildingId',
  capacity: 'capacity',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.RaceScalarFieldEnum = {
  id: 'id',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.RaceI18nScalarFieldEnum = {
  id: 'id',
  raceId: 'raceId',
  language: 'language',
  name: 'name',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.CultureScalarFieldEnum = {
  id: 'id',
  raceId: 'raceId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.CultureI18nScalarFieldEnum = {
  id: 'id',
  cultureId: 'cultureId',
  language: 'language',
  name: 'name',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.RegionPopulationScalarFieldEnum = {
  id: 'id',
  regionId: 'regionId',
  cultureId: 'cultureId',
  percentage: 'percentage',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.NameModelScalarFieldEnum = {
  id: 'id',
  cultureId: 'cultureId',
  sex: 'sex',
  firstnameTemplate: 'firstnameTemplate',
  lastnameTemplate: 'lastnameTemplate',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.NameComponentKeyScalarFieldEnum = {
  id: 'id',
  key: 'key',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.NameComponentValueScalarFieldEnum = {
  id: 'id',
  keyId: 'keyId',
  value: 'value',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.PersonScalarFieldEnum = {
  id: 'id',
  name: 'name',
  shortName: 'shortName',
  raceId: 'raceId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.PlayerCharacteristicsScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  shortName: 'shortName',
  isActive: 'isActive',
  ownerId: 'ownerId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TeamLocationScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  locationId: 'locationId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.PersonContractScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  teamId: 'teamId',
  contractType: 'contractType',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.LocationType = exports.$Enums.LocationType = {
  town: 'town'
};

exports.RouteType = exports.$Enums.RouteType = {
  road_paved: 'road_paved',
  road_unpaved: 'road_unpaved',
  river_upstream: 'river_upstream',
  river_downstream: 'river_downstream'
};

exports.SexType = exports.$Enums.SexType = {
  male: 'male',
  female: 'female'
};

exports.ContractType = exports.$Enums.ContractType = {
  player: 'player'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Region: 'Region',
  RegionI18n: 'RegionI18n',
  Location: 'Location',
  LocationI18n: 'LocationI18n',
  TownInformation: 'TownInformation',
  Route: 'Route',
  BuildingType: 'BuildingType',
  BuildingTypeI18n: 'BuildingTypeI18n',
  Building: 'Building',
  BuildingI18n: 'BuildingI18n',
  StadiumInfo: 'StadiumInfo',
  Race: 'Race',
  RaceI18n: 'RaceI18n',
  Culture: 'Culture',
  CultureI18n: 'CultureI18n',
  RegionPopulation: 'RegionPopulation',
  NameModel: 'NameModel',
  NameComponentKey: 'NameComponentKey',
  NameComponentValue: 'NameComponentValue',
  Person: 'Person',
  PlayerCharacteristics: 'PlayerCharacteristics',
  Team: 'Team',
  TeamLocation: 'TeamLocation',
  PersonContract: 'PersonContract'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
